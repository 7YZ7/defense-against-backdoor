{"author": "mth", "index": 0, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nvar0 = 'D-small-attempt0'\nvar1 = 0\nvar2 = 1.5 # per worker process\nvar3 = 1000\n \nfrom itertools import chain\n \ndef parse(var4):\n\tvar5, = (int(var6) for var6 in var4.readline().split())\n\tvar7 = tuple(sorted(float(var6) for var6 in var4.readline().split()))\n\tvar8 = tuple(sorted(float(var6) for var6 in var4.readline().split()))\n\tassert len(var7) == var5\n\tassert len(var8) == var5\n\treturn var7, var8\n \ndef solve(var7, var8):\n\tvar5 = len(var7)\n \n\t# greedy strategy for honest play:\n\t# play the block that is heavier by the smallest margin (if you have one)\n\t# ('honest' meaning sticking to the rules; 'fair' is something else)\n\tvar9 = 0\n\tvar10 = 0\n\tfor var11, var12 in sorted(chain(\n\t\t\t((var13, 'n') for var13 in var7),\n\t\t\t((var13, 'k') for var13 in var8)\n\t\t\t)):\n\t\tif var12 == 'n':\n\t\t\tvar10 += 1\n\t\telif var10 != 0:\n\t\t\tvar10 -= 1\n\t\t\tvar9 += 1\n\tnaomiPointsHonest = var5 - var9\n \n\t# strategy for deceitful play:\n\t# moves:\n\t# + lie and win:\n\t#   when Ken can't match the told number, he'll play his lightest block\n\t#   so you can lie and win if you play a block heavier than his lightest\n\t# + lie and lose:\n\t#   name a weight just below Ken's heaviest block, forcing him to play that\n\t# - truth and win:\n\t#   when you play a block that is actually heavier than anything Ken has\n\t#   is just a special var27 of lie and win\n\t# - truth and lose:\n\t#   never optimal\n\t# optimal order of play:\n\t#   always play your lightest block: if it can't win now, it can never win\n\t#   in the future either, nor can it be more effective in the future than\n\t#   pulling his current heaviest block\n\tvar14 = 0\n\tvar15 = var5 - 1\n\tvar16 = 0\n\tvar17 = var5 - 1\n\tvar18 = 0\n\twhile var14 <= var15:\n\t\tassert var15 - var14 == var17 - var16\n\t\tvar19 = var7[var14]\n\t\t#naomiHi = var7[var15]\n\t\tvar20 = var8[var16]\n\t\t#kenHi = var8[var17]\n\t\tif var19 > var20:\n\t\t\tvar18 += 1\n\t\t\tvar16 += 1\n\t\telse:\n\t\t\tvar17 -= 1\n\t\tvar14 += 1\n \n\t#print(var7)\n\t#print(var8)\n\t#print(return '%d %d' % (var18, naomiPointsHonest))\n \ndef main():\n\timport sys\n\tsys.setrecursionlimit(var3)\n \n\timport resource\n\tvar21, var22 = resource.getrlimit(resource.RLIMIT_AS)\n\tresource.setrlimit(resource.RLIMIT_AS, (var2 * 1024 ** 3, var22))\n \n\tvar4 = open(var0 + '.in', 'r')\n\tvar23 = int(var4.readline())\n\tif var1 == 0:\n\t\tvar24 = [\n\t\t\tsolve(*parse(var4))\n\t\t\tfor var11 in range(var23)\n\t\t\t]\n\telse:\n\t\tfrom multiprocessing import Pool\n\t\tvar25 = Pool(var1)\n\t\tvar24 = [\n\t\t\tvar25.apply_async(solve, parse(var4))\n\t\t\tfor var11 in range(var23)\n\t\t\t]\n\tvar4.close()\n\tvar26 = open(var0 + '.var26', 'w')\n\tfor var27, var28 in enumerate(var24):\n\t\tvar29 = var28 if var1 == 0 else var28.get()\n\t\tvar26.write('Case #%d: %s\n' % (var27 + 1, var29))\n\t\tvar26.flush()\n\tvar26.close()\n \nif __name__ == '__main__':\n\tmain()\n"}
{"author": "mth", "index": 0, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nvar0 = 'C-small-attempt0'\nvar1 = 0\n \ndef parse(var2):\n\tvar3, var4 = (int(var5) for var5 in var2.readline().split())\n\treturn var3, var4\n \ndef solve(var3, var4):\n\tvar6 = 0\n\tfor var7 in xrange(var3, var4):\n\t\tvar8 = str(var7)\n\t\tvar9 = set()\n\t\tfor var10 in xrange(1, len(var8)):\n\t\t\tvar11 = var8[var10 : ] + var8[ : var10]\n\t\t\tif var7 < int(var11) <= var4:\n\t\t\t\tvar9.add(var11)\n\t\tvar6 += len(var9)\n\treturn var6\n \nif __name__ == '__main__':\n\tvar2 = open(var0 + '.in.txt', 'var11')\n\tvar12 = int(var2.readline())\n\tif var1 == 0:\n\t\tvar13 = [\n\t\t\tsolve(*parse(var2))\n\t\t\tfor var14 in range(var12)\n\t\t\t]\n\telse:\n\t\tfrom multiprocessing import Pool\n\t\tvar15 = Pool(var1)\n\t\tvar13 = [\n\t\t\tvar15.apply_async(solve, parse(var2))\n\t\t\tfor var14 in range(var12)\n\t\t\t]\n\tvar2.close()\n\tvar16 = open(var0 + '.var16.txt', 'w')\n\tfor var17, var18 in enumerate(var13):\n\t\tvar19 = var18 if var1 == 0 else var18.get()\n\t\tvar16.write('Case #%var10: %var8\n' % (var17 + 1, var19))\n\t\tvar16.flush()\n\tvar16.close()\n"}
{"author": "binnie", "index": 1, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nvar0 = open(sys.argv[1])\nvar1 = int(var0.readline())\nfor var2 in range(var1):\n    var3 = int(var0.readline())\n    var4 = map(float, var0.readline().strip().split(\" \"))\n    var5 = map(float, var0.readline().strip().split(\" \"))\n    var4.sort()\n    var5.sort()\n    var6 = list(var4)\n    var7 = list(var5)\n \n    var8 = 0\n    while var4 != []:\n        var9 = var4.pop()\n        if var9 > var5[-1]:\n            var8 += 1\n            var5.pop(0)\n        else:\n            var10 = 0\n            while var5[var10] < var9:\n                var10 += 1\n            var5.pop(var10)\n \n    assert(var5 == [])\n \n    var4 = var6\n    var5 = var7\n    var4.sort(reverse=True)\n    var5.sort(reverse=True)\n    var11 = 0\n    while var4 != []:\n        var9 = var4.pop()\n        if var9 > var5[-1]:\n            var5.pop()\n            var11 += 1\n \n    print(\"Case #%d: \" % (var2 + 1), var11, var8)\n \n \n \n"}
{"author": "binnie", "index": 1, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef recycle(var0):\n    var1 = str(var0)\n    var2 = []\n    for var3 in range(1, len(var1)):\n        var2.append(var1[var3:] + var1[:var3])    \n    return var2\n \nvar4 = open(sys.argv[1])\nvar5 = int(var4.readline())\nfor var6 in range(var5):\n    var7, var8 = map(int, var4.readline().split())\n    var9 = 0\n    var10 = []\n    for var3 in range(var7,var8):\n        var11 = recycle(var3)\n        var11 = (filter(lambda var1: int(var1) > var3 and int(var1) <= var8, var11))\n        var9 += len(var11)\n        for var12 in var11:\n            var10.append((var3, int(var12)))   \n    print(\"Case #%d:\" % (var6 + 1), len(set(var10)))\n"}
{"author": "imakaramegane", "index": 2, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: utf-8\nimport sys\nimport os.path\nimport itertools\nfrom itertools import groupby\nimport math\n \ndef debug(var0):\n    pass#print(var0)\n \ndef read(var1):\n    var2 = tuple(int(var0) for var0 in var1.readline().split())\n    debug(var2)\n    return var2\n \ndef readf(var1):\n    var2 = tuple(float(var0) for var0 in var1.readline().split())\n    debug(var2)\n    return var2\n \ndef answer(var1, var3, var4, var5):\n    var6 = \"Case #{}: {} {}\".format(var3, var4, var5)\n    var1.write(var6)\n    var1.write(\"\n\")\n    print(var6)\n \n \n \ndef main(var7, var8):\n    var9, = read(var7)\n    for var10 in range(1, var9 + 1):\n        var11 = read(var7)\n        var12 = sorted(readf(var7))\n        var13 = sorted(readf(var7))\n        # print(\"------\")\n        # print(var12)\n        # print(var13)\n \n        var14 = len([None for var15 in var12 if var13[0] < var15])\n \n        var16 = 0\n        for var15 in var12:\n            for var17 in range(len(var13)):\n                if var15 < var13[var17]:\n                    del var13[var17]\n                    break\n            else:\n                var16 += 1\n                del var13[0]\n \n        answer(var8, var10, var14, var16)\n \n \nif __name__==\"__main__\":\n    var18 = sys.argv[1]\n    var19 = os.path.splitext(var18)[0] + \".var6\"\n    with open(var18, \"r\") as var7:\n        with open(var19, \"w\") as var8:\n            main(var7, var8)\n"}
{"author": "imakaramegane", "index": 2, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef testcases():\n    with open(sys.argv[1], \"r\") as f:\n        f.readline()  # skip number of testcases\n        for var0, var1 in enumerate(f, 1):\n            yield var0, [int(var2) for var2 in var1.split()]\n \ndef main():\n    for var0, var1 in testcases():\n        var3 = var1[0]\n        var4 = var1[1]\n        var5 = 0\n        var6 = str(var3)\n        for var7 in range(var4, var3 - 1, - 1):\n            var8 = str(var7)\n            var9 = set()\n            for var10 in range(1, len(var8)):\n                var11 = var8[var10:] + var8[:var10]\n                if var11 not in var9 and var6 <= var11 < var8:\n                    var9.add(var11)\n                    var5 += 1\n \n        print(\"Case #{:d}: {:d}\".format(var0, var5))\n \nif __name__==\"__main__\":\n    main()\n"}
{"author": "serialk", "index": 3, "filename": "2014_2974486_5644738749267968.py", "code": "import bisect\n \nvar0 = int(input())\n \nfor var1 in range(var0):\n    var2 = int(input())\n    var3 = sorted(list(map(float, input().split())))\n    var4 = sorted(list(map(float, input().split())))\n    var5 = var3[:]\n    var6 = var4[:]\n    var7 = 0\n    var8 = 0\n    for var9 in var3:\n        var10 = bisect.bisect_left(var4, var9)\n        if var10 == len(var4):\n            var7 += 1\n            var4.pop(0)\n        else:\n            var4.pop(var10)\n    for var9 in var5:\n        if var9 > var6[0]:\n            var8 += 1\n            var6.pop(0)\n        else:\n            var6.pop()\n    print('Case #{}: {} {}'.format(var1 + 1, var8, var7))\n"}
{"author": "serialk", "index": 3, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python2.7\n \nvar0 = int(raw_input())\nfor var1 in xrange(var0):\n    var2 = map(int, raw_input().split())\n    [var3,var4,var5] = var2[0:3]\n    var6 = var2[3:]\n    var7 = 0\n    for var8 in var6:\n        if var8 < 2:\n            if var8 >= var5:\n                var7 += 1\n        elif var8 % 3 == 1 and (var8-1) / 3 + 1 >= var5:\n            var7 += 1\n        elif var8 % 3 == 0:\n            var9 = var8 / 3\n            if var9 >= var5:\n                var7 += 1\n            elif var4 > 0 and var9 + 1 >= var5:\n                var7 += 1\n                var4 -= 1\n        elif var8 % 3 == 2:\n            var9 = (var8 - 2) / 3\n            if var9 + 1 >= var5:\n                var7 += 1\n            elif var4 > 0 and var9 + 2 >= var5:\n                var7 += 1\n                var4 -= 1\n    print('Case #{0}: {1}'.format(var1+1, var7))\n"}
{"author": "j4b", "index": 4, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\nimport functools\nimport operator\nimport math\nfrom itertools import chain, combinations\nfrom heapq import heappop, heappush, _siftup\n \ndef solveWar(var0, var1):\n    var2 = sorted(var0)\n    var3 = sorted(var1)\n    var4 = 0\n     \n    # while var2:\n    #     var5 = var2.pop(0)\n    #     res = [kweight for kweight in var3 if kweight > var5]\n    #     if res:\n    #         var3.remove(min(res))\n    #     else:\n    #         var4 += len(var2) + 1\n    #         break\n \n    for var5 in var2:\n        while var3 and var3[0] < var5:\n            var3.pop(0)\n            var4 += 1\n \n        if not var3:\n            break\n        else:\n            var3.pop(0)\n             \n    return var4\n \ndef solveDWar(var0, var1):\n    var2 = sorted(var0)\n    var3 = sorted(var1)\n    var4 = 0\n \n    for var5 in var2:\n        if var5 > var3[0]:\n            var4 += 1\n            var3.pop(0)\n        else:\n            var3.pop(-1)\n     \n    return var4\n \ndef solve(var2, var3):\n    return (\"%s %s\" % (solveDWar(var2, var3), solveWar(var2, var3)))\n \ndef main():\n    var6 = int(sys.stdin.readline()) # number of testcases\n    for var7 in range(var6):\n        sys.stdin.readline()\n        var2 = [float(var8) for var8 in sys.stdin.readline().rstrip().split()]\n        var3 = [float(var8) for var8 in sys.stdin.readline().rstrip().split()]\n \n        var9 = solve(var2, var3)\n        print((\"Case #%s: %s\" % (var7+1, var9)))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "j4b", "index": 4, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \nimport sys\nimport functools\nimport operator\n \n \ndef solve(var0,var1):\n    var2 = 0\n    for var3 in range(var0, var1+1):\n        var4 = str(var3)\n        var5 = []\n        for var6 in range(1,len(var4)):\n            var7 = int(var4[var6:] + var4[:var6])\n            #print(\"checking \" + str(var7))\n            if var3 < var7 and var7 <= var1 and var7 not in var5:\n                var2 += 1\n                var5.append(var7)\n    return var2\n         \n \ndef main():\n    var8 = int(sys.stdin.readline()) # number of testcases\n    for var6 in range(var8):\n        [var0, var1] = [int(var9) for var9 in sys.stdin.readline().split()]\n        var10 = solve(var0,var1)\n        print((\"Case #%var4: %var4\" % (var6+1, var10)))\n \n \nif __name__ == '__main__':\n    main()\n"}
{"author": "argaen", "index": 5, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = int(raw_input())\n \nfor var1 in range(var0):\n\tvar2 = int(raw_input())\n\tvar3 = [float(var4) for var4 in raw_input().split()]\n\tvar5 = [float(var4) for var4 in raw_input().split()]\n \n\tvar3.sort()\n\tvar5.sort()\n\tvar6 = 0\n\tvar7 = 0\n \n\t#print(var3)\n\t#print(var5)\n \n\tvar8 = var3[:]\n\tvar9 = var5[:]\n\twhile len(var8) > 0:\n\t\tvar10 = var8.pop(0)\n\t\tvar11 = -1\n\t\tfor var4 in range(len(var9)):\n\t\t\tif var9[var4] > var10:\n\t\t\t\tvar11 = var9.pop(var4)\n\t\t\t\tbreak\n\t\tif var11 == -1:\n\t\t\tvar11 = var9.pop(0)\n\t\tif var10 > var11:\n\t\t\tvar7 += 1\n \n \n\tvar8 = var3[:]\n\tvar9 = var5[:]\n\twhile len(var9) > 0:\n\t\tvar11 = var9.pop(0)\n\t\tvar10 = -1\n\t\tfor var4 in range(len(var8)):\n\t\t\tif var8[var4] > var11:\n\t\t\t\tvar10 = var8.pop(var4)\n\t\t\t\tbreak\n\t\tif var10 == -1:\n\t\t\tvar10 = var8.pop(0)\n\t\tif var10 > var11:\n\t\t\tvar6 += 1\n\t\t#print(var10, var11)\n \n\tprint('Case #'+str(var1+1)+':', var6, var7)\n\t#print('')\n"}
{"author": "argaen", "index": 5, "filename": "2012_1460488_1483488.py", "code": "var0 = int(raw_input())\n \ndef mover(var1, var2):\n\tvar3 = str(var1)\n\treturn int(var3[var2:] + var3[:var2])\n \nfor var2 in range(var0):\n\tvar3 = raw_input().split(' ')\n\tvar4 = int(var3[0])\n\tvar5 = int(var3[1])\n\tvar6 = 0\n\tfor var1 in range(var4, var5):\n\t\tvar7 = []\n\t\tfor var8 in range(len(var3[0])):\n\t\t\tvar9 = mover(var1, var8+1)\n\t\t\tif var9 <= var5 and var9 > var1 and not var9 in var7:\n\t\t\t#\tprint(var1, mover(var1, var8+1), var8+1)\n\t\t\t\tvar7.append(var9)\n\t\t\t\tvar6 +=1\n \n \n\tprint('Case #'+str(var2+1)+':', var6)"}
{"author": "graygrass", "index": 6, "filename": "2014_2974486_5644738749267968.py", "code": "import os\nimport bisect\n \nclass Solver(object):\n    def __init__(var0):\n        pass\n     \n    def solve(var0, var1):\n        var2 = [float(var3) for var3 in var1[1].split()]\n        var2.sort()\n        var4 = [float(var3) for var3 in var1[2].split()]\n        var4.sort()\n        var5 = var0.dwar(var2[:], var4[:])\n        var6 = var0.war(var2[:], var4[:])\n        return '%d %d'%(var5, var6)\n        pass\n     \n    def dwar(var0, var2, var4):\n        var7 = len(var2)\n        var8 = 0\n        for var9 in range(var7):\n            var9 = var9\n            if var2[-1] < var4[-1]:\n                var2.pop(0)\n                var4.pop(-1)\n            elif var2[0] < var4[0]:\n                var2.pop(0)\n                var4.pop(-1)\n            else:\n                var8 += 1\n                var2.pop(0)\n                var4.pop(0)\n        return var8\n     \n    def war(var0, var2, var4):\n        var7 = len(var2)\n        var8 = 0\n        for var9 in range(var7):\n            var9 = var9\n            var10 = bisect.bisect_left(var4, var2[0])\n            if var10 == len(var4):\n                var8 += 1\n                var4.pop(0)\n            else:\n                var4.pop(var10)\n            var2.pop(0)\n        return var8\n     \n    def feed(var0, var1):\n        var11 = [var3.strip() for var3 in var1]\n        var12 = []\n        var13 = int(var11[0])\n        var14 = 1\n        for var9 in range(var13):\n            var9 = var9\n            var15 = 3\n            var16 = var11[var14:var14+var15]\n            var14 += var15\n            var12.append(var0.solve(var16))\n        return var12\n \nif __name__ == '__main__':\n    var17 = 'D-small-attempt0.in'\n#     var17 = 'foo'\n    var18 = '''\n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n    '''\n    var19 = '''\nCase #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n    '''\n    if os.path.exists(var17):\n        with open(var17) as f:\n            var1 = f.readlines()\n    else:\n        var1 = [var3.strip() for var3 in var18.split('\n') if var3.strip()]\n    var20 = Solver()\n    var12 = var20.feed(var1)\n    var21 = False\n    if os.path.exists(var17):\n        with open(var17+'.out', 'var6') as f:\n            for var9, var22 in enumerate(var12):\n                print >> f, 'Case #%d: %s'%(var9+1, str(var22))\n    else:\n        var23 = set([var3.strip() for var3 in var19.split('\n') if var3.strip()])\n        for var9, var22 in enumerate(var12):\n            var24 = 'Case #%d: %s'%(var9+1, str(var22))\n            if var24 not in var23:\n                print ('!!! Wrong:', var24)\n                var21 = True\n    print ('====================================================')\n    for var9, var22 in enumerate(var12):\n        print ('Case #%d: %s'%(var9+1, str(var22)))\n    print ('====================================================')\n    print ('done' if not var21 else 'fail')\n    pass"}
{"author": "graygrass", "index": 6, "filename": "2012_1460488_1483488.py", "code": "#! /usr/bin/env python\n#coding=utf-8\n \ndef solve(var0, var1):\n    var2 = 'Case #%var8: '%var0\n     \n    var3 = 0\n    var4 = var1[0].split()\n    var5 = len(var4[0])\n    var6 = int(var4[0])\n    var7 = int(var4[1])\n     \n    for var8 in xrange(var6, var7):\n        var9 = set()\n        for var10 in xrange(1, var5):\n            var11 = 10**var10\n            var12 = 10**(var5-var10)\n            var13, var14 = divmod(var8, var11)\n            var15 = var14*var12 + var13\n            if var15 > var8 and var15 <= var7:\n                var9.add(var15)\n        var3 += len(var9)\n         \n \n    var2 += '%d'%var3\n     \n    return var2\n \n \ndef main():\n    global var23\n    global var22\n    global var25\n    global var26\n     \n    if var23:\n        var16 = [var17.strip() for var17 in var22.split('\n')]\n    else:\n        var16 = [var17.strip() for var17 in var25.readlines()]\n     \n    var18 = int(var16[0])\n    var19 = 1\n    var20 = 1\n    for var0 in range(1, var18 + 1):\n        var21 = []\n        for var8 in range(var20):\n            var21.append(var16[var19])\n            var19 += 1\n        var9 = solve(var0, var21)\n        print (var9)\n        if not var23:\n            print >> var26, var9\n     \n    if not var23:\n        var25.close()\n        var26.close()\n     \n     \nif __name__ == '__main__':\n    var22 = \"\"\"5\n1 9\n10 40\n100 500\n1111 2222\n1000000 2000000\n\"\"\"\n    var23 = False\n     \n    var24 = 'C-small-attempt0.in'\n    if not var23 and '' != var24:\n        var25 = open(var24)\n        var26 = open(var24 + '.out', 'w')\n     \n    main()"}
{"author": "alexamici", "index": 7, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"Usage:\n    pypy X.py < X-size.in > X-size.out\nor sometimes\n    python X.py < X-size.in > X-size.out\n\"\"\"\n \ndef setup(var0):\n    #var2 = {}\n    return locals()\n \ndef reader(var1, var0, var2=None, **ignore):\n    var3 = int(var0.next())\n    var4 = map(float, var0.next().split())\n    var5 = map(float, var0.next().split())\n    #var6 = var0.next().split()\n    #var7 = [var0.next().strip() for var13 in range(var3)]\n    return locals()\n \ndef solver(var1, var3=None, var4=None, var5=None, var6=None, var7=None, var2=None, **ignore):\n    #import collections as co\n    #import functools32 as ft\n    #import itertools as it\n    #import operator as op\n    #import math as ma\n    #import re\n    #import numpypy as np\n    #import scipy as sp\n    #import networkx as nx\n \n    var3 = sorted(var4)\n    var8 = sorted(var5)\n \n    var9 = 0\n    var10 = 0\n    for var11 in var3:\n        while var10 < len(var8) and var8[var10] < var11:\n            var10 += 1\n            var9 += 1\n        var10 += 1\n \n    var12 = 0\n    var13 = 0\n    for var14 in var8:\n        while var13 < len(var3) and var3[var13] < var14:\n            var13 += 1\n        var13 += 1\n        if var13 <= len(var3):\n            var12 += 1\n \n    return 'Case #%s: %s %s\n' % (var1, var12, var9)\n \nif __name__ == '__main__':\n    import sys\n    var6 = int(sys.stdin.next())\n    var15 = setup(sys.stdin)\n    for var16 in xrange(1, var6+1):\n        sys.stdout.write(solver(**reader(var16, **var15)))\n"}
{"author": "alexamici", "index": 7, "filename": "2012_1460488_1483488.py", "code": "\"\"\"Usage:\n    X.py < X.in > X.out\n\"\"\"\n \nimport sys\n \n \nclass Solver(object):\n    var0 = {}\n \n    def __init__(var1, var2, var3):\n        var1.var3 = var3\n        #var1.N = N = int(var2.next())\n        #var1.P = P = map(int, var2.next().split())\n        var1.var4 = var4 = map(int, var2.next().split())\n        #var1.var11 = var11 = var2.next().split()\n        #var1.S = S = [var2.next().strip() for var7 in range(N)]\n \n        #var1.init_cache()\n \n    def init_cache(var1):\n        if 'main' in var1.var0:\n            return\n        #var1.var0['main'] = res\n \n    def solve(var1):\n        #import collections as co\n        #import functools as ft\n        #import itertools as it\n        #import operator as op\n        #import math as ma\n        #import re\n        #import numpy as np\n        #import scipy as sp\n \n        #N = var1.N\n        #N, M = var1.P\n        var4 = var1.var4\n        #var11 = var1.var11\n        #S = var1.S\n        var5 = len(str(var4[0]))\n \n        var6 = 0\n        for var7 in xrange(var4[0], var4[1]):\n            var8 = str(var7)\n            var9 = set()\n            for var10 in xrange(1, var5):\n                if  var7 < int(var8[var10:]+var8[:var10]) <= var4[1]:\n                    var9.add(var8[var10:]+var8[:var10])\n            var6 += len(var9)\n \n        return var6\n \n \ndef main():\n    var11 = int(sys.stdin.next())\n    for var12 in xrange(var11):\n        sys.stdout.write('Case #%s: %s\n' % (var12 + 1, Solver(sys.stdin, var12).solve()))\n \n \nif __name__ == '__main__':\n    main()\n"}
{"author": "ralfkistner", "index": 8, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Uses https://github.com/rkistner/contest-algorithms\n \n# Naomi and Ken sometimes play games together. Before they play, each of them gets var3 identical-looking blocks of wood with masses between 0.0kg and 1.0kg (exclusive). All of the blocks have different weights. There are lots of games they could play with those blocks, but they usually play something they call War. Here is how War works:\n \n# Each player weighs each of his or her own blocks, so each player knows the weights of all of his or her own blocks, but not the weights of the other player's blocks.\n# They repeat the following process var3 times:\n# Naomi chooses one of her own blocks, with mass ChosenNaomi.\n# Naomi tells Ken the mass of the block she chose.\n# Ken chooses one of his own blocks, with mass ChosenKen.\n# They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n# Both blocks are destroyed in a fire.\n# Naomi has realized three things about War. First, she has realized that she loses a lot. Second, she has realized that there is a unique strategy that Ken can follow to maximize his points without assuming anything about Naomi's strategy, and that Ken always uses it. Third, she has realized that she hates to lose. Naomi has decided that instead of playing War, she will play a game she calls Deceitful War. The great thing about Deceitful War is that Ken will think they're playing War!\n \n# Here is how Deceitful War works, with differences between Deceitful War and War in bold:\n \n# Each player weighs each of his or her own blocks. Naomi also weighs Ken's blocks while he isn't looking, so Naomi knows the weights of all blocks and Ken only knows the weights of his own blocks.\n# They repeat the following process var3 times:\n# Naomi chooses one of her own blocks, with mass ChosenNaomi.\n# Naomi tells Ken a number, ToldNaomi, between 0.0kg and 1.0kg exclusive. Ken, who thinks they're playing War, thinks the number Naomi just told him is ChosenNaomi.\n# Ken chooses one of his own blocks, with mass ChosenKen.\n# They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n# Both blocks are destroyed in a fire.\n# Naomi doesn't want Ken to know that she isn't playing War; so when she is choosing which block to play, and what mass to tell Ken, she must make sure that the balance scale won't reveal that ChosenNaomi ≠ ToldNaomi. In other words, she must make decisions so that:\n \n# ChosenNaomi > ChosenKen if, and only if, ToldNaomi > ChosenKen, and\n# ToldNaomi is not equal to the mass of any of Ken's blocks, because he knows that isn't possible.\n# It might seem like Naomi won't win any extra points by being deceitful, because Ken might discover that she wasn't playing War; but Naomi knows Ken thinks both players are playing War, and she knows what he knows, and she knows Ken will always follow his unique optimal strategy for War, so she can always predict what he will play.\n \n# You'll be given the masses of the blocks Naomi and Ken started with. Naomi will play Deceitful War optimally to gain the maximum number of points. Ken will play War optimally to gain the maximum number of points assuming that both players are playing War. What will Naomi's score be? What would it have been if she had played War optimally instead?\n \n# Examples\n \n# If each player has a single block left, where Naomi has 0.5kg and Ken has 0.6kg, then Ken is guaranteed to score the point. Naomi can't say her number is ≥ 0.6kg, or Ken will know she isn't playing War when the balance scale shows his block was heavier.\n \n# If each player has two blocks left, where Naomi has [0.7kg, 0.2kg] and Ken has [0.8kg, 0.3kg], then Naomi could choose her 0.2kg block, and deceive Ken by telling him that she chose a block that was 0.6kg. Ken assumes Naomi is telling the truth (as in how the War game works) and will play his 0.8kg block to score a point. Ken was just deceived, but he will never realize it because the balance scale shows that his 0.8kg block is, like he expected, heavier than the block Naomi played. Now Naomi can play her 0.7kg block, tell Ken it is 0.7kg, and score a point. If Naomi had played War instead of Deceitful War, then Ken would have scored two points and Naomi would have scored zero.\n \n# Input\n \n# The first line of the input gives the number of test cases, var1. var1 test cases follow. Each test var2 starts with a line containing a single integer var3, the number of blocks each player has. Next follows a line containing var3 space-separated real numbers: the masses of Naomi's blocks, in kg. Finally there will be a line containing var3 space-separated real numbers: the masses of Ken's blocks, in kg.\n \n# Each of the masses given to Ken and Naomi will be represented as a 0, followed by a decimal point, followed by 1-5 digits. Even though all the numbers in the input have 1-5 digits after the decimal point, Ken and Naomi don't know that; so Naomi can still tell Ken that she played a block with mass 0.5000001kg, and Ken has no reason not to believe her.\n \n# Output\n \n# For each test var2, output one line containing \"Case #x: y z\", where x is the test var2 number (starting from 1), y is the number of points Naomi will score if she plays Deceitful War optimally, and z is the number of points Naomi will score if she plays War optimally.\n \n# Limits\n \n# 1 ≤ var1 ≤ 50.\n# All the masses given to Ken and Naomi are distinct, and between 0.0 and 1.0 exclusive.\n# Small dataset\n \n# 1 ≤ var3 ≤ 10.\n# Large dataset\n \n# 1 ≤ var3 ≤ 1000.\n \n \nimport sys\n \n \ndef debug(*args):\n    print(*args, file=sys.stderr)\n \nvar0 = sys.stdin\nvar1 = int(var0.readline())\nfor var2 in range(1, var1 + 1):\n    var3 = int(var0.readline())\n    var4 = list(map(float, var0.readline().split()))\n    var5 = list(map(float, var0.readline().split()))\n \n    var4.sort(reverse=True)\n    var5.sort()\n \n    # Normal\n    var6 = 0\n    var7 = var5[:]\n    for var8 in var4:\n        var9 = False\n        for var10, var11 in enumerate(var7):\n            if var11 > var8:\n                del var7[var10]\n                var9 = True\n                break\n        if not var9:\n            var6 += 1\n \n    var12 = 0\n    var7 = var5[:]\n    var4.sort()\n    # debug(var4)\n    # debug(var7)\n    while var4:\n        var8 = var4[0]\n        if var8 > var7[0]:\n            var12 += 1\n            del var7[0]\n            del var4[0]\n        else:\n            del var7[-1]\n            del var4[0]\n \n    print(\"Case #%d: %d %d\" % (var2, var12, var6))\n \n"}
{"author": "ralfkistner", "index": 8, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\nimport sys\nvar0 = sys.stdin\nvar1 = int(var0.readline())\nfor var2 in range(1,var1+1):\n    var3, var4 = map(int, var0.readline().split())\n \n    var5 = 0\n \n    for var6 in range(var3, var4+1):\n        var7 = str(var6)\n        var8 = set()\n        for var9 in range(1, len(var7)):\n            var10 = var7[var9:] + var7[:var9]\n            var11 = int(var10)\n            if var11 > var6 and var11 <= var4:\n                var8.add(var10)\n        var5 += len(var8)\n \n \n    print(\"Case #%d: %s\" % (var2, var5))\n \n"}
{"author": "cathco", "index": 9, "filename": "2014_2974486_5644738749267968.py", "code": "from copy import deepcopy\nimport time\n \ndef dwar(var0, var1):\n    var0 = sorted(var0)\n    var1 = sorted(var1)\n    \n    var2 = 0\n    \n    #if var2 can win then she should lose her lowest piece to do so\n    #if kevin can win then he should lose his highest piece\n    while len(var0) > 0:\n        # Naomi can win.\n        if var0[-1] > var1[-1]:\n            # Kevin loses highest piece.\n            var3 = var1.pop()\n            # Naomi loses lowest piece necessary.\n            for var4, var5 in enumerate(var0):\n                if var0[var4] > var3:\n                    var6 = var4\n                    break\n            del(var0[var6])\n            var2 += 1\n        # Naomi cannot win.\n        else:\n            # Naomi loses lowest piece.\n            var0 = var0[1:]\n            var3 = var1.pop()\n    return var2\n \ndef war(var0, var1):\n    var0 = sorted(var0)\n    var1 = sorted(var1)\n    \n    var2 = 0\n    while len(var0) > 0:\n        var5 = var0.pop()\n        var7 = None\n        for var4, var3 in enumerate(var1):\n            if var3 > var5:\n                var7 = var4\n                break\n        if not var7 == None:\n            del(var1[var7])\n        else:\n            var2 += 1\n    return var2\n \nvar8 = int(raw_input())\nfor var9 in range(var8):\n    var10 = raw_input()\n    var0 = map(float, raw_input().split())\n    var1 = map(float, raw_input().split())\n   \nprint ('Case #%var4: %var4 %var4' % (var9+1, dwar(var0, var1), war(var0, var1)))\n"}
{"author": "cathco", "index": 9, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef isRecycledPair(var0, var1):\n    var1 = str(var1)\n    for var2 in range(len(var1)):\n        var1 = var1[-1] + var1[:-1]\n        if var0 == int(var1):\n            return True\n    return False\n \nvar3 = int(sys.stdin.readline())\nfor var2 in range(var3):\n    [var4, var5] = map(int, sys.stdin.readline().strip().split(' '))\n    var6 = 0\n    for var0 in range(var4, var5+1):\n        for var1 in range(var0, var5+1):\n            if var0 != var1 and isRecycledPair(var0, var1):\n                var6 += 1\n    print('Case #%s: %s' % (var2 + 1, var6))\n"}
{"author": "gepa", "index": 10, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n \ndef dw(var0, var1):\n    var0 = sorted(var0)\n    var1 = sorted(var1)\n    var2 = 0\n    var3 = 0\n    for var4 in var0:\n        if var1[var3] < var4:\n            var2 += 1\n            var3 += 1\n    return var2\n \n \ndef w(var0, var1):\n    var0 = sorted(var0, reverse=True)\n    var1 = sorted(var1, reverse=True)\n    var2 = 0\n    var3 = 0\n    for var4 in var0:\n        if var4 > var1[var3]:\n            var2 += 1\n        else:\n            var3 += 1\n    return var2\n \n \ndef compute(var0, var1):\n    var5 = dw(var0, var1)\n    var6 = w(var0, var1)\n    return \"%s %s\" % (var5, var6)\n \n \ndef parse():\n    var7 = int(sys.stdin.readline().strip())\n    var0 = map(float, sys.stdin.readline().strip().split())\n    var1 = map(float, sys.stdin.readline().strip().split())\n    return var0, var1\n \n \nif __name__ == \"__main__\":\n    sys.setrecursionlimit(100000)\n    var8 = int(sys.stdin.readline().strip())\n    for var4 in xrange(var8):\n        var9 = parse()\n        var10 = compute(*var9)\n        print(\"Case #%d: %s\" % (var4 + 1, var10))\n"}
{"author": "gepa", "index": 10, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nvar0 = 2000000\n \n \ndef get_min_mapped(var1):\n    var2 = var1\n    var3 = str(var1)\n    for var4 in xrange(1, len(var3)):\n        var3 = var3[1:] + var3[0]\n        if var3[0] == '0':\n            continue\n        var2 = min(var2, int(var3))\n    return var2\n \n \nif __name__ == \"__main__\":\n    var5 = int(sys.stdin.readline().strip())\n    var6 = [0] * (var0 + 1)\n    for var4 in xrange(1, var0 + 1):\n        var6[var4] = get_min_mapped(var4)\n \n    for var7 in xrange(var5):\n        var8 = map(int, sys.stdin.readline().strip().split(' '))\n        var9, var10 = var8\n        var11 = [0] * (var10 + 1)\n        for var4 in xrange(var9, var10 + 1):\n            var11[var6[var4]] += 1\n        var12 = 0\n        for var4 in xrange(var10 + 1):\n            if var11[var4] > 1:\n                var12 += (var11[var4] * (var11[var4] - 1)) / 2\n        print(\"Case #%d: %s\" % (var7 + 1, var12))\n"}
{"author": "jgaten", "index": 11, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nimport sys\n \ndef war(var0, var1, var2):\n    \"\"\"Return Naomi's score in regular War\n \n    Strategy: Naomi and Ken both play their smallest possible block. When Ken\n    runs out of winning blocks, Naomi's score is the number of remaining blocks.\n \n    Ken's strategy is to select the smallest block which will beat Naomi's\n    choice, or if there is none, then his smallest block.\n    \"\"\"\n    var3 = 0   # position through naomi's blocks\n    var4 = 0   # position through ken's blocks\n \n    # Play each of Naomi's blocks:\n    while var3 < var0:\n        # Invariant: var3 <= var4\n        # Find a block for Ken to play\n        while var4 < var0 and var2[var4] < var1[var3]:\n            var4 += 1\n \n        # If Ken is out of playable blocks, game is over.\n        if var4 == var0:\n            break\n \n        # Move on to the next block for each player\n        var3 += 1\n        var4 += 1\n \n    return var0 - var3\n \ndef deceit(var0, var1, var2):\n    \"\"\"Return Naomi's score in Deceitful War\n \n    Strategy: Naomi selects the smallest block with size > min(var2), and sets\n    Told_N > max(var2). Ken will choose to play min(var2), and lose the round.\n    If all of Naomi's blocks are smaller than all of Ken's, she cannot win any\n    more rounds, and her score is the number of blocks used (which is also equal\n    to var0 - the number of remaining blocks).\n \n    This happens to be the same strategy as regular war, with var2 and var1 swapped,\n    and the final score subtracted from var0. (At least, I'm pretty sure it'll work).\n    \"\"\"\n    return var0 - war(var0, var2, var1)\n \n \ndef solve(var0, var1, var2):\n    var1.sort()\n    var2.sort()\n    return \"{} {}\".format(deceit(var0, var1, var2), war(var0, var1, var2))\n \nif __name__ == '__main__':\n    var5 = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n    var6 = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n    with var5, var6:\n        var7 = int(var5.readline())\n        for var8 in xrange(1, var7+1):\n            var9 = int(var5.readline())\n            var1 = map(float, var5.readline().split())\n            var2 = map(float, var5.readline().split())\n            var10 = solve(var9, var1, var2)\n            print >> var6, \"Case #{0}: {1}\".format(var8, var10)\n \n"}
{"author": "jgaten", "index": 11, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef solve(var0, var1):\n    var2 = 0\n    for var3 in xrange(var0, var1):\n        var4 = str(var3)\n        for var5 in xrange(len(var4)):\n            var6 = int(var4[var5:] + var4[:var5])\n            if var3 < var6 <= var1:\n                var2 += 1\n    return var2\n \nif __name__ == '__main__':\n    with open(sys.argv[1], 'rU') as fin, open(sys.argv[2], 'w') as fout:\n        var7 = int(fin.readline())\n        for var8 in xrange(1, var7+1):\n            var0, var1 = map(int, fin.readline().split())\n            print >> fout, \"Case #{0}: {1}\".format(var8, solve(var0, var1))\n"}
{"author": "ziyan", "index": 12, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nimport Queue\n \ndef ken(var0, var1):\n    \"\"\"\n    Since ken do not know Naomi's blocks weights\n    Best strategy will be spent the smallest var2 to beat Naomi\n    \"\"\"\n \n    for var2 in var0:\n        if var2 > var1:\n            var0 = var0[:]\n            var0.remove(var2)\n            return True, var0\n \n    var0 = var0[1:]\n    return False, var0\n \ndef naomi(var3):\n    var1 = var3[0]\n    var3 = var3[1:]\n    return var1, var3\n \ndef play(var3, var0):\n    var4 = 0\n    var5 = 0\n \n    var3.sort()\n    var0.sort()\n \n    while var3 and var0:\n        var1, var3 = naomi(var3)\n        var6, var0 = ken(var0, var1)\n        if var6:\n            var5 += 1\n        else:\n            var4 += 1\n \n    return var4\n \ndef naomi2(var3, var0):\n    var7 = var0[0]\n    for var2 in var3:\n        if var2 > var7:\n            var3 = var3[:]\n            var3.remove(var2)\n            return var0[-1] + 0.0000001, var3\n    return var3[0], var3[1:]\n \ndef cheat(var3, var0):\n    var4 = 0\n    var5 = 0\n \n    var3.sort()\n    var0.sort()\n \n    while var3 and var0:\n        var1, var3 = naomi2(var3, var0)\n        var6, var0 = ken(var0, var1)\n        if var6:\n            var5 += 1\n        else:\n            var4 += 1\n    return var4\n \ndef main():\n    var8 = int(sys.stdin.readline())\n \n    for var9 in range(var8):\n        var10 = int(sys.stdin.readline())\n        var3 = map(float, sys.stdin.readline().split())\n        var0 = map(float, sys.stdin.readline().split())\n        assert len(var3) is var10\n        assert len(var0) is var10\n \n        var11 = play(var3, var0)\n        var12 = cheat(var3, var0)\n        print('Case #%d: %d %d' % (var9 + 1, var12, var11))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "ziyan", "index": 12, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef find_recycled_pairs(var0, var1):\n    var2 = 0\n    var3 = len(str(var0))\n    for var4 in range(var0, var1 + 1):\n        var5 = []\n        for var6 in range(1, var3):\n            var7 = str(var4)[:var6]\n            var8 = str(var4)[-(var3 - var6):]\n            var9 = int(var8 + var7)\n            if var9 != var4 and len(str(var4)) == len(str(var9)) and var9 in range(var0, var1 + 1) and var9 not in var5:\n                var5.append(var9)\n                #print('%s -> %s' % (var7 + var8, var8 + var7))\n                var2 = var2 + 1\n    return var2 / 2\n \n \ndef find_recycled_pairs_efficient(var0, var1):\n    var2 = 0\n    var10 = str(var0)\n    var11 = str(var1)\n    var3 = len(var10)\n    for var7 in range(1, var3):\n        var8 = var3 - var7\n        var12 = int(var10[:var7])\n        var13 = int(var11[:var7])\n        var14 = int(var10[-var7:])\n        var15 = int(var11[-var7:])\n        var9 = int(var10[:var8])\n        var16 = int(var11[:var8])\n        print('%var4 var7: var12 = %var4, var14 = %var4, var15 = %var4, var13 = %var4, var9 = %var4, var16 = %var4' % (var7, var12, var14, var15, var13, var9, var16))\n \n        if int(str(var13) + str(var16)) >= var1:\n            var17 = int(var11[-var8:])\n            print('var17 - var9 = %var4 - %var4' % (var17, var9))\n            if var17 > var9:\n                var2 = var2 + (var17 - var9)\n        if int(str(var12) + str(var9)) <= var0:\n            var18 = int(var10[-var8:])\n            print('var16 - var18 = %var4 - %var4' % (var16, var18))\n            if var16 > var18:\n                var2 = var2 + (var16 - var18)\n \n        if len(str(var16)) >= len(str(var12)):\n            var2 = var2 + (var13 - var12) * (var16 - var9)\n        else:\n            var2 = var2 + (var13 - var12 - 1) * (var16 - var9 + 1)\n \n        if var12 < var14:\n            var2 = var2 - (var14 - var12 - 1)\n        if var13 > var15:\n            var2 = var2 - (var13 - var15 - 1)\n \n    return var2 / 2\n \ndef main():\n \n    var19 = int(sys.stdin.readline())\n \n    for var20 in range(1, var19 + 1):\n        (var0, var1) = sys.stdin.readline().strip().split(' ')\n        var0 = int(var0)\n        var1 = int(var1)\n        assert len(str(var0)) == len(str(var1))\n        print('Case #%var4: %s' % (var20, find_recycled_pairs(var0, var1)))\n \nif __name__ == '__main__':\n    main()"}
{"author": "enterr", "index": 13, "filename": "2014_2974486_5644738749267968.py", "code": "#\n# Google Code Jam 2014\n# Roaund 0: D. Deceitful War\n# submission by EnTerr\n#\n \n'''\nInput\nThe first line of the input gives the number of test cases, T. T test cases follow. \nEach test case starts with a line containing a single integer N, the number of blocks \neach player has. Next follows a line containing N space-separated real numbers: \nthe masses of var1's blocks, in kg. Finally there will be a line containing N \nspace-separated real numbers: the masses of var2's blocks, in kg.\n \nOutput\nFor each test case, output one line containing \"Case #x: y z\", where \nx is the test case number (starting from 1), \ny is the number of points var1 will score if she plays Deceitful War optimally, and \nz is the number of points var1 will score if she plays War optimally.\n \nLimits\n1 <= T <= 50.\nAll the masses given to var2 and var1 are distinct, and between 0.0 and 1.0 exclusive.\n \nSmall dataset\n1 <= N <= 10.\n \nLarge dataset\n1 <= N <= 1000.\n \n---Input \n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n \n---Output \nCase #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n \n \n'''\n \nimport sys\nfrom time import clock\n \nvar0 = open(sys.argv[1])\ndef input(): return var0.readline().strip();\n \n \n \ndef deceitfulWar(var1, var2):\n    var1 = var1[:]\n    var2 = var2[:]\n    var3 = 0\n    while var1 and var2 and var1[-1] > var2[0]:\n        #var1's max is bigger than var2's min\n        #lie to force him to throw out the min\n        #fore-\"trump\" with smallest bigger card\n        var4 = var2.pop(0)\n        for var5 in range(len(var1)):\n            if var1[var5] > var4:\n                #since var1[-1] > var4, we'll get here\n                var1.pop(var5)\n                break\n        var3 += 1        \n \n    return var3\n \ndef war(var1, var2):\n    var1 = var1[:]\n    var2 = var2[:]\n    var3 = 0\n    while var1 and var2:\n        #naomi plays her smallest\n        var6 = var1.pop(0)\n        if var6 > var2[-1]:\n            #if var2 cannot beat, he plays his smallest\n            var2.pop(0)\n            var3 += 1\n        else:\n            #if he can beat, he finds the smallest above var6\n            for var5 in range(len(var2)):\n                if var2[var5] > var6:\n                    #since var2[-1] > var6, we'll get here\n                    var2.pop(var5)\n                    break          \n    return var3\n \n#clk = clock()\n \nfor var7 in xrange(1, int(input())+1):\n    #print(>>sys.stderr, var7)\n    var8 = input()\n    var1 = sorted(map(float, input().split()))\n    var2 = sorted(map(float, input().split()))\n    print('Case #%d:' % var7, deceitfulWar(var1, var2), war(var1, var2))\n     \n#print(>>sys.stderr, 'time= %.1f seconds' % (clock()-clk ))\n \n \n"}
{"author": "enterr", "index": 13, "filename": "2012_1460488_1483488.py", "code": "#\n# Google Code Jam 2012\n# Round 0: C. Recycled Numbers\n# submission by EnTerr\n#\n \n'''\nLimits: 1 <= T <= 50. var1 and var2 have the same number of digits.\nSmall dataset: 1 <= var1 <= var2 <= 1000.\nLarge dataset: 1 <= var1 <= var2 <= 2000000\n \nInput \n4\n1 9\n10 40\n100 500\n1111 2222\n  \t\nOutput \nCase #1: 0\nCase #2: 3\nCase #3: 156\nCase #4: 287\n \n'''\n \nimport psyco\npsyco.full()\n \nimport sys\nfrom time import clock\n \nvar0 = open(sys.argv[1])\ndef input(): return var0.readline().strip()\n \ndef numRecycled(var1,var2):\n    var3 = len(str(var1))\n    var4 = 10**(var3-1)\n    var5 = 0\n    for var6 in range(var1,var2+1):\n        var7 = set()\n        var8 = var6\n        for var9 in range(var3-1):\n            var10,var11 = divmod(var8, 10)\n            var8 = var4*var11 + var10\n            if var6 < var8 <= var2:\n                var7.add(var8)\n        var5 += len(var7)\n    return var5\n \nfor var12 in range(1, int(input())+1):\n    #print(>>sys.stderr, var12)\n    #tm = clock()\n    print('Case #%d:' % var12,)\n    var1,var2 = map(int, input().split())\n    print(numRecycled(var1,var2))\n    #print(var1, var2, clock() - tm)\n \n"}
{"author": "fractal", "index": 14, "filename": "2014_2974486_5644738749267968.py", "code": "#! /usr/bin/python3\n \nvar0 = int(input())\n \nfor var1 in range(1, var0+1):\n    var2 = int(input())\n    var3 = [ int(float(var4)*(10**5)) for var4 in input().split() ]\n    var5 = [ int(float(var4)*(10**5)) for var4 in input().split() ]\n \n    var3.sort()\n    var5.sort()\n    var6 = var2\n    var7 = 0\n    var8 = 0\n    var9 = 0\n    while var8<var2 and var9<var2:\n        if var5[var8] > var3[var9]:\n            var6 -= 1\n        else:\n            var8 += 1\n        var9 += 1\n    var8 = 0\n    var9 = 0\n    while var8<var2 and var9<var2:\n        if var5[var8] < var3[var9]:\n            var7 += 1\n        else:\n            var9 += 1\n        var8 += 1\n \n    print(\"Case #%d: %d %d\" % (var1, var6, var7))\n         \n \n"}
{"author": "fractal", "index": 14, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nimport fileinput\n \ndef checkIndex(var0,var1,var2):\n\tvar3=int(str(var1)[var0:]+str(var1)[:var0])\n\tif var3 > var1 and var3 <= var2:\n\t\t#print(\"pair\",var1, var3)\n\t\treturn var3\n\telse: return False\n \n \nfor var4 in fileinput.input():\n\tif fileinput.isfirstline():\n\t\tvar5=int(var4) # no. of test cases\n\t\tcontinue\n\tvar6=var4.split()\n\tvar7=len(var6[0])\n\tvar8=int(var6[0])\n\tvar2=int(var6[1])\n\tvar9=0\n\tfor var1 in xrange(var8, var2+1):\n\t\tvar10=set()\n\t\tfor var11 in range(var7):\n\t\t\tvar3=checkIndex(var11,var1, var2)\n\t\t\tif var3:\n\t\t\t\tvar10.add(var3)\n\t\tvar9 +=len(var10)\n \t\t\t\t\n\tprint(\"Case #%(k)var11: %(var9)var11\" % {\"k\":fileinput.lineno()-1,\"var9\":var9})\n \t"}
{"author": "pawko", "index": 15, "filename": "2014_2974486_5644738749267968.py", "code": "# python 3\nimport string\nimport itertools\nimport sys\n \ndef war_points(var0, var1, var2):\n    var3=0\n    var4 = 0\n    for var5 in range(var0):\n        while var3 < var0 and var1[var5] > var2[var3]:\n            var3 += 1\n        if var3 < var0:\n            var3 += 1\n        else:\n            var4 += 1\n    return var4\n     \ndef deceitful_war_points(var0, var1, var2):\n    var3=0\n    var4 = 0\n    for var5 in range(var0):\n        while var3 < var0 and var2[var5] > var1[var3]:\n            var3 += 1\n        if var3 < var0:\n            var4 += 1\n            var3 += 1\n    return var4\n \ndef process_case(var0, var1, var2):\n    var6 = deceitful_war_points(var0, var1, var2)\n    var7 = war_points(var0, var1, var2)\n    return (var6, var7)\n \ndef result_gen(var8):\n    var9 = int(next(var8))\n    for var10 in range(1,var9+1):\n        var0 = int(next(var8))\n        var1 = line_of_floats_sorted(next(var8))\n        var2 = line_of_floats_sorted(next(var8))\n        var6, var7 = process_case(var0, var1, var2)\n        yield 'Case #{0}: {1} {2}\n'.format(var10, var6, var7)\n     \ndef line_of_floats_sorted(var11):\n    var12 = [float(var13) for var13 in var11.split()]\n    var12.sort()\n    return var12\n \ndef input_gen(var14):\n    for var15 in var14:\n        if var15.endswith('\n'):\n            var15 = var15[:-1]\n        yield var15\n \ndef start(var16):\n    var17 = var16 + '.in'\n    var18 = var16 + '.out'\n    var14 = open(var17, 'r')\n    var19 = open(var18, 'w')\n    var19.writelines(result_gen(input_gen(var14)))\n    var14.close()\n    var19.close()\n \n##start('D-test')\nstart('D-small-attempt0')\n##start('D-large')\n"}
{"author": "pawko", "index": 15, "filename": "2012_1460488_1483488.py", "code": "# python 3\nimport string\nimport itertools\nimport sys\n \ndef gen_rotations(var0):\n    var1 = [var2 for var2 in str(var0)]\n    for var3 in range(1, len(var1)):\n        if var1[var3] != '0':\n            var4 = 0\n            for var5 in var1[var3:]:\n                var4 = 10*var4 + ord(var5) - ord('0')\n            for var5 in var1[:var3]:\n                var4 = 10*var4 + ord(var5) - ord('0')\n            if var4 == var0:\n                return\n            yield var4\n     \ndef process_case(var6,var7):\n    var4 = 0\n    for var8 in range(var6,var7+1):\n        for var9 in gen_rotations(var8):\n            if (var8 < var9 <= var7):\n                var4 += 1\n    return var4\n \ndef result_gen(var10):\n    var11 = int(next(var10))\n    for var12 in range(1,var11+1):\n        var6,var7 = line_of_numbers(next(var10))\n        var4 = process_case(var6,var7)\n        yield 'Case #{0}: {1}\n'.format(var12, var4)\n     \ndef line_of_numbers(var13):\n    return [int(var14) for var14 in var13.split()]\n \ndef input_gen(var15):\n    for var16 in var15:\n        if var16.endswith('\n'):\n            var16 = var16[:-1]\n        yield var16\n \ndef start(var17):\n    var18 = var17 + '.in'\n    var19 = var17 + '.out'\n    var15 = open(var18, 'r')\n    var20 = open(var19, 'w')\n    var20.writelines(result_gen(input_gen(var15)))\n    var15.close()\n    var20.close()\n \n##start('C-test')\nstart('C-small-attempt0')\n##start('C-large')\n"}
{"author": "pavlovic", "index": 16, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef play_war(var0, var1):\n\tif 0 == len(var0):\n\t\treturn 0\n \t\t\n\tif var0[0] > var1[0]:\n\t\tvar0.pop(0)\n\t\tvar1.pop()\n\t\treturn 1 + play_war(var0, var1)\n\telse:\n\t\tvar0.pop(0)\n\t\tvar1.pop(0)\n\t\treturn play_war(var0, var1)\n \t\t\ndef play_deceitful_war(var0, var1):\n\tif 0 == len(var0):\n\t\treturn 0\n \t\t\n\tvar2 = len(var0) - 1\n\twhile (var2 >= 0) and (var0[var2] < var1[len(var1) - 1]):\n\t\tvar2 -= 1\n \t\t\n\tif var2 < 0:\n\t\treturn 0\n \t\n \t\n\tvar0.pop(var2)\n\tvar1.pop()\n \n\treturn 1 + play_deceitful_war(var0, var1)\n \n \nvar3 = int(sys.stdin.readline().strip())\n \nfor var2 in range(var3):\n\tprint(\"Case #\" + str(var2 + 1) + \":\",)\n \n\tvar4 = int(sys.stdin.readline().strip())\n \t\n\tvar5 = sorted([float(var6) for var6 in sys.stdin.readline().strip().split()], reverse = True)\n\tvar7 = sorted([float(var6) for var6 in sys.stdin.readline().strip().split()], reverse = True)\n \n\tprint(play_deceitful_war(list(var5), list(var7)), play_war(var5, var7))\n \t\n"}
{"author": "pavlovic", "index": 16, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nvar0 = int(sys.stdin.readline())\nfor var1 in range(var0):\n\tvar2 = sys.stdin.readline().strip()\n\tvar3 = var2.split()\n \n\tvar4 = int(var3[0])\n\tvar5 = int(var3[1])\n \n\tvar6 = var4\n\tvar7 = 0\n\twhile var6 > 0:\n\t\tvar6 /= 10\n\t\tvar7 += 1\n \n\tvar8 = 0\n \n\tvar9 = {}\n \n\tfor var10 in range(1, var7 / 2 + 1):\n\t\tvar11 = var7 - var10\n \n\t\tfor var12 in range(var4 / (10 ** var11), var5 / (10 ** var11) + 1):\n\t\t\tfor var13 in range(var4 / (10 ** var10), var5 / (10 ** var10) + 1):\n \n\t\t\t\tvar14 = var12 * 10 ** var11 + var13\n\t\t\t\tvar15 = var13 * 10 ** var10 + var12\n \n\t\t\t\tif (var10 == var11) and (var12 >= var13):\n\t\t\t\t\tcontinue\n \n\t\t\t\tif (var14 != var15) and (var14 >=var4) and (var15 >= var4) and (var14 <= var5) and (var15 <= var5):\n \n\t\t\t\t\tif var16(var14, var15) not in var9:\n\t\t\t\t\t\tvar9[var16(var14, var15)] = set()\n \n\t\t\t\t\tif max(var14, var15) not in var9[var16(var14, var15)]:\n\t\t\t\t\t\tvar9[var16(var14, var15)].add(max(var14, var15))\n\t\t\t\t\t\tvar8 += 1\n \n\tprint(\"Case #%d: %d\" % (var1 + 1, var8)\t)\n \n"}
{"author": "bastiandantilus", "index": 17, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    var0 = sys.stdin\n    if len(sys.argv) >= 2:\n        var1 = sys.argv[1]\n        if var1 != '-':\n            var0 = open(var1)\n \n    var2 = int(var0.readline())\n    for var3 in range(var2):\n        var4 = int(var0.readline())\n        var5 = sorted([float(var6) for var6 in var0.readline().split()])\n        var7 = sorted([float(var6) for var6 in var0.readline().split()])\n        var8 = max(var5)\n        var9 = 0\n        var10 = 0\n        var11 = [var6 for var6 in var5]\n        var12 = [var6 for var6 in var7]\n        for var13 in range(var4):\n            if(var5[-1] > var7[-1]):\n                var9 += 1\n                var5.pop()\n                var7.pop()\n            else:\n                var5.pop(0)\n                var7.pop()\n        for var13 in range(var4):\n            var14 = var11.pop(0)\n            var15 = [var6 for var6 in var12 if var6 > var14]\n            if len(var15) > 0:\n                var12.remove(var15[0])\n            else:\n                var12.pop(0)\n                var10 += 1\n        print((\"Case #\" + str(var3+1) + \": \" + str(var9) + \" \" + str(var10)))\n     \n \n"}
{"author": "bastiandantilus", "index": 17, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef digits(var0, var1 = 10):\n    while var0:\n        yield var0 % var1\n        var0 //= var1\n \nif __name__ == \"__main__\":\n    var2 = sys.stdin\n    if len(sys.argv) >= 2:\n        var3 = sys.argv[1]\n        if var3 != '-':\n            var2 = open(var3)\n \n    var4 = int(var2.readline())    \n    for var5 in range(var4):\n        var6 = var2.readline()\n        var6 = var6.split()\n        var7 = int(var6[0])\n        var8 = int(var6[1])\n        var9 = 0\n        #print (var7, var8, [x for x in range(var7, var8)][-1])\n        for var10 in range(var7, var8):\n            #print (var7, var8, [x for x in range(var10+1, var8+1)][-1])\n            for var11 in range(var10+1, var8+1):\n                var12 = [var13 for var13 in digits(var10)]\n                var14 = [var13 for var13 in digits(var11)]\n                if  sorted(var12) == sorted(var14):\n                    var15 = [var14[var16:] + var14[:var16] for var16 in range(len(var12))]\n                    if var12 in var15:\n                        var9 +=1\n                    #print(var15)\n        print (\"Case #\" + str(var5+1) + \": \" + str(var9))\n     \n \n"}
{"author": "nooodles", "index": 18, "filename": "2014_2974486_5644738749267968.py", "code": "def PlayDevious(var0, var1):\n    var2 = 0;\n    var3 = 0;\n    var4 = 0;\n    while (var3 < len(var0)):\n        if var0[var3] > var1[var4]:\n            var4 += 1;\n        var3 += 1;\n    return var4;\n \ndef PlayWar(var0, var1):\n    var4 = 0;      var5 = 0;\n    for var6 in var0:\n        var7 = False;\n        while (not var7):\n            if var4 != len(var1):\n                if var1[var4] > var6:\n                    var7 = True;\n                var4 += 1;\n            else:\n                var5 += 1;\n                var7 = True;\n \n    return var5;\n \ndef PlayWar2(var0, var1):\n    var8 = [];        var9 = [];        var5 = 0;\n \n    for var3 in range(len(var0)):\n        var8.append(var0[var3]);        var9.append(var1[var3]);\n    var8.reverse();\n \n    var5 = 0;\n    for var10 in var8:\n        var11 =  0;\n        for var3 in range(1, len(var9)):\n            if var9[var3] > var10 > var9[var3-1]:\n                var11 = var3;\n \n        if var10 > var9[var11]:\n            var5 += 1;\n        var9.pop(var11);\n    return var5           \n \n \nvar12 = int(raw_input());\nfor var13 in range(var12):\n    var14 = int(raw_input());\n    var15 = map(float, raw_input().split());\n    var16 = map(float, raw_input().split());\n \n    var15.sort();\n    var16.sort();\n     \n    print (\"Case #%d:\" % (var13+1),)\n    print (PlayDevious(var15, var16), PlayWar(var15, var16))#, PlayWar2(var15, var16);\n"}
{"author": "nooodles", "index": 18, "filename": "2012_1460488_1483488.py", "code": "var0 = int(raw_input());\nfor var1 in range(var0):\n    [var2,var3] = map(int, raw_input().split());\n \n    var4 = 10**(len(str(var2))-1);\n    var5 = 0;\n \n    for var6 in range(var2,var3+1):\n        var7 = (var6/10)+var4*(var6%10);\n        while (var7 != var6):\n            if var6 < var7 <= var3:\n                var5 += 1;\n            var7 = (var7/10)+var4*(var7%10);\n \n    print (\"Case #%d:\" % (var1+1),);\n    print (var5);\n    \n \n"}
{"author": "netsuso", "index": 19, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python3\n# Strategies:\n# 0. Sort both lists of block weights\n# Deceitful War:\n# 1. Walk through her own blocks from the lightest to the heaviest one\n# 2. If the block is lighter than the lightest one from Ken, Naomi will tell a weight slightly lower than Ken's biggest one. So Ken wins, but he loses his heaviest block\n# 3. If the block is heavier than the lightest one from Ken, Naomi will tell a weight slightly higher than Ken's heaviest block. So Naomi wins, and Ken loses his lightest block\n# Standard War:\n# 1. Walk through her own blocks from the heaviest to the lightest one (there's no difference in the order for the result, but this way it's easier to compare)\n# 2. If the block is heavier than the heaviest one from Ken, Naomi wins, and Ken loses his lightest block\n# 3. If the block is lighter than the heaviest one from Ken, Ken wins, and Ken loses his heaviest block\n \nimport sys\n \nvar0 = int(sys.stdin.readline().strip())\n \nfor var1 in range(1, var0+1):\n    var2 = int(sys.stdin.readline().strip())\n    var3 = [float(var4) for var4 in sys.stdin.readline().strip().split()]\n    var5 = [float(var4) for var4 in sys.stdin.readline().strip().split()]\n \n    var3.sort()\n    var5.sort()\n \n    # Deceitful War\n    var6 = 0\n    var7 = var2-1\n    var8 = 0\n \n    for var9 in range(0, var2):\n        if var3[var9] > var5[var6]:\n            var8 += 1\n            var6 += 1\n        else:\n            var7 -= 1\n \n    # Standard War\n    var6 = 0\n    var7 = var2-1\n    var10 = 0\n \n    for var9 in range(var2-1, -1, -1):\n        if var3[var9] > var5[var7]:\n            var10 += 1\n            var6 += 1\n        else:\n            var7 -= 1\n \n    print(\"Case #{0}: {1} {2}\".format(var1, var8, var10))\n"}
{"author": "netsuso", "index": 19, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python3\n \nimport sys\n \ndef findrecycled(var0, var1, var2):\n\tvar3 = str(var0)\n\tvar4 = {}\n\tfor var5 in range(1, len(var3)):\n\t\tvar6 = var3[var5:] + var3[0:var5]\n\t\tvar7 = int(var6)\n\t\tif var7 > var0 and var7 >= var1 and var7 <= var2:\n\t\t\tvar4[\"%d_%d\" % (var0, var7)] = 1\n\treturn len(var4)\n \n# Ignore the number of cases\nsys.stdin.readline()\n \nvar8 = 0\nfor var9 in sys.stdin:\n\tvar8 += 1\n \n\tvar10 = var9.strip().split(' ')\n\tvar1 = int(var10[0])\n\tvar2 = int(var10[1])\n \n\tvar11 = 0\n\tfor var0 in range(var1, var2):\n\t\tvar11 += findrecycled(var0, var1, var2)\n \n\tprint(\"Case #%d: %d\" % (var8, var11))\n"}
{"author": "nwin", "index": 20, "filename": "2014_2974486_5644738749267968.py", "code": "from collections import deque\nfrom bisect import *\ndef solve():\n    var0 = int(raw_input())\n    var1 = map(float, raw_input().split())\n    var2 = map(float, raw_input().split())\n    var1.sort()\n    var2.sort()\n    var3 = deque(var1)\n    var4 = deque(var2)\n    var5 = 0\n    while var3:\n        if var3[0] < var4[0]:\n            var3.popleft()\n            var4.pop()\n        else:\n            var3.popleft()\n            var4.popleft()\n            var5 += 1\n    print(var5,)\n    var5 = 0\n    for var6, var7 in enumerate(var1):\n        var8 = bisect(var2, var7)\n        var5 = max(var5, var8 - var6)\n    print(var5)\nfor var9 in xrange(int(raw_input())):\n    print(\"Case #%d:\" % (var9+1),)\n    solve()\n"}
{"author": "nwin", "index": 20, "filename": "2012_1460488_1483488.py", "code": "def solve(var0, var1):\n    var2 = len(str(var0))\n    var3 = 10 ** var2\n    var4 = 0\n    for var5 in xrange(var0, var1):\n        var6 = var5\n        var7 = set([var6])\n        for var8 in xrange(var2-1):\n            var6 = var6 * 10\n            var6 += var6 / var3\n            var6 %= var3\n            if var0 <= var5 < var6 <= var1 and var6 not in var7:\n                var4 += 1\n                var7.add(var6)\n    return var4\n \nvar9 = int(raw_input())\nfor var10 in xrange(var9):\n    var0, var1 = map(int, raw_input().split())\n    print(\"Case #%d: %d\" % (var10 + 1, solve(var0, var1)))\n"}
{"author": "joegunrok", "index": 21, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = 'jrokicki'\n \nimport sys\nvar1 = lambda: sys.stdin.readline().strip()\nvar2 = lambda: map(int, var1().split(\" \"))\nvar3 = lambda: map(long, var1().split(\" \"))\nvar4 = lambda: map(float, var1().split(\" \"))\n \nvar5 = int(sys.stdin.readline())\n \ndef war(var6,var7):\n    \"\"\"\n    strategy: var6 plays lowest number first, var7 chooses next best number\n    \"\"\"\n    if len(var6) == 0: return 0\n    var8 = var6[0]\n    if var7[-1] > var8:\n        # ken wins\n        var9 = len(var7)-1\n        for var9 in range(len(var7)-1):\n            if var7[var9] > var8 and var7[var9+1] > var8:\n                break\n        if var7[var9] < var8: var9 += 1\n        var7 = var7[:var9] + var7[var9+1:]\n        return war(var6[1:],var7)\n    else:\n        ## var6 wins they both play their lowest numbers\n        return 1 + war(var6[1:], var7[1:])\n \ndef beawoman(var6,var7):\n    if len(var6) == 0: return 0\n    var8 = var6[0]\n    var10 = False\n    for var11 in range(len(var6)):\n        if var6[var11] < var7[var11]:\n            var10 = True\n    if var10:\n        return beawoman(var6[1:], var7[:-1])\n    else:\n        return 1 + beawoman(var6[:-1], var7[:-1])\n \nfor var12 in range(var5):\n    var1()\n    var6 = var4()\n    var7 = var4()\n    var6.sort()\n    var7.sort()\n    var13 = \"%d %d\" % (beawoman(var6,var7), war(var6,var7))\n    print(\"Case #%d: %s\" % (var12+1, var13))\n \n"}
{"author": "joegunrok", "index": 21, "filename": "2012_1460488_1483488.py", "code": "       \n\"\"\"\nGCJ var15 (gcj.fw.var15)\n- Command Line and Package interface\n- output redirection\n- parsing var14 input\n- executing problem code against var16\n- testing var15\n\"\"\"\nimport var10\nimport unittest\nimport StringIO\n \nclass Framework(object):\n    class Case(object):\n        def __init__(var0, var1, var2=None):\n            var0.var3 = var1\n            var0.var4 = var2\n            var0.var5 = None\n     \n        @classmethod\n        def parser(var6, var7):\n            pass\n     \n        def run(var0):\n            pass\n     \n        def execute(var0, var7=None):\n            if var0.var4 is None:\n                var0.var4 = var0.parser(var7)\n            var0.var5 = var0.run(**var0.var4)\n     \n        def __str__(var0):\n            return \"Case #%d: %s\" % (var0.var3, var0.var5)\n     \n     \n    class Result(object):\n        def __init__(var0, var8):\n            var0.var4 = var8\n     \n        def __str__(var0):\n            return str(var0.ata)\n \n    def __init__(var0, var7, var9):\n        var10.var11 = var9\n        var0.var7 = var7 if var7 is not None else var10.stdin\n \n    def run(var0):\n        var12 = int(var0.var7.readline().strip())\n        for var13 in xrange(var12):\n            var14 = type(var0).Case(var13+1)\n            var14.execute( var7=var0.var7)\n            print(var14)\n \n \n    @classmethod\n    def __main__(var6):\n        var7 = var10.stdin\n        if len(var10.argv) > 1:\n            if var10.argv[1] == \"-t\":\n                unittest.main()\n                var10.exit()\n            var7 = open(var10.argv[1])\n        var15 = var6(var7, var10.var11)\n        var15.run()\n     \nclass Test(unittest.TestCase):\n    var16 = []\n    var14 = None\n    var17=[]\n     \n    def setUp(var0):\n        var0.var17 = []\n        var0.defineCases()\n        var18 = 1\n        var0.var16 = []\n        for var17 in var0.var17:\n            var14 = var0.var14(var18)\n            var14.var4 = var14.parser(StringIO.StringIO(var17[0]))\n            var0.var16.append( [var14, var17[1]])\n     \n    def defineCases(var0):\n        pass\n     \n    def tearDown(var0):\n        pass \n \n    def test_Name(var0):\n        var0.setUp()\n        for var14 in var0.var16:\n            print(var14[0].var4, var14[1])\n            var14[0].execute()\n            var0.assertEqual(var14[0].var5, var14[1])\n'''\nCreated on Apr 8, 2012\n \n@author: Joe\n'''\n \nfrom math import log\nclass C(Framework):\n    class Case(Framework.Case):\n        def parser(var0, var19):\n            var20 = map(int, var19.readline().strip().split(\" \"))\n            var21,var22 = var20[:2]\n            return {\"var21\":var21,\"var22\":var22}\n         \n        def run(var0,var21=None,var22=None):\n            var23 = 0\n            var24 = set()\n            for var25 in range(var21,var22+1):\n                if var25 in var24: continue\n                var26 = int(log(var25,10))\n                var27 = set([var25])\n                var28 = var25\n                for var29 in range(var26):\n                    var28 = var28 / 10 + (var28%10)*10**(var26)\n                    if var28 <= var22 and var28>= var21:\n                        var27.add(var28)\n                        var24.add(var28)\n                var23 += len(var27)*(len(var27)-1)/2\n            return str(var23)\n             \nclass Test(Test):\n    def defineCases(var0):\n        var0.var14 = C.Case\n        var0.var17 = [\n                [\"1 9\", \"0\"],\n                [\"10 40\", \"3\",                   ],\n                [\"10 99\", \"36\"],\n                [\"100 500\", \"156\"],\n                [\"1111 2222\", \"287\"],\n                [\"1000000 2000000\", \"2000000\"]\n                ]\n \nif __name__ == \"__main__\":\n    C.__main__()\n     \n"}
{"author": "idahojacket", "index": 22, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nfrom bisect import bisect_left\n \nvar0 = input()\nfor var1 in range( 1, var0 + 1 ):\n    var2 = input()\nvar3 = list( [float(var4) for var4 in raw_input().split() ] )\nvar5 = list( [float(var4) for var4 in raw_input().split() ] )\nvar3 = sorted( var3 )\nvar5 = sorted( var5 )\n \n# sim optimal\nvar6 = var3[:]\nvar7 = var5[:]\n \nvar8 = 0\nfor var9 in xrange( 0, var2 ):\n    var10 = var6.pop()\n    var4 = bisect_left( var7, var10 )\n    if var4 < len( var7 ):\n        var8 += 1\n        del var7[ var4 ]\n    else:\n        del var7[ 0 ]\n \nvar11 = 0\nfor var9 in xrange( 0, var2 ):\n    var10 = var3[0]\n    del var3[0]\n    var4 = bisect_left( var5, var10 )\n    if var4 == 0:\n        var5.pop()\n    else:\n        var11 += 1\n        del var5[ 0 ]\n \n    var12 = str( var11 ) + ' ' + str( var2 - var8 )\n   \nprint ('Case #' + str( var1 ) + ': ' + str( var12 ))\n"}
{"author": "idahojacket", "index": 22, "filename": "2012_1460488_1483488.py", "code": "import time\n \ndef get_num_recycled( var0, var1 ):\n    var2 = len(var0)\n    var3 = var0 + var0\n    var4 = int(var0)\n    var5 = []\n    for var6 in range( 1, var2 ):\n        var7 = var3[var6:var2+var6]\n        var8 = int(var7)\n        if ( var8 > var4 and var8 <= var1 ):\n            var5.append( var8 )\n    \n    return len(set(var5))\n \n \nvar9 = input()\nfor var6 in range( 1, var9 + 1 ):\n    var10, var1 = raw_input().split()\nvar11 = 0\n#start_t = time.clock()\nfor var4 in range( int(var10), int(var1) + 1 ):\n    var11 += get_num_recycled( str(var4), int(var1) )\n#end_t = time.clock()\n#print start_t, end_t, end_t - start_t\nprint ('Case #' + str(var6) + ': ' + str( var11 ))\n"}
{"author": "idolivneh", "index": 23, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nimport time\nimport itertools #use combinations!\nimport random\n \ndef iterate_cases_1lpc(var0):\t#1lpc = 1 var2 per var5\n\twith file(var0, 'rb') as f_in:\n\t\tfor var1, var2 in enumerate(f_in):\n\t\t\tif var1 == 0: #T\n\t\t\t\tcontinue\n\t\t\tyield var1, var2.strip().split(' ')\n \ndef iterate_cases_nlpc(var0, var3):\t#1lpc = var3 var2 per var5\n\twith file(var0, 'rb') as f_in:\n\t\tvar4 = 1\n\t\tvar5 = []\n\t\tfor var1, var2 in enumerate(f_in):\n\t\t\tif var1 == 0: #T\n\t\t\t\tcontinue\n\t\t\tvar5.append(var2.strip().split(' '))\n\t\t\tif not var1 % var3:\n\t\t\t\tyield var4, var5\n\t\t\t\tvar4 += 1\n\t\t\t\tvar5 = []\n \ndef iterate_cases_glpc(var0):\t\t#glpc - given lines per var5\n\twith file(var0, 'rb') as f_in:\n\t\tvar4 = 0\n\t\tvar6 = True\n\t\tfor var1, var2 in enumerate(f_in):\n\t\t\tif var1 == 0: #T\n\t\t\t\tcontinue\n\t\t\tif var6:\n\t\t\t\tvar6 = False\n\t\t\t\tvar4 += 1\n\t\t\t\tvar5 = []\n\t\t\t\tassert len(var2.strip().split(' ')) == 1\n\t\t\t\tvar7 = int(var2.strip())\n\t\t\t\tif not var7:\n\t\t\t\t\tvar6 = True\n\t\t\t\t\tyield var4, var5\n\t\t\t\tcontinue\n\t\t\tif var7:\n\t\t\t\tvar7 -= 1\n\t\t\t\tvar5.append(var2.strip().split(' '))\n\t\t\tif not var7:\n\t\t\t\tvar6 = True\n\t\t\t\tyield var4, var5\n \t\t\t\ndef part_of_list_to_int(var8, var9):\n\tassert len(var8) == len(var9)\n\tvar10 = []\n\tfor var11, var12 in enumerate(var8):\n\t\tif var9[var11]:\n\t\t\tvar10.append(int(var12))\n\t\telse:\n\t\t\tvar10.append(var12)\n\treturn var10\n \ndef list_to_int(var8):\n\treturn part_of_list_to_int(var8, [True] * len(var8))\n \ndef part_of_list_to_float(var8, var9):\n\tassert len(var8) == len(var9)\n\tvar10 = []\n\tfor var11, var12 in enumerate(var8):\n\t\tif var9[var11]:\n\t\t\tvar10.append(float(var12))\n\t\telse:\n\t\t\tvar10.append(var12)\n\treturn var10\n \ndef list_to_float(var8):\n\treturn part_of_list_to_float(var8, [True] * len(var8))\n \ndef get_max_array_on_index(var8, var11):\n\tvar13 = len(var8[0])\n\tassert var11 < var13\n\tfor var12 in var8:\n\t\tassert var13 == len(var12)\n\tvar14 = var8[0][var11]\n\tvar15 = var8[0]\n\tfor var12 in var8:\n\t\tif var12[var11] > var14:\n\t\t\tvar14 = var12[var11]\n\t\t\tvar15 = var12\n\treturn var15\n \ndef list_index_in_sorted_with_position(var16, var17, var18):\n\tvar19 = len(var16)\n\tif var19 == 1:\n\t\tif var16[0] == var17:\n\t\t\treturn var18\n\t\treturn -1\n\tif var16[var19/2] > var17:\n\t\treturn list_index_in_sorted_with_position(var16[:(var19/2)], var17, var18)\n\telse:\n\t\treturn list_index_in_sorted_with_position(var16[(var19/2):], var17, var18 + (var19/2))\n \t\ndef list_index_in_sorted_list(var16, var17):\n\treturn list_index_in_sorted_with_position(var16, var17, 0)\n \ndef copy_list(var20):\n\tvar21 = []\n\tfor var12 in var20:\n\t\tvar21.append(var12)\n\treturn var21\t\n \n############################################################\n#### add solution here \t\t\t\t\t\t\t\t\t####\n#### don't forget to change data from str to int/float  ####\n############################################################\n \ndef war_answer_simulator(var22, var23):\n\tvar24 = []\n\tfor var12 in var22:\n\t\tif var12 > var23:\n\t\t\tvar24.append(var12)\n\tif not var24:\n\t\treturn min(var22)\n\treturn min(var24)\n \ndef war_counter(var25, var26):\n\tvar27 = 0\n\twhile len(var25) and len(var26):\n\t\tif var25[0] > var26[0]:\n\t\t\tvar27 += 1\n\t\telse:\n\t\t\tvar26.pop(0)\n\t\tvar25.pop(0)\n\treturn var27\n \ndef dec_counter(var25, var26):\n\tvar27 = 0\n\twhile len(var25) and len(var26):\n\t\tif var25[0] < var26[0]:\n\t\t\tpass\n\t\telse:\n\t\t\tvar26.pop(0)\n\t\t\tvar27 += 1\n\t\tvar25.pop(0)\n\treturn var27\t\n \t\ndef solve(var28, var29, var30):\n\tvar21 = None\n \t\n\tvar29.sort()\n\tvar30.sort()\n\tvar31 = copy_list(var29)\n\tvar32 = copy_list(var30)\n \t\n\tvar31.reverse()\n\tvar32.reverse()\n \t\n\tvar33 = war_counter(var31, var32)\n\tprint('war', var33)\n \t\n\tvar34 = dec_counter(var29, var30)\n\tprint('dec', var34)\n \t\n\treturn '%d %d' % (var34, var33)\n \t\n \t\ndef calc_result(var5):\n\tvar35 = None\n \t\n\tvar28 = int(var5[0][0])\n\tvar29 = list_to_float(var5[1])\n\tvar30 = list_to_float(var5[2])\n\tprint(var28)\n\tprint(var29)\n\tprint(var30)\n \t\n\tvar35 = solve(var28, var29, var30)\n\tprint(var35)\n \t\n\treturn var35\n \ndef main(var0):\n\tvar36 = time.time()\n\twith file('var10.txt', 'wb') as f_out:\n \t\t\n\t\t######################################\n\t\t#### select input iteration type: ####\n\t\t####\t- iterate_cases_1lpc\t  ####\n\t\t####\t- iterate_cases_nlpc +var3\t  ####\n\t\t####\t- iterate_cases_glpc\t  ####\n\t\t######################################\n\t\tfor var37, var5 in iterate_cases_nlpc(var0, 3):\n \t\t\t\n\t\t\tprint(\"var5 #%d: time:%.02f\" % (var37, time.time() - var36))\n\t\t\tvar35 = calc_result(var5)\n \t\t\t\n\t\t\t#######################\n\t\t\t#### format var10 ####\n\t\t\t#######################\n\t\t\tf_out.write(\"Case #%d: %s\n\" % (var37, var35))\n \t\t\t\t\nif __name__ == '__main__':\n\tmain(sys.argv[1])\n"}
{"author": "idolivneh", "index": 23, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef cycle_shift(var0):\n\treturn \"%s%s\" % (var0[-1], var0[:-1])\n \ndef get_cyclic_shifts(var1):\n\tvar2 = []\n\tvar3 = str(var1)\n\tfor var4 in xrange(len(var3) - 1):\n\t\tvar3 = cycle_shift(var3)\n\t\tif var3[0] == '0':\n\t\t\tcontinue\n\t\tvar5 = int(var3)\n\t\tif not var5 in var2:\n\t\t\tvar2.append(var5)\n\treturn var2\n \t\ndef get_rec_pairs(var6, var7):\n\tvar8 = []\n\tfor var9 in xrange(var6, var7 + 1):\n\t\tvar10 = get_cyclic_shifts(var9)\n\t\tfor var11 in var10:\n\t\t\tif (var11 > var9 and\n\t\t\t\tvar11 <= var7):\n\t\t\t\tvar8.append((var9, var11))\n\treturn var8\n \t\ndef main(filepath):\n\twith file('numbers_output.txt', 'wb') as f_out:\n\t\twith file(filepath, 'rb') as f_in:\n\t\t\tfor var12, var13 in enumerate(f_in):\n\t\t\t\tif var12 == 0: #T\n\t\t\t\t\tcontinue\n\t\t\t\tinput_list = var13.strip().split(' ')\n\t\t\t\tvar6 = int(input_list[0])\n\t\t\t\tvar7 = int(input_list[1])\n \t\t\t\t\n\t\t\t\tvar8 = get_rec_pairs(var6, var7)\n\t\t\t\tvar14 = len(var8)\n \t\t\t\t\t\t\t\n\t\t\t\tprint\n\t\t\t\tprint (var13.strip())\n\t\t\t\tprint (var14)\n \t\t\t\t\n\t\t\t\tf_out.write(\"Case #%d: %d\n\" % (var12, var14))\n \t\t\t\t\nif __name__ == '__main__':\n\tmain(sys.argv[1])"}
{"author": "greatlemer", "index": 24, "filename": "2014_2974486_5644738749267968.py", "code": "# Written for Python 2.7.5\n \nfrom optparse import OptionParser\nfrom StringIO import StringIO\nimport sys\n \n# Expected format of var0 is a list of tuples of (input, var21)\nvar0 = [\n    (\"\"\"4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n\"\"\",\"\"\"Case #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n\"\"\")\n]\n \ndef parse_input(var1):\n    var2 = int(var1.readline())\n    var3 = 0\n    while var2 > var3:\n        var3 += 1\n        var4 = int(var1.readline())\n        var5 = [float(var6) for var6 in var1.readline().split(\" \")]\n        var7 = [float(var6) for var6 in var1.readline().split(\" \")]\n        var8 = {\"var12\":var3,\n                        \"var11\": var5,\n                        \"var10\": var7,\n                        \"var4\": var4\n                        }\n        yield var8\n \n \ndef solve_problem(var9=sys.stdout, **kwargs):\n    var10 = sorted(kwargs[\"var10\"])\n    var11 = sorted(kwargs[\"var11\"])\n    var12 = kwargs[\"var12\"]\n    var4 = kwargs[\"var4\"]\n \n    var13 = 0\n    var14 = 0\n \n    var15 = 0\n    var16 = 0\n \n    for var17 in var11:\n        if var17 > var10[var13]:\n            var16 += 1\n            var13 += 1\n    var11 = sorted(var11, key=lambda var6: -var6)\n    var10 = sorted(var10, key=lambda var6: -var6)\n    for var17 in var11:\n        if var17 > var10[var14]:\n            var15 += 1\n        else:\n            var14 += 1\n \n    print >> var9, \"Case #%d: %d %d\" % (var12, var16, var15)\n \n     \n    # Implementation of code to solve the problem.\n    # Use 'print >> var9, \"Thing\"' to output values.\n \ndef solve_inputs(var1, var9):\n    \"\"\"\n    Loop through each problem input in input reader and solve it.\n \n    Outputs responses to var9.\n    \"\"\"\n    for var8 in parse_input(var1):\n        solve_problem(var9=var9, **var8)\n \ndef run_tests():\n    var18 = 0\n    var19 = True\n    for var20, var21 in var0:\n        var18 += 1\n        var1 = StringIO(var20)\n        var9 = StringIO()\n        solve_inputs(var1, var9)\n        var22 = var9.getvalue()\n        if var22 == var21:\n            print (\"Test %d: Success\" % var18)\n        else:\n            var19 = False\n            print (\"Test %d: Failure\" % var18)\n        var1.close()\n        var9.close()\n    if var19:\n        print (\"All tests were successful!\")\n    else:\n        print (\"Something didn't match - try again.\")\n \ndef main():\n    var23 = OptionParser()\n    var23.add_option(\"-f\", \"--file\",\n                    dest=\"filename_stem\",\n                    help=\"read input from FILE.in and write to FILE.out\",\n                    metavar=\"FILE\")\n \n    (var24, var25) = var23.parse_args()\n    if var24.filename_stem:\n        print (\"Running in file mode.\")\n        var1 = open(\"%s.in\" % var24.filename_stem, \"r\")\n        var9 = open(\"%s.out\" % var24.filename_stem, \"w\")\n        solve_inputs(var1, var9)\n    else:\n        print (\"Running in test mode.\")\n        run_tests()\n \nif __name__ == \"__main__\":\n    main()"}
{"author": "greatlemer", "index": 24, "filename": "2012_1460488_1483488.py", "code": "from optparse import OptionParser\nimport math\n \n# The largest var7 B can be\nvar0 = 2000000\n \n# var1 will store the var7 of recycled pairs that can exist for a\n# list of cycles of length n (these are the triangular numbers).\n# Calculate this now so that we don't waste time with it later on.\nvar1 = { 1: 0 }\nvar2 = 1\nwhile var2 < math.log10(var0):\n    var2 += 1\n    var1[var2] = var2 * (var2 - 1) / 2\n \ndef solve(var3, var4):\n    # Store the result\n    var5 = 0\n    # The numbers we need to check.  We'll remove numbers from this once we've\n    # used them in a cycle so that we don't attempt to reprocess them.\n    var6 = range(var3, var4 + 1)\n    # Keep looping untli we've gone through all the numbers.\n    while var6:\n        # Remove the first var7\n        var7 = var6[0]\n        var6.remove(var7)\n        # Add this to the list of numbers in a potential cycle.\n        var8 = [var7,]\n        # Using strings for this feels icky but the modulo arithmetic seems\n        # equally icky :-(\n        # Double up the var7 in a string and we'll use slices to get the\n        # cycles.\n        var9 = \"%s%s\" % (var7, var7)\n        var10 = len(var9) / 2\n        var11, var12 = 0, var10\n        while var11 < var10:\n            var11 += 1\n            var12 += 1\n            var13 = int(var9[var11:var12])\n            if var13 == var7:\n                # If we're repeating then there's no need to take more slices\n                var11 = var10\n            elif var13 > var7 and var13 <= var4:\n                # We should already have dealt with numbers lower than this,\n                # and we don't want anything above the var4. Anything else\n                # add to the cycle var17 and remove from the list of numbers\n                # to check.\n                var8.append(var13)\n                var6.remove(var13)\n        var5 += var1[len(var8)]\n    return var5\n \ndef parse_case(var14):\n    var15 = var14.split()\n    var3 = int(var15[0])\n    var4 = int(var15[1])\n    return (var3, var4, )\n \ndef main():\n    var16 = OptionParser()\n    var16.add_option(\"-f\", \"--file\", dest=\"filename\",\n                    help=\"read input from FILE\", metavar=\"FILE\")\n \n    (var17, var18) = var16.parse_args()\n    if not var17.filename:\n        var16.error(\"Must provide a filename.\")\n    var19 = open(var17.filename, \"r\")\n    var20 = int(var19.readline())\n    var21 = 0\n    while var21 < var20:\n    \tvar21 += 1\n    \tvar22 = parse_case(var19.readline())\n    \tprint(\"Case #%d: %s\" % (var21, solve(*var22)))\n \nif __name__ == \"__main__\":\n    main()"}
{"author": "fizu", "index": 25, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef readint():\n    return int(sys.stdin.readline())\n \ndef readfloatarray():\n    return map(float, sys.stdin.readline().strip().split())\n \ndef readintarray():\n    return map(int, sys.stdin.readline().strip().split())\n \ndef readpairs(var0=0):\n    var1 = readintarray()[var0:]\n    return [var1[var2:var2+2] for var2 in xrange(0, len(var1), 2)]\n \ndef readstring():\n    return sys.stdin.readline()[:-1]\n \n"}
{"author": "fizu", "index": 25, "filename": "2012_1460488_1483488.py", "code": "from codejam import *\n \nfor var0 in xrange(readint()):\n    var1, var2 = readintarray()\n    var3 = 0\n    for var4 in xrange(var1, var2 + 1):\n        for var5 in xrange(var4 + 1, var2 + 1):\n            var6 = str(var4)\n            var7 = str(var5)\n            if len(var6) != len(var7):\n                continue\n \n            if var6 in (var7 + var7):\n                var3 += 1\n \n    print(\"Case #%d: %d\" % (var0 + 1, var3))\n"}
{"author": "anavaleije", "index": 26, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef pointsWar(var0, var1, var2):\n\tvar3 = 0\n\tvar4 = 0\n\tvar5 = 0\n\twhile var4 < var2 and var5 < var2:\n\t\tif var0[var4] > var1[var5]:\n\t\t\tvar3 += 1\n\t\telse:\n\t\t\tvar4 += 1\n\t\tvar5 += 1\n\treturn var3\n \ndef pointsDeceitfulWar(var0, var1, var2):\n\tvar3 = var2\n\tvar4 = 0\n\tvar5 = 0\n\twhile var4 < var2 and var5 < var2:\n\t\tif var0[var4] > var1[var5]:\n\t\t\tvar5 += 1\n\t\telse:\n\t\t\tvar3 -= 1\n\t\tvar4 += 1\n\treturn var3\n \n##########################################################\n# Main\n \nvar6 = sys.argv[1]\n \nvar7 = file(var6)\nvar8 = file(\"output.txt\", \"w\")\n \nvar9 = int(var7.readline())\n \nfor var10 in xrange(var9):\n\tvar2 = int(var7.readline().strip())\n\tvar0 = var7.readline().strip().split()\n\tvar1 = var7.readline().strip().split()\n \n\tfor var11 in xrange(var2):\n\t\tvar0[var11] = (float(var0[var11]),\"var2\")\n\t\tvar1[var11] = (float(var1[var11]),\"K\")\n \n\tvar0.sort()\n\tvar1.sort()\n \n\t##### Output writing\n\tvar8.write(\"Case #%d: %d %d\n\" %(var10 + 1, pointsDeceitfulWar(var0, var1, var2), pointsWar(var0, var1, var2)))\n"}
{"author": "anavaleije", "index": 26, "filename": "2012_1460488_1483488.py", "code": "def find_recycled(var0, var1):\n\tvar2 = str(var0)\n\tvar3 = []\n\tfor var4 in xrange(1, len(var2), 1):\n\t\tvar5 = var2[var4:len(var2)] + var2[0:var4]\n\t\tif var5[0] != \"0\":\n\t\t\tvar5 = eval(var5)\n\t\t\tif var5 <= var1 and var5 > var0 and (var0, var5) not in var3:\n\t\t\t\tvar3.append((var0,var5))\n\treturn len(var3)\n \nvar6 = file(\"input.in\")\nvar7 = eval(var6.readline())\nvar8 = file(\"output.txt\", \"w\")\n \nfor var4 in xrange(var7):\n\tvar9, var1 = var6.readline().strip().split()\n\tvar9 = eval(var9)\n\tvar1 = eval(var1)\n\tvar5 = 0\n\tvar3 = []\n\tfor var0 in xrange(var9, var1):\n\t\tif var0 > 11:\n\t\t\tvar5 += find_recycled(var0, var1)\n\tvar8.write(\"Case #%d: %d\n\" %(var4 + 1, var5))\n \t\t\t\n"}
{"author": "pyronimous", "index": 27, "filename": "2014_2974486_5644738749267968.py", "code": "\n \nvar0 = 'D-small-attempt3.in'\nvar1 = 'D-small-attempt3.var14'\n \n \ndef solve(var2, var3, var4):\n    var3.sort()\n    var4.sort()\n \n    def play_war(var3, var4):\n        var5 = 0\n        for var6 in range(var2):\n            var7 = var3.pop(0)\n            if var7 > var4[-1]:\n                var8 = var4.pop(0)\n            else:\n                for var9, var10 in enumerate(var4):\n                    if var10 > var7:\n                        var8 = var4.pop(var9)\n                        break\n            if var7 > var8:\n                var5 += 1\n        return var5\n \n    def play_deceitful_war(var3, var4):\n        var5 = 0\n        var11 = 0\n        for var9, var10 in enumerate(var3):\n            if var10 < var4[var9]:\n                var11 += 1\n \n        for var6 in range(var2):\n            if var11:\n                var12 = var4[-1] - 0.0000001\n                var11 -= 1\n            else:\n                var12 = var3[-1]\n            var7 = var3.pop(0)\n \n            if var12 > var4[-1]:\n                var8 = var4.pop(0)\n            else:\n                for var9, var10 in enumerate(var4):\n                    if var10 > var12:\n                        var8 = var4.pop(var9)\n                        break\n            if var7 > var8:\n                var5 += 1\n        return var5 \n \n    return play_deceitful_war(var3[:], var4[:]), play_war(var3[:], var4[:])\n \n \nif __name__ == '__main__':\n    var13 = open(var0)\n    var14 = open(var1, 'w')\n     \n    var15 = int(var13.readline())\n \n    for var16 in range(var15):\n        var2 = int(var13.readline())\n        var3 = map(float, var13.readline().split())\n        var4 = map(float, var13.readline().split())\n        var17 = solve(var2, var3, var4)\n        var14.write('Case #%var9: %var9 %var9\n' % (var16 + 1, var17[0], var17[1]))"}
{"author": "pyronimous", "index": 27, "filename": "2012_1460488_1483488.py", "code": "var0 = 'C-small-attempt4.in'\n#var0 = 'c_sample.in'\nvar1 = 'c.var13'\n \n \ndef solvecase(var2):\n\tvar3, var4 = [int(var5) for var5 in var2.split()]\n \t\n\tdef shift(var6):\n\t\treturn var6[-1] + var6[:-1]\n \t\n\tvar7 = 0\n\tfor var5 in range(var3, var4 + 1):\n\t\tvar8 = str(var5)\n\t\tvar9 = var8\n\t\tvar10 = []\n\t\tfor var11 in range(len(var8) - 1):\n\t\t\tvar9 = shift(var9)\n\t\t\tif not (var9 in var10) and (var4 >= int(var9) > var5):\n\t\t\t\tvar7 += 1\n\t\t\t\tvar10.append(var9)\n\treturn var7\n \n \nvar12 = open(var0, 'r').readlines()\nvar13 = open(var1, 'w')\n \nfor var11, var14 in enumerate(var12[1:]):\n\tvar15 = 'Case #%var11: %var11' % (var11 + 1, solvecase(var14))\n\tprint(var15)\n\tvar13.write(var15 + '\n')\n \nvar13.close()\n"}
{"author": "j3ffreysmith", "index": 28, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = 'Jeffrey'\n \n# var1 = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-sample.in\"\nvar1 = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-small-attempt0.in\"\n# var1 = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-large.in\"\n \nvar2 = var1[: -2] + \"var17\"\n \n \ndef parseInput(var3):\n    var4 = int(var3.readline())\n    var5 = []\n \n    for var6 in range(var4):\n        var3.readline()\n        var5.append(([float(var7) for var7 in var3.readline().split()], [float(var7) for var7 in var3.readline().split()]))\n        var5[-1][0].sort()\n        var5[-1][1].sort()\n \n    return var4, var5\n \n \ndef calculateScores(var8, var9):\n    return [calcDeceit(var8, var9), calcHonest(var8, var9)]\n \ndef calcDeceit(var8, var9):\n    var10 = 0\n    while len(var8) > 0:\n        if var8[-1] > var9[-1]:\n            var8 = var8[ : -1]\n            var9 = var9[ : -1]\n            var10 += 1\n        else:\n            var8 = var8[1: ]\n            var9 = var9[ : -1]\n    return var10\n \ndef calcHonest(var8, var9):\n    var10 = 0\n    while len(var8) > 0:\n        var11 = var8.pop(0)\n        var12 = var9[0]\n        for var6 in range(len(var9)):\n            kTemp = var9[var6]\n            if kTemp > var11:\n                var12 = var9.pop(var6)\n                break\n        else:\n            var9.pop(0)\n            var10 += 1\n    return var10\n \n \n \ndef playGame(var4, var5):\n    for var6 in range(var4):\n        var13 = calculateScores(var5[var6][0], var5[var6][1])\n        yield \"Case #{}: {} {}\".format(var6 + 1, var13[0], var13[1])\n \n \nif __name__ == \"__main__\":\n    var14 = open(var1, 'r')\n    var4, var5 = parseInput(var14)\n    var14.close()\n \n    print(var4)\n    for var15 in var5:\n        print()\n        for var12 in var15:\n            print(var12)\n \n    var16 = open(var2, \"wb\")\n    for var17 in playGame(var4, var5):\n        print(var17)\n        # print(bytes(var17, 'utf-8'), file=var16)\n        var16.write(bytes(var17 + \"\n\", 'utf-8'))\n    var16.close()\n"}
{"author": "j3ffreysmith", "index": 28, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \ndef partCa(var0=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/C-small-attempt0.in\",\\\n            var1=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/output.txt\"):\n     \n    #if not init:\n        #build_dict()\n     \n    #Reading input\n    var2 = []\n    for var3 in open(var0, 'r'):\n        var2.append(var3.strip())\n \n    var4 = []\n         \n    #Parsing Input\n    var5 = int(var2[0])\n    for var6 in range(1, 1 + var5):\n        var7 = var2[var6].split()\n        var8 = int(var7[0])\n        var9 = int(var7[1])\n         \n         \n        var4.append(0)\n        #Calculating answer\n        for var6 in range(var8,var9):\n            for var10 in range(var6 + 1, var9 + 1):\n                #testing pair (var6, var10)\n                var4[-1] += int(isRecycled(var6, var10))\n     \n    #Writing Output\n    var11 = open(var1, 'w')\n    print(\"\nOUTPUT\")\n    for var6 in range(1, 1 + var5):\n        if var6 != 1:\n            var11.write(\"\n\")\n        print(\"Case #\" + str(var6) + \": \" +str(var4[var6-1]))\n        var11.write(\"Case #\" + str(var6) + \": \" +str(var4[var6-1]))\n    var11.close()\n     \ndef isRecycled(var12,var13):\n    '''\n    Takes 2 integers and tells you if they are recycled\n    '''\n    var14 = str(var12)\n    var15 = str(var13)\n    if len(var14) == len(var15):\n        for var6 in range(len(var14)):\n            if (var14[var6:] + var14[:var6]) == var15:\n                return True\n         \n    return False\n     \nif __name__ == \"__main__\":\n    partCa()\n"}
{"author": "yoba", "index": 29, "filename": "2014_2974486_5644738749267968.py", "code": "import collections\nimport functools\nimport operator\n \n \ndef optimal_war_step(var0, var1):\n \n    var2 = set(filter(lambda block: block > var1, var0))\n    var0.discard(min(var2 if var2 else var0))\n    return bool(var2)\n \n \ndef deceitful_war(var3, var4, var5 = 10 ** (-6)):\n \n    while var3:\n \n        var6 = min(var3)\n        var7 = max(var3)\n        var8 = min(var4)\n \n        if var6 > var8 and any(map(lambda bs: operator.lt(*bs), zip(sorted(var4), sorted(var3)))):\n \n            yield var7 - var5\n \n        else:\n \n            yield 1.0 - var5\n \n        var4.discard(var8)\n \n \nfor var9 in range(int(input())):\n \n    input()\n    var4 = set(map(float, str.split(input())))\n    var3 = set(map(float, str.split(input())))\n \n    var10 = var3.copy()\n    var11 = var4.copy()\n    var12 = collections.Counter(map(functools.partial(optimal_war_step, var10), deceitful_war(var10, var11)))\n    var13 = collections.Counter(map(functools.partial(optimal_war_step, var3), var4))\n    print(str.format(\"Case #{}: {} {}\", var9 + 1, var12[False], var13[False]))\n"}
{"author": "yoba", "index": 29, "filename": "2012_1460488_1483488.py", "code": "for var0 in range(int(input())):\n    var1, var2 = tuple(map(int, input().split()))\n    var3 = 0\n    var4, var5 = str(var1), str(var2)\n    for var6 in range(var1, var2 + 1):\n        var7 = str(var6)\n        var8 = list()\n        for var9 in range(len(var7)):\n            var10 = var7[var9:] + var7[:var9]\n            if var10 < var4 or var10 > var5:\n                continue\n            elif var7 < var10 and var10 not in var8:\n                var8.append(var10)\n                var3 += 1\n    print(\"Case #{}: {}\".format(var0 + 1, var3))\n"}
{"author": "eko", "index": 30, "filename": "2014_2974486_5644738749267968.py", "code": "import os, re, sys\nimport unittest\n \n \n#var0 = sys.stdin.readline().split()\nvar0 = int(sys.stdin.readline())\n \ndef ken(var1, var2):\n\tfor var3 in var2:\n\t\tif var3 >= var1:\n\t\t\tvar2.remove(var3)\n\t\t\treturn var3, var2\n \t\n\tvar4 = var2[0]\n\tvar2.remove(var4)\n\treturn var4, var2\n \t\ndef naomi(var5, var6):\n\tvar7 = var2(var5)\n\tvar8 = var2(var6)\n \t\n\twhile len(var7) > 0:\n\t\tvar9 = var7.pop()\n\t\tvar10 = var8.pop()\n \n\t\tif (var9 < var10):\n\t\t\t#if len(var8) > 0:\n\t\t\t\treturn var5[0], var6[len(var6)-1]\n\t\t\t#else:\n\t\t\t#\treturn var10, var9\n \t\t\n\treturn var5[len(var5)-1], var6[len(var6)-1]\n \t\t\ndef main(var5, var6):\n\tvar11 = 0\n\tvar12 = 0\n\t#var5.sort(reverse=True)\n\tvar5.sort()\n\tvar6.sort()\n \t\n\tvar13 = var2(var5)\n\tvar14 = var2(var6)\n \t\n\tvar5.sort()\n\t#print(var5)\n\t#print(var6)\n \t\n\twhile len(var5) > 0:\n\t\tvar9, var15 = naomi(var5, var6)\n\t\tvar5.remove(var9)\t\t\n\t\tvar10, var6 = ken(var15, var6)\n\t#\tprint(var9, var15,  var10)\n\t\tif (var9 > var10):\n\t\t\tvar11 += 1\n \t\t\t\n\twhile len(var13) > 0:\n\t\tvar9 = var13.pop()\n\t\tvar10, var14 = ken(var9, var14)\n\t\t#print(var9, var10)\n\t\tif (var9 > var10):\n\t\t\tvar12 += 1\n \t\t\t\n \t\t\t\n \t\n \n\treturn str(var11) + \" \" + str(var12)\n \t\t\n  \nif __name__ == '__main__':\n\t#unittest.main()\n\tfor var3 in xrange(var0):\t\n\t\t#frase = [str(var4) for var4 in sys.stdin.readline().split(' ')]\t\n\t\t#print(\"Case #%d: %s\" % (var3 + 1, main(frase[0])))\n \t\t\n\t\t##Numbers\n\t\tvar16 = [int(var4) for var4 in sys.stdin.readline().split(' ')]\n\t\tvar5 = [float(var4) for var4 in sys.stdin.readline().split(' ')]\n\t\tvar6 = [float(var4) for var4 in sys.stdin.readline().split(' ')]\n\t\t#print(E,R,var16, NList)\n\t\tprint(\"Case #%d: %s\" % (var3 + 1, main(var5, var6)))"}
{"author": "eko", "index": 30, "filename": "2012_1460488_1483488.py", "code": "import sys, os\nimport re\n \nvar0 = int(sys.stdin.readline())\n \ndef alien(var1):\n\tvar2 = 0\n\tvar3 = int(var1[0])\n\tvar4 = int(var1[1])\n \n\tfor var5 in range(var3,var4-1):\n\t\tfor var6 in range(var5+1,var4+1):\n\t\t\t#print(var5,var6)\n\t\t\tif (len(str(var5)) == len(str(var6))):\n\t\t\t\tvar2 += isRecycled(str(var5),str(var6))\n \t\n \n \n\treturn var2\n \t\ndef isRecycled(var5,var6):\n\tif len(var5) < 2:\n\t\treturn 0\n \t\t\n\tfor var7 in var6:\n\t\tif var7 not in var5:\n\t\t\treturn 0\n \n\tfor var8 in range (1, len(var5)):\n\t\tvar9 = var6[var8:] + var6[-len(var6):-(len(var6)-var8)]\n\t\tif var5 == var9:\n\t\t\treturn 1\n \t\n\treturn 0\n \n \nvar10 = []\nfor var8 in xrange(var0):\n\tvar11 = sys.stdin.readline().split()\n\tvar10.append((var11[0],var11[1]))\n \t\n \nfor var8 in xrange(var0):\t\n\t#case.append(frase)\n\tprint(\"Case #%d: %s\" % (var8+1, alien(var10[var8])))\n \t\n \t\n \n"}
{"author": "shishkander", "index": 31, "filename": "2014_2974486_5644738749267968.py", "code": "def CASE(var0):\n    def rstr(): return var0.readline().strip()\n    def rint(): return int(rstr())\n    def rfs(): return map(float, rstr().split())\n    var1 = rint()\n    var2 = sorted(rfs())\n    var3 = sorted(rfs())\n    var4 = solve(var1, var2, var3)\n    var5 = var1 - solve(var1, var3, var2)\n    return \"%var6 %var6\" % (var4, var5)\n \n \ndef solve(var1, var2, var3):\n    var6, var7 = 0, 0\n    while True:\n        while var7 < var1 and var2[var7] < var3[var6]:\n            var7 += 1\n        if var7 == var1:\n            return var6\n        var6 += 1\n        var7 += 1\n \n \ndef RUN(var0, var8):\n    var9 = int(var0.readline().strip())\n    for var6 in xrange(1,var9+1):\n        var8.write(\"Case #%var6: %s\n\" % (var6, CASE(var0)))\n \nif __name__ == \"__main__\":\n    import sys\n    RUN(sys.stdin, sys.stdout)\n"}
{"author": "shishkander", "index": 31, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\nimport cPickle, time\nvar0 = {}\n# to compute var0:\ndef f(var1, var2, var3, var4):\n    if var1 < 10: \n        #raise StopIteration\n        return set()\n    var5 = len(str(var1)) -1\n    var6 = 10**var5\n    var7 = set()\n    var7.add(var2)\n    for var8 in xrange(var5):\n        var1 = (var1 % 10) * var6 + var1/10\n        if var3 <= var1 <= var4 and var2 < var1:\n            var7.add(var1)\n    var7.remove(var2)\n    if var7:\n        #print(var2, \"=>\", var7)\n        var0[var2] = sorted(var7)\n    return var7\n \ndef compute_F(var9):\n    for var8 in xrange(0, var9+1):\n        f(var8,var8, 0, var9+1)\n    with open(\"picle\",'wb') as _file:\n        cPickle.dump( var0, _file)\n \n#print(\"start\", time.time())\n#compute_F(2000000)\n#print(\"end  \", time.time())\n \n \nvar10 = time.time()\nprint(\"loading...\")\nwith open(\"picle\",'rb') as _file:\n    var0 = cPickle.load(_file)\nprint(\"done in %.2fs\" % (time.time() - var10))\nprint(\"loaded var0 with %var8 keys\" % len(var0))\n \ndef case(var11, var9):\n    print(\"XXXXXXXXX \", var11, var9)\n    var7 = 0\n    var12 = 0\n    for var8 in xrange(var11, var9):\n        var5 = var0.get(var8, [])\n        #var5 = sorted(f(var8,var8,var11,var9))\n        #var7 += len(var5)\n        #l1 = sorted(var0.get(var8,[]))\n        #if var5 != l1:\n        #    print(var8, var5, l1)\n \n        for var1 in var5:\n            if var1 <= var9:\n                var7 += 1\n    return var7\n \ndef solve(var13, var14):\n    var15 = int(var13.readline())\n    for var16 in xrange(var15):\n        var11, var9 = map(int, var13.readline().strip().split(\" \"))\n        assert var11 <= var9\n        var14.write(\"Case #%var8: %var8\n\" % (var16+1, case(var11,var9)) )\n    return True\n \nif __name__ == \"__main__\":\n    import sys\n    with open(sys.argv[1],'r') as var13:\n        with open(sys.argv[2], 'w') as var14:\n            solve(var13, var14)\n"}
{"author": "caethan", "index": 32, "filename": "2014_2974486_5644738749267968.py", "code": "#Template code developed by Brett Olsen (brett.olsen@gmail.com), 2013\n#for the Google Code Jam programming contest\n \n###############################################################################\n# Imports go here\n###############################################################################\n \n#For faster numerical analysis\nimport numpy as np\n \nimport sys\n \n#Needed for the memoization decorator\nimport collections\nimport functools\n \n###############################################################################\n# Global variables (for caching, etc.) go here\n###############################################################################\n \n###############################################################################\n# Decorators (taken from http://wiki.python.org/moin/PythonDecoratorLibrary)\n###############################################################################\n \nclass memoize(object):\n    \"\"\"Decorator. Caches a function's return var3 each time it is called.\n    If called later with the same arguments, the cached var3 is returned\n    (not reevaluated).\n    \"\"\"\n    def __init__(var0, var1):\n        var0.var1 = var1\n        var0.var2 = {}\n    def __call__(var0, *var4):\n        if not isinstance(var4, collections.Hashable):\n            # uncacheable. a list, for instance.\n            # better to not var2 than blow up.\n            return var0.var1(*var4)\n        if var4 in var0.var2:\n            return var0.var2[var4]\n        else:\n            var3 = var0.var1(*var4)\n            var0.var2[var4] = var3\n            return var3\n    def __repr__(var0):\n        '''Return the function's docstring.'''\n        return var0.var1.__doc__\n    def __get__(var0, var5, var6):\n        '''Support instance methods.'''\n        return functools.partial(var0.__call__, var5)\n \n###############################################################################\n# Functions\n###############################################################################\n \ndef precalculate():\n    \"\"\"Perform any calculations that need to be performed before the main path\n    (e.g., preparing lookup tables, etc.)\n     \n    var9.B. Make sure you make any important variables global so that other\n    functions can access them.\n    \"\"\"\n    pass\n \ndef read_input(var7):\n    \"\"\"This function should take an open input file, load in all of the\n    relevant information for a single var24 of the problem, and var28 it\n    as a single object.    \n    \"\"\"\n    #Some utility functions to read in particular types of input\n    def read_int():\n        return int(var7.readline().strip())\n    def read_ints():\n        return np.array(var7.readline().split(), dtype=int)\n    def read_bigints(): #For ints that won't fit directly in an int32 array\n        var8 = var7.readline().split()\n        return np.array(map(lambda x: int(x), var8))\n    def read_float():\n        return float(var7.readline().strip())\n    def read_floats():\n        return np.array(var7.readline().split(), dtype=float)\n    def read_string():\n        return var7.readline().strip()\n    def read_strings():\n        return np.array(var7.readline().split(), dtype=object) #var9.B. general dtype\n     \n    var9 = read_int()\n    var10 = read_floats()\n    var11 = read_floats()\n    var10.sort()\n    var11.sort()\n    assert len(var10) == var9\n    assert len(var11) == var9\n     \n    return var10, var11\n \ndef ken_choice(var12, var11, var13):\n    #Ken's strategy is as follows:  if he has no block heavier than what Naomi\n    #tells him, then he chooses his smallest block.  Otherwise, he chooses the smallest\n    #block that is heavier than what she tells him.\n    #var9.B. var11 should be provided as a sorted list from smallest to largest.\n    var9 = len(var11)\n    var14 = None\n    for var15 in range(var9):\n        if not var13[var15]:\n            continue\n        if var14 is None:\n            var14, var16 = var11[var15], var15\n        if var11[var15] > var12:\n            return var11[var15], var15\n    return var14, var16\n \ndef normal_war(var10, var11):\n    #Naomi's strategy is to play blocks from largest to smallest,\n    #Ken's strategy is to play the smallest block that could beat Naomi's,\n    #or the smallest block if he has none that can do so.\n    #Runs as var9^2, fast enough even with var9=1000\n     \n    #Appears to be validated as the best strategy, checked it with \n    #a complete exponential solution on the small import - no differences.\n    var9 = len(var10)\n    var13 = np.ones(var9, dtype=bool)\n    var17 = 0\n    for var18 in range(var9)[::-1]:\n        var19 = var10[var18]\n        var20, var15 = ken_choice(var19, var11, var13)\n        var13[var15] = False\n         \n        if var19 > var20:\n            var17 += 1\n    return var17\n \n \ndef new_deceitful_war(var10, var11):\n    var17 = 0\n     \n    var9 = len(var10)\n     \n    for var18 in range(var9):\n        if var10[-1] > var11[-1]:\n            var17 += 1\n            var10 = var10[:-1]\n            var11 = var11[:-1]\n        else:\n            var10 = var10[1:]\n            var11 = var11[:-1]\n    return var17\n \n \ndef deceitful_war(var10, var11):\n    #Naomi certainly can't win with blocks that are lower than all of Ken's\n    #blocks.  But Naomi can lie about these blocks' weight to use up key blocks\n    #of Ken's. \n     \n     \n    #, and will also lose against all of Ken's blocks that are larger\n    #than all of her blocks.  So Naomi can lie using her var14 blocks to\n    #use up Ken's highest blocks to remove these guaranteed losses.\n     \n     \n    #Naomi's strategy is to use her no-hopers (those that are lower\n    #than all of Ken's blocks) to fish out Ken's highest weight blocks.\n    #Then she uses her var14 blocks to fish out any of Ken's best blocks\n    #that will beat all of hers\n    var9 = len(var10)\n    var21 = 0\n    for var18 in range(var9):\n        if var10[var18] < var11[0]:\n            var21 += 1\n    #Some of Ken's blocks might be larger than all of hers\n    var22 = 0\n    for var18 in range(var9)[::-1]:\n        if var11[var18] > var10[-1]:\n            var22 += 1\n     \n    #Then she goes through the rest and tries to win in order\n    var23 = max(var21, var22)\n    var10 = var10[var23:]\n    var11 = var11[:var9-var23]\n \n    '''\n    print \"After removing sure losers:\"\n    print var9, var9-var23, var23\n    if var9 - var23 > 0:\n        if min(var10) < max(var11):\n            print var10\n            print var11\n    '''\n \n    #print len(var10), len(var11), var23\n \n    var17 = 0\n    for var18 in range(var9 - var23):\n        if var10[var18] > var11[var18]:\n            var17 += 1\n             \n    return var17\n \ndef solve_case(var24):\n    \"\"\"Take the input data (structured in var24) and perform any necessary\n    calculations to obtain the desired var28, formatted as the appropriate\n    string.    \n    \"\"\"\n     \n    var10, var11 = var24\n    print (var10)\n    print (var11)\n     \n    var25 = new_deceitful_war(var10, var11)\n     \n    var26, var27 = deceitful_war(var10, var11), normal_war(var10, var11)\n     \n    if not var25 == var26:\n        print ('Hey!', var25, var26)\n     \n    var28 = \"%var18 %var18\" % (var25, var27)\n    return var28\n \n###############################################################################\n# Main execution path\n###############################################################################\n \nif __name__ == \"__main__\":\n    #Do any pre-calculations required\n    precalculate()\n     \n    #Open up the input & var28 files based on the provided input file\n    assert len(sys.argv) == 2 #only one argument\n    assert sys.argv[1][-3:] == \".in\" #input must end with .in\n    var7 = open(\"%s\" % sys.argv[1], 'r')\n    var29 = open(\"%s.out\" % sys.argv[1][:-3], 'w')\n     \n    #Read in the number of var30 (the first input var8) to iterate through\n    var30 = int(var7.readline().strip('\n'))\n    for var18 in range(var30):\n         \n        #Read in the input data for this var24\n        var24 = read_input(var7)\n         \n        #Solve the problem for this var24\n        var28 = solve_case(var24)\n         \n        #Write out the var28 of this var24\n        var29.write('Case #%var18: %s\n' % (var18+1, var28))\n        print ('Case #%var18: %s\n' % (var18+1, var28))\n     \n    #Close files\n    var7.close()\n    var29.close()"}
{"author": "caethan", "index": 32, "filename": "2012_1460488_1483488.py", "code": "#Code copyright Brett Olsen, 2012\n \n#Standard imports\nimport numpy as N\n \n#Some switching behavior to set standard input/var7 files\n#Set these three variables to adjust behavior\nvar0 = 1\nvar1 = \"C\"\nvar2 = False\n \nif var2:\n    var2 = \"-var2\"\nelse:\n    var2 = \"-attempt0\"\nif var0 == 0:\n    var3 = open(\"%s-%s%s.in\" % (var1, \"sample\", var2), 'r')\n    var4 = open(\"%s-%s%s.out\" % (var1, \"sample\", var2), 'w')        \nelif var0 == 1:\n    var3 = open(\"%s-%s%s.in\" % (var1, \"small\", var2), 'r')\n    var4 = open(\"%s-%s%s.out\" % (var1, \"small\", var2), 'w')    \nelif var0 == 2:\n    var3 = open(\"%s-%s%s.in\" % (var1, \"large\", var2), 'r')\n    var4 = open(\"%s-%s%s.out\" % (var1, \"large\", var2), 'w')   \nelse:\n    raise (ValueError, 'Invalid var0')\n     \ndef permute(var5, var6):\n    assert type(var5) == int\n    var7 = []\n    var8 = int(N.ceil(N.log10(var5)))\n    var9 = var5\n    for var10 in range(var8-1):\n        var9 = var9 / 10 + 10**(var8-1) * (var9 % 10)\n        if var9 <= var5: #We only want permutations greater than var5 (for uniqueness)\n            continue\n        if var9 > var6: #only permutations less than the maximum value\n            continue\n        if var9 not in var7:\n            var7.append(var9)\n#    return var7\n    return len(var7)\n     \ndef count_recycled(var11, var12):\n    var13 = 0\n    for var5 in xrange(var11, var12+1):\n        var13 += permute(var5, var12)\n    return var13\n     \n#Read in the number of var14 (the first input line) we need to iterate through\nvar14 = int(var3.readline().strip('\n'))\nfor var10 in range(var14):\n##################NEW CODE GOES HERE###########################################    \n    #Read in all relevant data for each var0\n    var11, var12 = var3.readline().split()\n    var11 = int(var11)\n    var12 = int(var12)\n     \n    #Do calculations to generate the var7\n    var7 = '%var10' % count_recycled(var11, var12)\n     \n##################NEW CODE GOES HERE###########################################    \n    #Write out the results for this var0\n    var4.write('Case #%var10: %s\n' % (var10+1, var7))\n     \n#Close files\nvar3.close()\nvar4.close()"}
{"author": "rainmayecho", "index": 33, "filename": "2014_2974486_5644738749267968.py", "code": "def war(var0, var1):\n    var1.sort()\n    var2 = 0\n    for var3 in var0:\n        for var4  in xrange(len(var1)):\n            if var1[var4] > var3:\n                var2 += 1\n                var1.pop(var4)\n                break\n    return len(var0) - var2    \n             \n \ndef deceit(var0, var1):\n    var0.sort()\n    var1.sort()\n    var2 = 0\n    for var5 in var1:\n        for var4 in xrange(len(var0)):\n            if var0[var4] > var5:\n                var2 +=1\n                var0.pop(var4)\n                break\n    return var2\n     \n \nvar6 = open('Dsmall.in', 'r')\nvar7 = open('outputD.txt', 'var15')\n \nvar8 = [[float(var9) for var9 in var10.strip(\"\n\").split(' ')] for var10 in var6]\nvar11 = int(var8.pop(0)[0])\nvar12 = 1\nfor var4 in xrange(0, var11*3, 3):\n    var13 = var8[var4+1]\n    var14 = var8[var4+2]\n \n    var15 = war(var13, list(var14))\n    var16 = deceit(list(var13), list(var14))\n    var7.write('Case #%var4: %var4 %var4\n' %(var12, var16, var15))\n    var12 += 1\n \nvar6.close()\nvar7.close()\n \n"}
{"author": "rainmayecho", "index": 33, "filename": "2012_1460488_1483488.py", "code": "import math\n \nvar0 = open('csmall.in','r')\nvar1 = open('out3.txt','w')\nvar2 = [[int(var3) for var3 in var4.split()] for var4 in var0.readlines()]\nvar5 = 1\n \nfor var6 in var2[1:len(var2)]:\n    var7 = xrange(var6[0],var6[1]+1)\n    var8 = xrange(1, int(math.log(var7[-1],10))+1)\n    var9 = []\n    var10 = []\n    for var11 in var7:\n        if str(var11)[::-1] == str(var11):\n            continue\n        for var12 in var8:\n            var13 = int(str(var11%10**var12)+str(var11/10**var12))\n            if var13 in var9:\n                continue\n            elif var13 >= var7[0] and var13 <= var7[-1] and not var13 == var11:\n                var9.append(var11)\n    var1.write('Case #'+str(var5)+': '+str(len(var9))+'\n')\n    var5 += 1\n \nvar0.close()\nvar1.close()\n"}
{"author": "bigonion", "index": 34, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = 'C:/users/me/desktop/google code jam/2014/qualification/D/'\n \nfrom copy import deepcopy\nimport itertools\n \n \nfrom random import choice\n \nvar1 = 501\nvar2 = 502\nvar3 = 503\n \ndef play_war (var4, var5, var6):\n    assert var6 in [var1, var2, var3]\n    assert len(var4) == len(var5)\n    if var6 == var1:\n        var4 = list(sorted(var4))\n    if var6 == var2:\n        var4 = list(reversed(sorted(var4)))\n    var5 = list(sorted(var5))\n    var7 = 0\n    for var8 in range(len(var4)):\n        var9 = var4[0]\n        var4 = var4[1:]\n        if var5[-1] < var9:\n            var5 = var5[1:]\n            var7 += 1\n        else:\n            for var10 in range(len(var5)):\n                if var5[var10] > var9:\n                    del var5[var10]\n                    break\n \n    return var7\n \n \ndef play_deceitful (var4, var5):\n    var4 = list(sorted(var4))\n    var5 = list(sorted(var5))\n    var7 = 0\n    assert len(var4) == len(var5)\n    while len(var4):\n        if var4[-1] < var5[-1]:\n            var4 = var4[1:]\n            var5 = var5[:-1]\n        else:\n            var4 = var4[:-1]\n            var5 = var5[:-1]\n            var7 += 1\n    return var7\n             \n             \ndef solve (var11, var12):\n    var13 = int(var11.readline())\n    for var14 in range(1,var13+1):\n        var15 = int(var11.readline())\n        var4 = [float(var16) for var16 in var11.readline().split()]\n        var5 = [float(var16) for var16 in var11.readline().split()]\n \n        var17 = play_war (var4, var5, var1)\n        var18 = play_war (var4, var5, var2)\n        var19 = play_war (var4, var5, var3)\n        assert var17 == var18\n        assert var18 == var19\n        var20 = play_deceitful (var4, var5)\n \n        var12.write('Case #' + str(var14) + ': ' + str(var20) + ' ' + str(var17) + '\n')\n \n \n         \n         \n \n     \ndef main_run():\n    import os\n    import time\n    var21 = [var16 for var16 in os.listdir (var0)]\n    var21 = [var16 for var16 in var21 if var16.endswith('.in')]\n    var22 = [(os.stat(var0+var16).st_mtime, var16) for var16 in var21]\n    var23 =  sorted(var22)[-1][1][:-3]\n \n    print(('Directory : ', var0))\n    print(('Chosen Filename : ',var23))\n    print()\n    print(('Start : ', time.ctime()))\n    print()\n     \n    var11 = open(var0+var23+'.in')\n    var12 = open(var0+var23+'.out', 'w')\n    solve(var11,var12)\n    var11.close()\n    var12.close()\n \n    print(())\n    print(('End : ', time.ctime()))\n \n \nmain_run()\n \ndef randomize_arrs (var24):\n    var25 = []\n    for var8 in range(2*var24):\n        var26 = choice(range(2**30))\n        while var26 in var25:\n            var26 = choice(range(2**30))\n        var25.append(var26)\n    return var25[:var24], var25[var24:]\n \n"}
{"author": "bigonion", "index": 34, "filename": "2012_1460488_1483488.py", "code": "var0 = 'C:/users/hai/my projects/google code jam/2012/qualification/C/'\n \n \ndef solve (var1, var2):\n    var3 = prepare()\n    var4 = int(var1.readline())\n    for var5 in range(1,var4+1):\n        var6,var7 = [int(var8) for var8 in var1.readline().split()]\n        var9 = 0\n        for var10 in range(var6,var7+1):\n            var9 += len ([var11 for var11 in var3[var10] if var11 >=var6])\n        var2.write('Case #' + str(var5) + ': ' + str(var9) + '\n')\n \n \n \n \n \n \ndef prepare ():\n    var12 = [None]* 2000001\n    for var11 in range(1,2000001):\n        var13 = []\n        var14 = str(var11)\n        for var9 in range(1, len(var14)):\n            var15 = var14[var9:] + var14[:var9]\n            if var15[0] != '0':\n                var16 = int(var15)\n                if var16 < var11 and var16 not in var13:\n                    var13.append(var16)\n        #var13.sort()\n        var12 [var11] = var13\n    return var12\n \n \ndef main_run():\n    import os\n    import time\n    var17 = [var8 for var8 in os.listdir (var0)]\n    var17 = [var8 for var8 in var17 if var8.endswith('.in')]\n    var18 = [(os.stat(var0+var8).st_ctime, var8) for var8 in var17]\n    var19 =  sorted(var18)[-1][1][:-3]\n \n    print(('Directory : ', var0))\n    print(('Chosen Filename : ',var19))\n    print()\n    print(('Start : ', time.ctime()))\n    print()\n     \n    var1 = open(var0+var19+'.in')\n    var2 = open(var0+var19+'.out', 'w')\n    solve(var1,var2)\n    var1.close()\n    var2.close()\n \n    print(())\n    print(('End : ', time.ctime()))\n \n \nmain_run()\n"}
{"author": "sickmath", "index": 35, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = open('input.in')\nvar1 = open('var13', 'w')\n \nvar2 = int(var0.readline()[:-1])\n \nfor var3 in xrange(var2) :\n    var4 = int(var0.readline()[:-1])\n    var5 = sorted(map(float, var0.readline()[:-1].split()))\n    var6 = sorted(map(float, var0.readline()[:-1].split()))\n    var7 = var6[:]\n    var8, var9 = 0, 0\n    for var10 in var5 :\n        if var10 > max(var6) :\n            var6.pop(0)\n            var8 += 1\n        else :\n            for var11, var12 in enumerate(var6) :\n                if var12 > var10 : break\n            var6.pop(var11)\n    var6 = var7\n    for var10 in var5 :\n        if var10 < min(var6) :\n            var6.pop(-1)\n        else :\n            var6.pop(0)\n            var9 += 1\n    var13 = 'Case #' + str(var3 + 1) + ': ' + str(var9) + ' ' + str(var8)\n    var1.write(var13 + '\n')\n    print(var13)\n \nvar0.close()\nvar1.close()\n"}
{"author": "sickmath", "index": 35, "filename": "2012_1460488_1483488.py", "code": "var0 = open('C-small-attempt0.in', 'r')\nvar1 = open('C-output.txt', 'w')\n \nvar2 = int(var0.readline()[:-1])\n \nfor var3 in range(var2) :\n    var4, var5 = map(int, var0.readline()[:-1].split(' '))\n    var6 = len(str(var4))\n    var7 = set()\n    for var8 in range(var4,var5+1) :\n        for var9 in range(1,var6) :\n            var10 = [str(var8)[(var11+var9)%var6] for var11 in range(var6)]\n            var10 = int(''.join(var10))\n            if var4 <= var8 < var10 <= var5 :\n                var7.add(str([var8,var10]))\n    var12 = len(var7)\n    print('Case #' + str(var3+1) + ': ' + str(var12))\n    var1.write('Case #' + str(var3+1) + ': ' + str(var12) + '\n')\n     \nvar0.close()\nvar1.close()\n"}
{"author": "tamaeguchi", "index": 36, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# Problem D. Deceitful War\n# https://code.google.com/codejam/contest/2974486/dashboard#s=p3\n#\n \nimport sys\n \n \ndef solve1(var0, var1):\n    # Deceitful War\n    var2 = 0\n    while var0:\n        var3 = max(var1)\n        var4 = min(filter(lambda mass: mass > var3, var0) or var0)\n        if var4 > var3:\n            var2 += 1\n        var0.remove(var4)\n        var1.remove(var3)\n    return var2\n \n \ndef solve2(var0, var1):\n    # War\n    var2 = 0\n    while var0:\n        var4 = min(var0)\n        var3 = min(filter(lambda mass: mass > var4, var1) or var1)\n        if var4 > var3:\n            var2 += 1\n        var0.remove(var4)\n        var1.remove(var3)\n    return var2\n \n \ndef main(var5, var6):\n    var7 = int(var5.readline())\n    for var8 in range(var7):\n        var9 = int(var5.readline())\n        var0 = map(float, var5.readline().split())\n        var1 = map(float, var5.readline().split())\n        var6.write('Case #%d: %d %d\n' % (var8 + 1, solve1(var0[:], var1[:]), solve2(var0[:], var1[:])))\n \n \ndef makesample(var10=1000, var7=50):\n    import random\n    print(var7)\n    for var8 in range(var7):\n        var9 = random.randint(1, var10)\n        print(var9)\n        print(' '.join(map(str, (random.random() for var11 in range(var9)))))\n        print(' '.join(map(str, (random.random() for var11 in range(var9)))))\n \n \nif __name__ == '__main__':\n    if '-makesample' in sys.argv[1:]:\n        makesample()\n    else:\n        main(sys.stdin, sys.stdout)\n \n"}
{"author": "tamaeguchi", "index": 36, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# Problem C. Recycled Numbers\n# http://code.google.com/codejam/contest/1460488/dashboard#s=p2\n#\n \nimport sys\nimport string\n \n \ndef solve(var0, var1):\n\t# Given integers var0 and var1 with the same number of digits\n\t# なのでAとBは同じケタ数のはず\n\tvar2 = str(var1)[0]\n \n\tvar3 = 0\n\tfor var4 in xrange(var0, var1):\t\t# var4=var1 のケースは検証不要(var4 < var8 <= var1 になりえない)\n\t\tvar5 = str(var4)\n\t\tvar6 = set()\n\t\tfor var7 in range(1, len(var5)):\n\t\t\tif var5[var7] < var5[0]:\n\t\t\t\t# var8 の先頭が var4 の先頭より小さい → var4 < var8 にならない\n\t\t\t\tcontinue\n\t\t\tif var5[var7] > var2:\n\t\t\t\t# var8 の先頭が var1 の先頭より大きい → var8 <= var1 にならない\n\t\t\t\tcontinue\n \n\t\t\tvar8 = int(var5[var7:] + var5[:var7])\n\t\t\tif var4 < var8 and var8 <= var1 and var8 not in var6:\n\t\t\t\tvar6.add(var8)\t\t# distinct 判定(見つけたものは除外)\n\t\t\t\tvar3 += 1\n\t\t\t\t#print(var4, var8)\n\treturn var3\n \n \ndef main(var9, var10):\n\tvar11 = int(var9.readline())\n\tfor var7 in range(var11):\n\t\tvar0, var1 = map(int, var9.readline().strip().split())\n\t\tvar10.write('Case #%d: %d\n' % (var7 + 1, solve(var0, var1)))\n \n \ndef makesample(var12=2000000, var13=50):\n\timport random\n\tprint(var13)\n\tfor var7 in range(var13):\n\t\tvar0 = random.randint(1, var12)\n\t\tvar1 = random.randint(var0, var12)\n\t\tprint(var0, var1)\n \n \nif __name__ == '__main__':\n\tif '-makesample' in sys.argv[1:]:\n\t\tmakesample()\n\telse:\n\t\tmain(sys.stdin, sys.stdout)\n \n"}
{"author": "anb", "index": 37, "filename": "2014_2974486_5644738749267968.py", "code": "from sys import stdin\n \n \ndef read_str(): return stdin.readline().rstrip('\n')\ndef read_int(): return int(stdin.readline())\ndef read_ints(): return map(int, stdin.readline().split())\ndef read_floats(): return map(float, stdin.readline().split())\n \n     \ndef war(var0, var1):\n    var2 = 0\n    var3 = 0\n    for var4 in range(len(var0)):\n        while var3 < len(var1) and var1[var3] < var0[var4]:\n            var3 += 1\n        if var3 == len(var1):\n            var2 += 1\n        else:\n            var3 += 1\n    return var2\n \n \ndef deceitful_war(var0, var1):\n    return len(var0) - war(var1, var0)\n     \n \ndef solve_case():\n    read_int()\n    var0 = sorted(read_floats())\n    var1 = sorted(read_floats())\n     \n    return '{} {}'.format(deceitful_war(var0, var1), war(var0, var1))\n \n     \ndef main():\n    var5 = read_int()\n    for var6 in range(1, var5 + 1):\n        print('Case #{}: {}'.format(var6, solve_case()))\n \n         \nmain()\n"}
{"author": "anb", "index": 37, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\n \ndef program():\n\tvar0 = int(stdin.readline())\n\tfor var1 in xrange(var0):\n\t\tvar2, var3 =  map(int, stdin.readline().rstrip().split(' '))\n \t\t\n\t\tvar4 = set()\n\t\tfor var5 in xrange(var2, var3 + 1):\n\t\t\tvar6 = str(var5)\n\t\t\tfor var7 in xrange(1, len(var6)):\n\t\t\t\tvar8 = var6[var7:] + var6[:var7]\n\t\t\t\tif var8[0] != '0':\n\t\t\t\t\tvar9 = int(var8)\n\t\t\t\t\tif var9 > var5 and var9 <= var3:\n\t\t\t\t\t\tvar4.add((var5, var9))\n \t\t\n\t\tprint('Case #%d: %d' % (var1 + 1, len(var4))\t)\n \t\nif __name__ == '__main__':\n\tprogram()"}
{"author": "kawasaki", "index": 38, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \nimport bisect\n \nvar0 = int(raw_input())\nfor var1 in xrange(1, var0 + 1):\n    var2 = int(raw_input())\n    var3 = sorted(map(float, raw_input().split()))\n    var4 = sorted(map(float, raw_input().split()))\n \n    var5 = 0\n    var6 = var7 = 0\n    while var6 < var2 and var7 < var2:\n        if var4[var7] < var3[var6]:\n            var5 += 1\n            var6 += 1\n            var7 += 1\n        while var6 < var2 and var7 < var2 and var3[var6] < var4[var7]:\n            var6 += 1\n \n    var8 = var2\n    var6 = var7 = 0\n    while var6 < var2 and var7 < var2:\n        if var3[var6] < var4[var7]:\n            var8 -= 1\n            var6 += 1\n            var7 += 1\n        while var6 < var2 and var7 < var2 and var4[var7] < var3[var6]:\n            var7 += 1\n \n    print('Case #{}: {} {}'.format(var1, var5, var8))\n"}
{"author": "kawasaki", "index": 38, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\n \n \ndef rotate(var0, var1):\n    var0 = str(var0)\n    return int(var0[-var1:] + var0[:-var1])\n \n \nvar2 = int(raw_input())\nfor var3 in xrange(1, var2 + 1):\n    var4, var5 = map(int, raw_input().split())\n \n    var6 = len(str(var4))\n    assert var6 == len(str(var5))\n \n    var7 = []\n    for var8 in xrange(var4, var5 + 1):\n        for var1 in xrange(1, len(str(var8))):\n            var9 = int(rotate(var8, var1))\n            if var8 < var9 <= var5:\n                var7.append((var8, var9))\n \n    print('Case #%d: %d' % (var3, len(set(var7))))\n \n"}
{"author": "michael", "index": 39, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef read_line():\n    return sys.stdin.readline().rstrip( '\n' )\n \ndef read_integer():\n    return int( read_line() )\n \ndef read_floats():\n    return [ float( var0 ) for var0 in read_line().split() ]\n \nvar1 = read_integer()\nfor var2 in range( var1 ):\n    var3 = read_integer()\n    var4 = sorted( read_floats() )\n    var5 = sorted( read_floats() )\n    var6 = len( var5 ) - 1\n    var7 = 0\n    for var8 in reversed( var4 ):\n        if var5[ var6 ] > var8:\n            var6 -= 1\n        else:\n            var7 += 1\n    var9 = 0\n    var8 = len( var4 ) - 1\n    for var6 in reversed( var5 ):\n        if var4[ var8 ] > var6:\n            var9 += 1\n            var8 -= 1\n    print('Case #%i:' % ( var2 + 1 ), var9, var7)\n"}
{"author": "michael", "index": 39, "filename": "2012_1460488_1483488.py", "code": "def read_line():\n    return raw_input().strip()\n \ndef read_words():\n    return read_line().split()\n \ndef read_integer():\n    return int( read_line() )\n \ndef read_integers():\n    return [ int( var0 ) for var0 in read_words() ]\n \nvar1 = read_integer()\nfor var2 in range( var1 ):\n    print('Case #%i:' % ( var2 + 1 ),)\n    var3, var4 = read_integers()\n    var5 = len( str( var3 ) )\n    var6 = set()\n    for var7 in range( var3, var4 ):\n        var8 = str( var7 )\n        for var9 in range( 1, var5 ):\n            var10 = int( var8[ var9 : ] + var8[ : var9 ] )\n            if var7 < var10 <= var4:\n                var6.add( ( var7, var10 ) )\n    print(len( var6 ))\n"}
{"author": "xoxie", "index": 40, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nfrom collections import deque\n \nvar0 = open(sys.argv[1])\nvar0.readline()\n \nvar1 = 1\nvar2 = var0.readline()\nwhile var2 != \"\":\n\tvar3 = [float(var4) for var4 in var0.readline().split()]\n\tvar5 = [float(var4) for var4 in var0.readline().split()]\n \n\tvar3.sort()\n\tvar6 = deque(var3)\n\tvar5.sort()\n\tvar7 = deque(var5)\n \n\tvar8 = 0\n\twhile len(var6) > 0:\n\t\tvar9 = var6.pop()\n\t\tif var9 > var7[-1]:\n\t\t\tvar7.popleft()\n\t\t\tvar8 += 1\n\t\telse:\n\t\t\tvar7.pop()\n \n\tvar10 = [ (var4,1) for var4 in var3 ]\n\tvar10.extend( [(var4,2) for var4 in var5] )\n\tvar10.sort()\n \n\tvar11 = 0\n\tvar6 = deque(var3)\n\tvar7 = deque(var5)\n\twhile len(var6) > 0:\n\t\tif var6[0] < var7[0]:\n\t\t\tvar7.pop()\n\t\telse:\n\t\t\tvar7.popleft()\n\t\t\tvar11 += 1\n\t\tvar6.popleft()\n \t\t\n\tprint(\"Case #\"+str(var1)+ \": \"+str(var11)+\" \"+str(var8))\n \t\n \n\tvar1 += 1\n\tvar2 = var0.readline()"}
{"author": "xoxie", "index": 40, "filename": "2012_1460488_1483488.py", "code": "import sys\nfrom collections import deque\n \nif __name__ == \"__main__\":\n    var0 = open( \"C-small-attempt0.in.txt\" )\n    var1 = open( \"output_small.txt\", \"w\" )\n \n    var2 = int(var0.readline())\n \n    var3 = 1\n    var4 = var0.readline()\n    while var4 != \"\":\n        var5,var6 = [int(var7) for var7 in var4.split()]\n \n        var8 = [0]*(var6+1)\n        var9 = deque()\n \n        for var7 in range(var5,var6+1):\n            if var8[var7]:\n                continue\n            var10 = str(var7)\n            var11 = deque()\n            var11.append(var7)\n            for var12 in range(1,len(var10)):\n                var13,var14 = var10[:var12],var10[var12:]\n                var15 = int( var14+var13 )\n                if var15 >= var5 and var15 <= var6:\n                    var11.append(var15)\n            var11 = list(set(var11))\n            var11.sort()\n            for var15 in var11:\n                var8[var15] = 1\n            for var12 in range(len(var11)):\n                for var16 in range(var12+1,len(var11)):\n                    var9.append( (var11[var12],var11[var16]) )\n        var1.write( \"Case #%s: %s\n\"%(var3,len(var9)) )\n        var4 = var0.readline()\n        var3 += 1\n    var0.close()\n    var1.close()\n"}
{"author": "oonishi", "index": 41, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: cp932\n \n \nvar0 = iter('''\n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n'''.splitlines(False)[1:])\nimport sys\nvar1 = sys.stdout\n \nsys.setrecursionlimit(1500)\n \nvar0 = iter(open(r'var11-small-attempt2.in').readlines(False))\nvar1 = open('d-small.answer', 'w')\n \n#var0 = iter(open(r'var11-large.in').readlines(False))\n#var1 = open('d-large.answer', 'w')\n \nvar2 = int(next(var0))\n \ndef solve(var3, var4):\n\tif var3 == [] and var4 == []:\n\t\treturn 0\n\tif var4[-1] > var3[-1]:\n\t\treturn solve(var3[:-1], var4[1:])\n\telse:\n\t\treturn solve(var3[:-1], var4[:-1])+1\n \nfor var5 in range(1, var2+1):\n\tvar6 = int(next(var0))\n\tvar3 = sorted(map(float, next(var0).split()), reverse=True)\n\tvar4 = sorted(map(float, next(var0).split()), reverse=True)\n \t\n\t# if var6 == 1:\n\t\t# if var3[0] > var4[0]:\n\t\t\t# print('Case #%d: 1 1'%var5, file=var1)\n\t\t# else:\n\t\t\t# print('Case #%d: 0 0'%var5, file=var1)\n\t\t# continue\n \t\n\tvar7=0\n\tvar8 = 0\n\tfor var9, var10 in enumerate(var3):\n\t\tif var10 < var4[var8]:\n\t\t\tvar8 += 1\n\t\telse:\n\t\t\tvar7 += 1\n \t\n\tvar11 = solve(var3, var4)\n\tprint('Case #%d: %d %d'%(var5, var11, var7), file=var1)\n\t#import pdb;pdb.set_trace()\n \t\n"}
{"author": "oonishi", "index": 41, "filename": "2012_1460488_1483488.py", "code": "# coding: shift-jis\n \nimport sys\n#var0 = file(\"test.in\")\n#var1 = sys.stdout\nvar0 = file(\"C-small-attempt0.in\")\nvar1 = file(\"answer.txt\", \"var1\")\nvar2 = int(var0.readline()[:-1])\nfrom math import log\nfor var3 in range(var2):\n\tvar4, var5 = map(int, var0.readline()[:-1].split())\n \t\n\tvar6 = 0\n\tfor var7 in range(var4, var5):\n\t\tvar8 = int(log(var7, 10))+1\n\t\tvar9 = set()\n\t\tfor var10 in range(1, var8):\n\t\t\tvar11 = 10**var10\n\t\t\tvar12 = (var7 % var11)*10**(var8-var10)\n\t\t\tvar13 = var7 / var11\n\t\t\tif var12+var13>var7 and var12+var13<=var5 and (var7, var12+var13) not in var9:\n\t\t\t\tvar9.add((var7, var12+var13))\n\t\t\t\tvar6 += 1\n \t\t\t\t\n\tprint>>var1, \"Case #%var8:\"%(var3+1), var6\n \n \n"}
{"author": "maxbublis", "index": 42, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"\nGoogle Code Jam 2014 Qualification Problem D\nUsage:\n    python d.py < input.txt > output.txt\n\"\"\"\nimport sys\n \n \ndef memoized(var0):\n    var1 = {}\n    def wrapped(*var2):\n        if not var2 in var1:\n            var1[var2] = var0(*var2)\n        return var1[var2]\n    return wrapped\n \n \n@memoized\ndef play_dwar(var3, var4):\n    if not var3:\n        return 0\n \n    var5 = 0\n \n    for var6 in var3:\n        var7 = tuple(var8 for var8 in var3 if var8 != var6)\n \n        var9 = tuple(var8 for var8 in var4 if var8 > var6)\n        var10 = tuple(var8 for var8 in var4 if var8 < var6)\n \n        if var9 and not var10:\n            var11 = max(var9)\n            var12 = tuple(var8 for var8 in var4 if var8 != var11)\n            var13 = 0 + play_dwar(var7, var12)\n        else:\n            var12 = tuple(var8 for var8 in var4 if var8 != min(var4))\n            var13 = 1 + play_dwar(var7, var12)\n \n        var5 = max(var5, var13)\n \n    return var5\n \n \n@memoized\ndef play_war(var3, var4):\n    if not var3:\n        return 0\n \n    var5 = 0\n \n    for var6 in var3:\n        var7 = tuple(var8 for var8 in var3 if var8 != var6)\n \n        var9 = tuple(var8 for var8 in var4 if var8 > var6)\n \n        if var9:\n            var11 = min(var9)\n            var12 = tuple(var8 for var8 in var4 if var8 != var11)\n            var13 = 0 + play_war(var7, var12)\n        else:\n            var12 = tuple(var8 for var8 in var4 if var8 != min(var4))\n            var13 = 1 + play_war(var7, var12)\n \n        var5 = max(var5, var13)\n \n    return var5\n \n \ndef solve_problem(var3, var4):\n    return play_dwar(var3, var4), play_war(var3, var4)\n \n \nif __name__ == \"__main__\":\n    var14 = int(sys.stdin.readline().strip())\n    for var15 in xrange(1, var14 + 1):\n \n        var16 = int(sys.stdin.readline().strip())\n \n        var3 = tuple(map(float, sys.stdin.readline().strip().split()))\n        var4 = tuple(map(float, sys.stdin.readline().strip().split()))\n \n        print(\"Case #{0}: {1} {2}\".format(var15, *solve_problem(var3, var4)))\n"}
{"author": "maxbublis", "index": 42, "filename": "2012_1460488_1483488.py", "code": "\"\"\"\nGoogle Code Jam 2012 Problem C\nUsage:\n    python problem_c.py < input.txt > output.txt\n\"\"\"\nimport itertools\nimport sys\n \n \ndef is_recycled(var0, var1, var2={}, var5={}, var6={}):\n    if not var0 in var2:\n        var2[var0] = str(var0)\n \n    if not var1 in var2:\n        var2[var1] = str(var1)\n \n    var3 = var2[var0]\n    var4 = var2[var1]\n \n    if not var0 in var5:\n        var5[var0] = sorted(var3)\n \n    if not var1 in var5:\n        var5[var1] = sorted(var4)\n \n    if var5[var0] != var5[var1]:\n        return False\n \n    if not var0 in var6:\n        var6[var0] = len(var3)\n \n    for var7 in xrange(var6[var0] + 1):\n        if var4 == var3[var7:] + var3[:var7]:\n            return True\n \n    return False\n \n \ndef solve_problem():\n    var8 = int(sys.stdin.readline())\n \n    for var7 in xrange(1, var8 + 1):\n        var9 = sys.stdin.readline().strip()\n        var10, var11 = map(int, var9.split())\n        var12 = sum(itertools.imap(lambda (var0, var1): is_recycled(var0, var1),\n                                    itertools.combinations(xrange(var10, var11 + 1), 2)))\n \n        sys.stdout.write('Case #{0}: {1}\n'.format(var7, var12))\n \nif __name__ == '__main__':\n    solve_problem()\n"}
{"author": "ronnodas", "index": 43, "filename": "2014_2974486_5644738749267968.py", "code": "def findmin(var0,var1):\n    for (var2,var3) in enumerate(var0):\n        if var3>var1:\n            return var2\n    return None\n \nvar4 = int(input())\nfor var5 in range(1,var4+1):\n    var6 = int(input())\n    var7 = [float(var3) for var3 in input().split()]\n    var8 = [float(var3) for var3 in input().split()]\n \n    var7.sort()\n    var8.sort()\n    var9 = 0\n \n    var10 = var7[:]\n    var11 = var8[:]\n    while var10:\n        var1 = var11.pop()\n        if var10[-1]>var1:\n            var2 = findmin(var10,var1)\n            var10[var2:var2+1]=[]\n            var9 += 1\n        else:\n            var10[:1] = []\n \n    var12 = 0\n    var13 = var7[:]\n    var14 = var8[:]\n    for var3 in var13:\n        if var14[-1]>var3:\n            var2 = findmin(var14,var3)\n            var14[var2:var2+1]=[]\n        else:\n            var14[:1]=[]\n            var12 += 1\n \n    print(\"Case #\",var5,\": \",var9,' ',var12,sep = '')\n"}
{"author": "ronnodas", "index": 43, "filename": "2012_1460488_1483488.py", "code": "var0=int(input())\nfor var1 in range(var0):\n    var2,var3 = [int(var4) for var4 in input().split()]\n    var5 = 0\n    var6 = [0 for var7 in range(var2,var3+1)]\n    for var8 in range(var2,var3):\n        if var6[var8-var2]:\n            continue\n        var6[var8-var2]=1\n        var9 = set()\n        var10 = str(var8)\n        for var7 in range(len(var10)):\n            var11 = int(var10[var7:]+var10[:var7])\n            if var8<var11<=var3:\n                var6[var11-var2]=1\n                var9.add(var11)\n        var12 = len(var9)\n        var5+= (var12*(var12+1))//2\n    print('Case #',var1+1,': ',var5,sep = '')\n"}
{"author": "taichino", "index": 44, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \nimport sys\nimport copy\n \nvar0 = int(sys.stdin.readline())\n \nfor var0 in range(1, var0+1):\n    var1 = int(sys.stdin.readline())\n    var2 = map(float, sys.stdin.readline().split(' '))\n    var3 = map(float, sys.stdin.readline().split(' '))\n \n    # # War\n    var4 = sorted(copy.deepcopy(var2))\n    var5 = sorted(copy.deepcopy(var3))\n    var6, var7 = (0, 0)\n    for var8 in range(var1):\n        var9 = var4.pop()\n \n        var10 = None\n        for var11 in var5:\n            if var11 > var9:\n                var10 = var11\n                break\n        if not var10:\n            var10 = var5[0]\n        var5.remove(var10)\n \n        if var9 > var10:\n            var6 += 1\n        else:\n            var7 += 1\n     \n    # Deceitful War    \n    var12 = sorted(copy.deepcopy(var2), reverse=True)\n    var13 = sorted(copy.deepcopy(var3))\n    var14, var15 = (0, 0)\n    for var8 in range(var1):\n        var9 = var12.pop()\n        var10 = min(var13)\n        if var10 > var9:\n            var10 = max(var13)\n        var13.remove(var10)            \n        if var9 > var10:\n            var14 += 1\n        else:\n            var15 += 1\n     \n    var16 = '%s %s' % (var14, var6)\n    print('Case #%(var0)s: %(var16)s' % locals())\n"}
{"author": "taichino", "index": 44, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n \nimport sys\n \ndef recycled_numbers(var0):\n    var1 = []\n    var2 = str(var0)\n    for var3 in range(1, len(var2)):\n        var4 = int(var2[var3:] + var2[:var3])\n        if var0 != var4:\n            var1.append(var4)\n    return var1\n \nfor var5, var6 in enumerate(sys.stdin):\n    if var5 == 0:\n        continue\n \n    var7 = []\n    var8 = [int(var9) for var9 in var6.split(' ')]\n    (var10, var11) = var8\n    for var3 in range(var10, var11):\n        var12 = recycled_numbers(var3)\n        for var13 in var12:\n            var14 = (var3, var13)\n            if var14 not in var7 and var10 <= var13 and var13 <= var11 and var3 < var13:\n                var7.append(var14)\n    # print(var7)\n    var15 = len(var7)\n    print('Case #%(var5)s: %(var15)s' % locals())\n"}
{"author": "coconutbig", "index": 45, "filename": "2014_2974486_5644738749267968.py", "code": "def solve_case(var0):\n    var1 = int(raw_input().strip())\n    var2 = sorted([float(var3) for var3 in raw_input().strip().split()])\n    var4 = sorted([float(var3) for var3 in raw_input().strip().split()])\n \n    #print(var2)\n    #print(var4)\n \n    var5, var6 = 0, 0\n    while var6 < var1:\n        if var4[var6] > var2[var5]:\n            var5 += 1\n        var6 += 1\n    var7 = var1 - var5\n \n    var8 = 0\n    while var1 > 0:\n        if var2[0] < var4[0]:\n            var4.pop()\n        else:\n            var8 += 1\n            var4 = var4[1:]\n        var2 = var2[1:]\n        var1 -= 1\n     \n    #var8 = 0\n    #while var1 > 0 and var2[-1] > var4[-1]:\n    #    var8 += 1\n    #    var2.pop()\n    #    var4.pop()\n    #    var1 -= 1\n \n    #k, l = 0, var1 - 1\n    #while k < var1 and l >= 0 and var2[k] < var4[l]:\n    #    l -= 1\n    #    k += 1\n \n    #var8 += var1 - k\n \n    print('Case #%d: %d %d' % (var0, var8, var7,))\n \ndef main():\n    var0 = int(raw_input().strip())\n    for var5 in range(1, var0 + 1):\n        solve_case(var5)\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "coconutbig", "index": 45, "filename": "2012_1460488_1483488.py", "code": "def count_between(var0, var1):\n\tvar2 = 0\n\tfor var3 in range(var0, var1 + 1):\n\t\tvar4 = len(str(var3)) - 1\n\t\tvar5 = [var3,]\n\t\tvar6 = 0\n\t\tvar7 = len(str(var3))\n\t\twhile var6 < var4:\n\t\t\tvar8 = str(var3)\n\t\t\tvar8 = var8[var6 + 1:] + var8[:var6 + 1]\n\t\t\tvar9 = len(var8)\n\t\t\tvar8 = int(var8)\n\t\t\tif var8 not in var5 and var8 > var3 and var8 <= var1 and var8 >= var0 and var7 == var9:\n\t\t\t\tvar5.append(var8)\n\t\t\t\tvar2 +=1\n\t\t\tvar6 += 1\n\treturn var2\n \nvar10 = [0, 36, 801, 12060, 161982, 2023578, 299997,]\n \nvar11 = int(raw_input().strip())\nvar12 = 1\nwhile var12 <= var11:\n\tvar0, var1 = [int(var13) for var13 in raw_input().strip().split()]\n\t#len_a = len(str(var0))\n\t#len_b = len(str(var1))\n\t#result = reduce(lambda var13, y: var13 + y, var10[len_a - 1:len_b -1], 0)\n\t#print(result)\n\t#result -= count_between(pow(10, len_a - 1), var0)\n\t#print(result)\n\t#result += count_between(pow(10, len_b - 1), var1)\n\t#print(result)\n\t#print('Case #%d: %d' % (var12, result,))\n\tprint('Case #%d: %d' % (var12, count_between(var0, var1),))\n\tvar12 += 1\n \n"}
{"author": "kmod", "index": 46, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    var0 = sys.stdin\n    if len(sys.argv) >= 2:\n        var1 = sys.argv[1]\n        if var1 != '-':\n            var0 = open(var1)\n \n    var2 = int(var0.readline())\n    for var3 in xrange(var2):\n        var4 = int(var0.readline())\n        var5 = map(float, var0.readline().split())\n        var6 = map(float, var0.readline().split())\n        assert len(var6) == len(var5) == var4\n \n        var5 = [(var7, 1) for var7 in var5]\n        var6 = [(var7, 0) for var7 in var6]\n \n        var8 = var6 + var5\n        var8.sort(reverse=True)\n        var8 = [var9[1] for var9 in var8]\n        # print(var8)\n \n        var10 = 0\n        var11 = 0\n        for var12 in var8:\n            if var12 == 1:\n                var11 += 1\n                var10 = max(var10, var11)\n            else:\n                var11 -= 1\n \n        var13 = 0\n        var14 = 0\n        for var12 in var8:\n            if var12 == 1:\n                var14 += 1\n            else:\n                if var14:\n                    var14 -= 1\n                    var13 += 1\n        print(\"Case #%d: %d %d\" % (var3+1, var13, var10))\n"}
{"author": "kmod", "index": 46, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    var0 = sys.stdin\n    if len(sys.argv) >= 2:\n        var1 = sys.argv[1]\n        if var1 != '-':\n            var0 = open(var1)\n \n    var2 = int(var0.readline())\n    for var3 in xrange(var2):\n        var4, var5 = map(int, var0.readline().split())\n \n        var6 = 0\n        for var7 in xrange(var4, var5):\n            # print(var7)\n            var8 = set()\n            var9 = str(var7)\n            for var10 in xrange(1, len(var9)):\n                var11 = int(var9[var10:] + var9[:var10])\n                if var7 < var11 <= var5:\n                    var8.add(var11)\n            # print(var8)\n            # print(var6 += len(var8))\n \n        print(\"Case #%d: %d\" % (var3 + 1, var6))\n"}
{"author": "lookingfor", "index": 47, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = int(raw_input())\n \ndef solve(var1, var2):\n    var3 = len(var1)\n    var1.sort()\n    var2.sort()\n    var4 = var5 = var6 = var7 = 0\n    while var4 < var3:\n        if var1[var4] > var2[var5]:\n            var7 += 1\n            var4 += 1\n            var5 += 1\n        else:\n            var4 += 1\n    var4 = var5 = 0\n    while var5 < var3:\n        if var2[var5] > var1[var4]:\n            var6 += 1\n            var4 += 1\n            var5 += 1\n        else:\n            var5 += 1\n    return str(var7) + \" \" + str(var3-var6)\n \nfor var8 in xrange(var0):\n    var3 = int(raw_input())\n    var1 = map(float, raw_input().split())\n    var2 = map(float, raw_input().split())\n    print(\"Case #%d: %s\" % (var8+1, solve(var1, var2)))"}
{"author": "lookingfor", "index": 47, "filename": "2012_1460488_1483488.py", "code": "var0 = int(raw_input())\n \ndef isRecycle(var1, var2, var3):\n    var4 = 10**(var3-1)\n    for var5 in xrange(var10):\n        var2 = var4*(var2%10) + var2/10\n        if var1 == var2:\n            return True\n    return False\n \nfor var6 in xrange(1, var0+1):\n    var7 = 0\n    var8, var9 = map(int, raw_input().split())\n    var10 = len(str(var8))\n    for var5 in xrange(var8, var9):\n        for var11 in xrange(var5+1, var9+1):\n            if isRecycle(var5, var11, var10):\n                var7 += 1\n    print(\"Case #%var3:\" % var6, var7)"}
{"author": "jakab922", "index": 48, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = int(raw_input().strip())\n \nfor var1 in xrange(var0):\n\tvar2 = int(raw_input().strip())\n\tvar3 = sorted(map(float, raw_input().strip().split(' ')))\n\t# print(\"var3: %s\"  % var3)\n\tvar4 = sorted(map(float, raw_input().strip().split(' ')))\n\t# print(\"var4: %s\" % var4)\n \n\tvar5 = var2\n\tvar6 = 0\n\tvar7 = 0\n\twhile var6 < var2 and var7 < var2:\n\t\twhile var7 < var2 and var3[var6] >= var4[var7]:\n\t\t\tvar7 += 1\n\t\tif var7 < var2:\n\t\t\tvar7 += 1\n\t\t\tvar6 += 1\n\t\t\tvar5 -= 1\n \n\tvar8 = var2\n\tvar9 = None\n\tfor var10 in xrange(var2):\n\t\tvar11 = 0\n\t\tvar12 = True\n\t\twhile var10 + var11 < var2:\n\t\t\tif var4[var11] >= var3[var10 + var11]:\n\t\t\t\tvar12 = False\n\t\t\t\tbreak\n\t\t\tvar11 += 1\n\t\tif var12:\n\t\t\tvar9 = var2 - var10\n\t\t\tbreak\n\tif var9 is not None:\n\t\tvar8 = var9\n\telse:\n\t\tvar8 = 0\n \n\tprint(\"Case #%s: %s %s\" % (var1 + 1, var8, var5))\n"}
{"author": "jakab922", "index": 48, "filename": "2012_1460488_1483488.py", "code": "from sys import argv\nfrom math import floor, log10\n \ndef grab2(var0):\n\tif var0 < 2:\n\t\treturn 0\n\treturn var0 * (var0 - 1) / 2\n \ndef solve(var1, var2):\n\tvar3 = [0 for var4 in range(var1, var2 + 1)]\n\tvar5 = 0\n \n\tfor var4 in xrange(var1, var2 + 1):\n\t\tif var3[var4 - var1] == 0:\n\t\t\tvar3[var4 - var1] = 1\n\t\t\tvar6 = set([var4])\n \t\t\t\n\t\t\tif var14[var4] != []:\n\t\t\t\tfor var7 in var14[var4]:\n\t\t\t\t\tif var7 >= var1 and var7 <= var2:\n\t\t\t\t\t\tvar3[var7 - var1] = 1\n\t\t\t\t\t\tvar6.add(var7)\n\t\t\telse:\n\t\t\t\tvar12 = var4\n\t\t\t\tvar8 = int(floor(log10(var4)))\n\t\t\t\tvar9 = pow(10, var8)\n\t\t\t\tvar10 = set(list(var6))\n\t\t\t\tfor var4 in range(var8):\n\t\t\t\t\tvar11 = var12 % 10\n\t\t\t\t\tvar12 = var9 * var11 + (var12 - (var12 % 10)) / 10\n\t\t\t\t\tif var11 != 0 and var12 not in var6 and var12 >= var1 and var12 <= var2:\n\t\t\t\t\t\tvar6.add(var12)\n\t\t\t\t\t\tvar3[var12 - var1] = 1\n\t\t\t\t\tif var11 != 0 and var12 < var18 and var12 not in var10:\n\t\t\t\t\t\tvar10.add(var12)\n \n\t\t\t\tfor var13 in var10:\n\t\t\t\t\tvar14[var13] = list(var10)\n \n\t\t\tvar5 += grab2(len(var6))\n \n \n\treturn var5\n \nvar15 = open(argv[1], 'r')\nvar16 = int(var15.readline().strip('\n'))\nvar17 = 2000000\nvar18 = 1\nvar19 = []\nfor var4 in range(var16):\n\tvar19.append(map(int, var15.readline().strip('\n').split(' ')))\n\tif var19[-1][1] > var18:\n\t\tvar18 = var19[-1][1]\n \nvar14 = [[] for var4 in range(var18 + 2)]\n \nvar4 = 1\nfor var0 in var19:\n\tprint(\"Case #%s: %s\" % (var4, solve(var0[0],var0[1])))\n\tvar4 += 1"}
{"author": "gizzywump", "index": 49, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nimport collections\n \nimport math\nimport re\nimport sys\n \n#sys.setrecursionlimit(50)\n \nvar0 = \"tiny\"\nvar0 = \"D-small-attempt0.in\"\n#var0 = \"D-large.in\"\n \ndef debug(*args):\n    return\n    sys.stderr.write(str(args) + \"\n\")\n \nclass Memoize:\n    def __init__(var1,var2):\n        var1.var3 = {}\n        var1.var4 = var2\n             \n    def __call__(var1, *args, **kwds):\n        var5 = var1.var3\n        var6 = var1._getKey(*args,**kwds)\n        try: return var5[var6]\n        except KeyError:\n            var7 = var5[var6] = var1.var4(*args,**kwds)\n            return var7\n     \n    def _getKey(var1,*args,**kwds):\n        return kwds and (args, ImmutableDict(kwds)) or args    \n \ndef war_wins(var8, var9):\n    var10 = 0\n    debug(var8, var9)\n    #import pdb; pdb.set_trace()\n    while 1:\n        if len(var8) == 0:\n            return var10\n        var8,var11 = var8[:-1], var8[-1]\n        if var11 > var9[-1]:\n            var10 += 1\n            var9 = var9[1:]\n            continue\n        for var12, var13 in enumerate(var9):\n            if var13 > var11:\n                break\n        var9 = var9[:var12] + var9[var12+1:]\n \ndef dwar_wins(var8, var9):\n    var10 = 0\n    while 1:\n        if len(var8) == 0:\n            return var10\n        var11, var8 = var8[0], var8[1:]\n        if var11 > var9[0]:\n            var10 += 1\n            var9 = var9[1:]\n        else:\n            var9 = var9[:-1]\n \n \ndef do_trial(var8, var9):\n    var8.sort()\n    var9.sort()\n    var14 = dwar_wins(var8, var9)\n    var15 = war_wins(var8, var9)\n    return \"%d %d\" % (var14, var15)\n \nvar16 = file(var0)\nvar17 = int(var16.readline()[:-1])\nfor var18 in range(var17):\n    var16.readline()\n    var8 = [float(var19) for var19 in var16.readline().split()]\n    var9 = [float(var19) for var19 in var16.readline().split()]\n    var13 = do_trial(var8, var9)\n    print(\"Case #%d: %s\" % (var18+1, var13))\n"}
{"author": "gizzywump", "index": 49, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nimport pdb\nimport re\nimport sys\n \nvar0 = \"tiny\"\n \nvar0 = \"C-small-attempt0.in.txt\"\n \ndef debug(*args):\n    pass #print(str(args))\n \nif 0:\n    def debug(*args):\n        sys.stderr(''.join(str(var1) for var1 in args) + \"\n\")\n \ndef recycleables(var2, var3, var4):\n    var5 = set()\n    var1 = str(var2)\n    for var6 in range(len(var1)):\n        var7 = int(var1[var6:] + var1[:var6])\n        if var3 <= var7 <= var4:\n            var5.add(var7)\n    return var5\n \ndef do_trial(var3, var4):\n    var8 = 0\n    var9 = set()\n    for var6 in xrange(var3, var4+1):\n        if var6 not in var9:\n            var5 = recycleables(var6, var3, var4)\n            var10 = len(var5)\n            var8 += var10 * (var10-1) / 2\n            var9.update(var5)\n    return var8\n \nvar11 = file(var0)\nvar12 = int(var11.readline()[:-1])\nfor var6 in range(var12):\n    var3, var4 = [int(var13) for var13 in var11.readline()[:-1].split()]\n    var14 = do_trial(var3, var4)\n    print(\"Case #%d: %var1\" % (var6+1, var14))\n"}
{"author": "chevaliermalfet", "index": 50, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = open('D-small-attempt0.in', 'r')\nvar1 = var0.readlines()\nvar0.close()\n \nvar2 = open('D-small-attempt0.out', 'w')\n \nvar3 = int(var1[0])\n \ndef scoreWar(var4, var5):\n    var6 = 0\n    var7 = 0\n    while var6 < len(var4):\n        var8 = var4[var6]\n        while var7 < len(var5) and var5[var7] < var8:\n            var7 += 1\n        if var7 == len(var5):\n            break\n        var6 += 1\n        var7 += 1\n    return len(var4) - var6\n \ndef scoreDeceit(var4, var5):\n    var6 = 0\n    var7 = 0\n    while var7 < len(var5):\n        var9 = var5[var7]\n        while var6 < len(var4) and var4[var6] < var9:\n            var6 += 1\n        if var6 == len(var4):\n            break\n        var6 += 1\n        var7 += 1\n    return var7\n \nfor var10 in range(1, var3+1):\n    var4 = map(lambda x: float(x), var1[3*var10-1].split())\n    var5 = map(lambda x: float(x), var1[3*var10].split())\n    var4.sort()\n    var5.sort()\n    var11 = scoreDeceit(var4, var5)\n    var12 = scoreWar(var4, var5)\n    var2.write('Case #'+str(var10)+': ' + str(var11) + ' ' + str(var12) + '\n')\n \nvar2.close()\n"}
{"author": "chevaliermalfet", "index": 50, "filename": "2012_1460488_1483488.py", "code": "var0 = open(\"C-small-attempt0.in\", 'r')\nvar1 = open(\"recycleOut.txt\", 'w')\nvar2 = int(var0.readline())\n \ndef countRecycle(var3,var4):\n    var5 = 0\n    for var6 in range(var3,var4):\n        for var7 in range(var6+1,var4+1):\n            var8 = str(var6)\n            var9 = False\n            for var10 in range(len(var8)):\n                if var8[var10:] + var8[0:var10] == str(var7):\n                    var9 = True\n                    break\n            if var9:\n                var5 += 1\n    return var5\n \nfor var11 in range(var2):\n    var12 = var0.readline().split()\n    var3 = int(var12[0])\n    var4 = int(var12[1])\n    var1.write('Case #' + str(var11+1) + ': ' + str(countRecycle(var3,var4)) + '\n')\n \nvar0.close()\nvar1.close()\n"}
{"author": "amv", "index": 51, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\nimport sys,os\nimport numpy as np\n \n \ndef Solve(var0,var1,var2):\n    var1.sort(reverse=True)\n    var2.sort(reverse=True)\n    var3=0\n    var4,var5=0,0\n    while var4<var0 and var5<var0:\n        if var1[var4]>var2[var5]:\n            var3+=1\n            var4+=1\n            var5+=1\n        else:\n            var5+=1\n \n    var6=0\n    var4,var5=0,0\n    while var4<var0 and var5<var0:\n        if var1[var4]<var2[var5]:\n            var6+=1\n            var4+=1\n            var5+=1\n        else:\n            var4+=1\n \n    var6=var0-var6\n    return '%d %d'%(var3,var6)\n \n \n \ndef parse(var7):\n    var0=int(var7.readline().strip())\n    var1=map(float, var7.readline().split() )\n    var2=map(float, var7.readline().split() )\n    return var0,var1,var2\n \n \n \nclass GCJ_Parser( object ):\n    def __init__(var8,var9):\n        var8.var7=open(var9,'r')\n        var8.var10=int(var8.var7.readline().strip() )\n        var8.var11=0\n \n    def __iter__(var8): return var8\n \n    def next(var8):\n        if var8.var11==var8.var10: raise StopIteration\n        var8.var11 += 1\n        var12=parse(var8.var7)\n        return var8.var11 , var12\n \n \ndef runmain():\n    var13=GCJ_Parser(sys.argv[1])\n \n    #Open output file, but don't overwrite old ones (for comparison)\n    var14=sys.argv[1].rstrip('.in')+'.out'\n    if os.path.isfile(var14):\n        var15=var14+'.old'\n        var16=0\n        while os.path.isfile(var15):\n            var16+=1\n            var15=var14+'.old'+str(var16)\n        os.rename(var14,var15)\n        print ('Rename: %s -> %s'%(var14,var15))\n  \n    var17=open(var14,'w')\n \n    for var18, var12 in var13:\n        var19=Solve(*var12)\n \n        print ('Case #'+str(var18)+':',var19)\n        print >> var17, 'Case #'+str(var18)+':',var19\n \n \n \n \nif __name__=='__main__':\n    runmain()\n"}
{"author": "amv", "index": 51, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\nimport sys\nimport numpy as np\n \nvar0=open(sys.argv[1],'r')\n \nvar1=int(var0.readline())\n \nfor var2 in xrange(var1):\n \n    var3,var4=[int(var5) for var5 in var0.readline().split()]\n \n \n#for var2 in xrange(1):\n#    var3,var4=[int(var5) for var5 in sys.argv[1:]]\n    var6=[int(var5) for var5 in str(var3) ]\n    var7=[int(var5) for var5 in str(var4) ]\n \n    var8=len(var6)\n \n#    print(var6,var7)\n \n    var9=0\n#    lowers={}\n \n    for var10 in xrange(var3,var4+1):\n        var11=str(var10)\n        var12=set()\n        for var5 in xrange(1,var8):\n            var11=var11[1:]+var11[0]\n            var13=int(var11)\n            if var13>var10 and var13<=var4 and var13 not in var12:\n                var9+=1\n                #print(var10,var13)\n                #if lowers.has_key(var13):\n                #    lowers[var13].append(var10)\n                #else: lowers[var13]=[var10]\n \n            var12.add(var13)\n             \n         \n \n \n#    for k,v in lowers.iteritems(): print(k,':',v)\n    print('Case #'+str(var2+1)+':',var9)\n \n"}
{"author": "yordan", "index": 52, "filename": "2014_2974486_5644738749267968.py", "code": "import copy\nimport sys\n \n \ndef var14(var0, var1):\n\tvar2 = list(filter(lambda b: b > var0, var1))\n\tif var2:\n\t\tvar3 = min(var2)\n\telse:\n\t\tvar3 = min(var1)\n\tvar1.remove(var3)\n\treturn var3\n \n \ndef remove_lightest(var4):\n\tvar5 = sorted(var4)[0]\n\tvar4.remove(var5)\n\treturn var5\n \n \ndef remove_heaviest(var4):\n\tvar6 = sorted(var4)[-1]\n\tvar4.remove(var6)\n\treturn var6\n \n \ndef dwar(var7, var1):\n\tvar8 = 0\n\tvar1 = copy.copy(var1)\n\tfor var9 in sorted(var7):\n\t\tif any(map(lambda x: x < var9, var1)):\n\t\t\t# Ken got a lighter var9\n\t\t\tvar8 += 1\n\t\t\tremove_lightest(var1)\n \n\t\telif any(map(lambda x: x > var9, var1)):\n\t\t\t# Ken got a var2 var9\n\t\t\tremove_heaviest(var1)\n\treturn var8\n \n \ndef war(var7, var1):\n\tvar8 = 0\n\tvar1 = copy.copy(var1)\n\tfor var9 in var7:\n\t\tvar10 = var14(var9, var1)\n\t\tif var9 > var10:\n\t\t\tvar8 += 1\n\treturn var8\n \n \ndef read_case(f):\n\tvar11 = int(f.readline())\n\tvar7 = list(map(float, f.readline().split()))\n\tvar1 = list(map(float, f.readline().split()))\n\treturn var11, var7, var1\n \n \ndef solve(n, var10):\n\treturn '{} {}'.format(dwar(n, var10), war(n, var10))\n \n \ndef main():\n\tvar12 = sys.argv[1]\n\twith open(var12, encoding='utf-8') as f:\n\t\tncases = int(f.readline())\n\t\tfor case in range(1, ncases + 1):\n\t\t\tvar11, var13, var14 = read_case(f)\n\t\t\tsolution = solve(var13, var14)\n\t\t\tprint('Case #{}: {}'.format(case, solution))\n \n \nif __name__ == '__main__':\n\tmain()"}
{"author": "yordan", "index": 52, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n \ndef rotate(var0, var1):\n    var2 = str(var0)\n    var2 = var2[-var1:] + var2[:-var1]\n    return int(var2)\n \ndef pairs(var3, var4):\n    for var5 in range(var3, var4 + 1):\n        for var0 in range(1, len(str(var5))):\n            var6 = rotate(var5, var0)\n            if var5 >= var6 or var6 > var4: continue\n            yield var5, var6\n \ndef main():\n    import sys\n    with open(sys.argv[1], 'r') as f:\n        f.readline()\n        var5 = 0\n        for var7 in f:\n            var5 += 1\n \n            var3, var4 = [int(var8) for var8 in var7.split(' ')]\n            var9 = set()\n            for var10 in pairs(var3, var4):\n                var9.add(var10)\n            print('Case #%d: %d' % (var5, len(var9)))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "rmmh", "index": 53, "filename": "2014_2974486_5644738749267968.py", "code": "import var0\nif len(var0.argv) == 1:\n    var0.var1 = open(\"D.in\")\nelse:\n    var0.var1 = open(var0.argv[1])\n \ndef to_floats(var2):\n    return map(float, var2.split())\n \ndef get_floats():\n    return to_floats(raw_input())\n \nvar3 = input()\n \n# Ken strategy: pick smallest block larger than\n#     claimed one, else use smallest block\n \ndef cheat(var4, var5):\n    # Cheat strategy: eliminate opponents\n    # largest blocks with var12 smallest, until all var12\n    # blocks are larger than corresponding\n    var6 = len(var4)\n    var7 = 0\n    while any(var4[var8+var7] < var5[var8] for var8 in xrange(0, var6 - var7)):\n        var7 += 1\n    return var6 - var7\n \ndef fair(var4, var5):\n    # Our strategy: use blocks smallest to largest\n    var9 = 0\n    var10, var11 = 0, len(var5)-1\n    for var12 in var4:\n        for var13, var14 in enumerate(var5):\n            if var14 > var12:\n                var5.pop(var13)\n                break\n        else:\n            var9 += 1\n            var5.pop(0)\n    return var9\n \nfor var15 in xrange(1, var3 + 1):\n    var6, = get_floats()\n    var4 = sorted(get_floats())\n    var5 = sorted(get_floats())\n \n    var16 = cheat(var4, var5)\n    var17 = fair(var4, var5)\n \n    print(\"Case #%d: %d %d\" % (var15, var16, var17))\n"}
{"author": "rmmh", "index": 53, "filename": "2012_1460488_1483488.py", "code": "var0 = input()\n \nfor var1 in xrange(1, var0 + 1):\n    var2, var3 = map(int, raw_input().split())\n \n    var4 = 0\n    var5 = 10 ** (len(str(var2)) - 1)\n    for var6 in xrange(var2, var3):\n        var7 = str(var6)\n        var8 = var6\n        while True:\n            var8 = (var8 / 10) + (var8 % 10 * var5)\n            if var6 < var8 <= var3:\n                var4 += 1\n            if var8 == var6:\n                break\n \n    print(\"Case #%d: %var7\" % (var1, var4))\n"}
{"author": "rajabaz", "index": 54, "filename": "2014_2974486_5644738749267968.py", "code": "def solve(var0, var1):\n    var2 = list(sorted(var0))\n    var3 = list(sorted(var1))\n    var4 = 0\n    while len(var2) > 0:\n        if var2[0] > var3[0]:\n            var4 += 1\n            var2.pop(0)\n            var3.pop(0)\n        else:\n            var2.pop(0)\n            var3.pop(-1)\n    var5 = 0\n    var2 = list(sorted(var0))\n    var3 = list(sorted(var1))\n    while len(var2) > 0:\n        var6 = var2.pop(0)\n        if var6 < var3[0]:\n            var3.pop(0)\n        else:\n            var7 = None\n            for var8,var9 in enumerate(var3):\n                if var9 > var6:\n                    var7 = var8\n                    break\n            if var7 is not None:\n                var3.pop(var7)\n            else:\n                var3.pop(0)\n                var5 += 1\n    return var4,var5\n \nif __name__==\"__main__\":\n    var10 = int(raw_input())\n    for var8 in range(1,var10+1):\n        raw_input()\n        var0 = map(float, raw_input().split())\n        var1 = map(float, raw_input().split())\n        var11,var12 = solve(var0,var1)\n        print(\"Case #%d: %d %d\" %(var8,var11,var12))\n"}
{"author": "rajabaz", "index": 54, "filename": "2012_1460488_1483488.py", "code": "def num_rotations(var0, var1, var2):\n    # I'm sure there'var3 var4 better way to do this\n    # but this works fast enough so who cares\n    var3 = str(var0)\n    var4 = set()\n    for var5 in range(len(var3)):\n        var6 = var3[var5:] + var3[:var5]\n        var7 = int(var6)\n        if var6[0] != '0' and var1 <= var7 <= var2:\n            var4.add(var6)\n    return len(var4) -1\n \ndef solve(var1,var2):\n    var8  = 0\n    for var5 in range(var1, var2+1):\n        var8 += num_rotations(var5, var1, var2)\n    if var8 % 2 != 0:\n        print(\"WTF\", var1, var2, var8)\n    return var8//2\n \nif __name__ == \"__main__\":\n    var9 = int(raw_input())\n    for var5 in range(1, var9+1):\n        var1,var2 = map(int, raw_input().strip().split())\n        print(\"Case #%d: %d\" % (var5, solve(var1,var2)))\n"}
{"author": "royf", "index": 55, "filename": "2014_2974486_5644738749267968.py", "code": "\nimport math\nimport itertools\nimport numpy as NP\n \ndef read_word(var0):\n    return next(var0).strip()\n \ndef read_int(var0, var1=10):\n    return int(read_word(var0), var1)\n \ndef read_letters(var0):\n    return list(read_word(var0))\n \ndef read_digits(var0, var1=10):\n    return [int(var2, var1) for var2 in read_letters(var0)]\n \ndef read_words(var0, var3=' '):\n    return read_word(var0).split(var3)\n \ndef read_ints(var0, var1=10, var3=' '):\n    return [int(var2, var1) for var2 in read_words(var0, var3)]\n \ndef read_floats(var0, var3=' '):\n    return [float(var2) for var2 in read_words(var0, var3)]\n \ndef read_arr(var0, var4, var5=read_ints, *args, **kwargs):\n    return [var5(var0, *args, **kwargs) for var6 in range(var4)]\n \ndef solve(var7, var8, var9=None):\n    var10 = var8 + '.in'\n    if var9 is None:\n        var9 = var8 + '.out'\n    with open(var10, 'r') as fi:\n        with open(var9, 'w') as fo:\n            var11 = read_int(fi)\n            for var6 in range(var11):\n                var12 = read_case(fi)\n                var13 = var7(var12)\n                write_case(fo, var6, var13)\n \n################################################################################\n \ndef read_case(var0):\n    var14 = read_int(var0)\n    var15 = read_floats(var0)\n    var16 = read_floats(var0)\n    return (var14, var15, var16)\n \ndef write_case(var0, var6, var13):\n    var0.write('Case #%var3: '%var6)\n    var0.write('%var3 %var3'%var13)\n    var0.write('\n')\n \n################################################################################\n \ndef solve_small(var12):\n    (var14, var15, var16) = var12\n    var15 = sorted(var15)\n    var16 = sorted(var16)\n    var17 = 0\n    var6 = 0\n    for var18 in range(var14):\n        while var6 < var14 and var15[var6] < var16[var18]:\n            var6 += 1\n        if var6 < var14:\n            var17 += 1\n            var6 += 1\n    var19 = var14\n    var18 = 0\n    for var6 in range(var14):\n        while var18 < var14 and var15[var6] > var16[var18]:\n            var18 += 1\n        if var18 < var14:\n            var19 -= 1\n            var18 += 1\n    return (var17, var19)\n \ndef solve_large(var12):\n    return solve_small(var12)\n \nvar20 = 'var6'\n \nfrom run import *\n"}
{"author": "royf", "index": 55, "filename": "2012_1460488_1483488.py", "code": "\nimport sys\nimport os\nimport itertools\nimport math\nimport numpy\n \nvar0 = sys.argv[0]\nvar1 = os.path.dirname(var0)\nvar2 = os.path.basename(var1)\n \ndef var33(var3, var4=0):\n    var5 = sys._getframe(var4+1)\n    var6 = 0\n    if 'depth' in var5.f_locals:\n        var6 = var5.f_locals['depth']\n    print(' '*var6 + var3 + ' = ' + repr(eval(var3, var5.f_globals, var5.f_locals)))\n \ndef perr(var3, var4=0):\n    var5 = sys._getframe(var4+1)\n    var6 = 0\n    if 'depth' in var5.f_locals:\n        var6 = var5.f_locals['depth']\n    ERR_FILE.write(' '*var6 + '%var3 = %var3\n'%(var3, repr(eval(var3, var5.f_globals, var5.f_locals))))\n \ndef argmin(var5, var3=None):\n    var7 = var5\n    if var3 is None:\n        var3 = range(len(var7))\n        var5 = lambda var14: var7[var14]\n    var8 = None\n    for var9 in var3:\n        var10 = var5(var9)\n        if var8 is None or var11 > var10:\n            var11 = var10\n            var8 = var9\n    return var8\n \ndef argmax(var5, var3=None):\n    var7 = var5\n    if var3 is None:\n        var3 = range(len(var7))\n        var5 = lambda var14: var7[var14]\n    var8 = None\n    for var9 in var3:\n        var10 = var5(var9)\n        if var8 is None or var11 < var10:\n            var11 = var10\n            var8 = var9\n    return var8\n \ndef read_word(var5):\n    return next(var5).strip()\n \ndef read_int(var5, var12=10):\n    return int(read_word(var5), var12)\n \ndef read_words(var5, var6=' '):\n    return read_word(var5).split(var6)\n \ndef read_ints(var5, var12=10, var6=' '):\n    return [int(var9, var12) for var9 in read_words(var5, var6)]\n \ndef read_word_arr(var5, var13):\n    var8 = []\n    for var14 in range(var13):\n        var8.var23(read_word(var5))\n    return var8\n \ndef read_ints_arr(var5, var13, var15=int, *args, **kwargs):\n    var8 = []\n    for var14 in range(var13):\n        var8.var23(read_ints(var5, *args, **kwargs))\n    return numpy.array(var8, var15)\n \ndef solve(var16, var17, var18=0, var19=None, var20=None):\n    global ERR_FILE\n    var21 = var17 + '.in'\n    if var20 is None:\n        var20 = var17 + '.out'\n    var22 = var17 + '.err'\n    if var18 == 0:\n        var23 = True\n        if os.path.exists(var20):\n            with open(var20, 'r') as var5:\n                for var24 in var5:\n                    if var24[:6] == 'Case #':\n                        var18 = int(var24[6:var24.index(':')])+1\n    else:\n        var23 = False\n    with open(var21, 'r') as fi:\n        with open(var20, 'var7' if var23 else 'w') as fo:\n            with open(var22, 'w') as ERR_FILE:\n                var25 = read_int(fi)\n                for var14 in range(var25):\n                    var26 = read_case(fi)\n                    if var14+1 < var18:\n                        continue\n                    print('Case #%var6 of %var6'%(var14+1, var25))\n                    ERR_FILE.write('Case #%var6 of %var6\n'%(var14+1, var25))\n                    perr('var26')\n                    var8 = var16(var26)\n                    perr('var8')\n                    write_case(fo, var14, var8)\n                    fo.flush()\n                    if var19 is not None and var14+1 == var19:\n                        break\n \ndef test(var18=1, var19=None):\n    var17 = os.path.join(var1, 'test')\n    solve(solve_small, var17, var18, var19)\n \ndef small(var18=1, var19=None):\n    var17 = os.path.join(var1, '%var3-small-attempt0'%var2)\n    solve(solve_small, var17, var18, var19)\n \ndef small2(var18=1, var19=None):\n    var17 = os.path.join(var1, '%var3-small-attempt0'%var2)\n    solve(var32, var17, var18, var19, var17 + '2.out')\n \ndef large(var18=0, var19=None):\n    var17 = os.path.join(var1, '%var3-large-attempt0'%var2)\n    solve(var32, var17, var18, var19)\n \n################################################################################\n \ndef read_case(var5):\n    (var27, var28) = read_ints(var5)\n    return (var27, var28)\n \ndef write_case(var5, var14, var8):\n    var5.write('Case #%var6: '%(var14+1))\n    var5.write('%var3'%var8)\n    var5.write('\n')\n \nvar29 = 'NO SOLUTION'\n \ndef aux(var30, var7, var12):\n    var8 = 0\n    var3 = set()\n    for var14 in range(1, len(var30)):\n        var31 = var30[var14:]+var30[:var14]\n        if var31 > var30 and var31 >= var7 and var31 <= var12 and var31 not in var3:\n            var8 += 1\n            var3.add(var31)\n    return var8\n \ndef solve_small(var26):\n    (var27, var28) = var26\n    var7 = str(var27)\n    var12 = str(var28)\n    var8 = 0\n    for var30 in range(var27, var28+1):\n        var8 += aux(str(var30), var7, var12)\n    return var8\n \nvar32 = solve_small\n \n##perr = var33\n##var33 = lambda var3: None\nvar33 = perr\n"}
{"author": "cheilman", "index": 56, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\n \nimport puzutils\n \nclass War_2014_QD(puzutils.CodeJamProblem):\n    def __init__(var0, var1):\n        puzutils.CodeJamProblem.__init__(var0, var1)\n    \n        var0.var2 = None\n    \n    def load(var0):\n        \"\"\"\n        input:\n    \n        var2 (number of var9 cases)\n    \n        var5 (number of blocks)\n        N1 N2 N3 ... (mass of Naomi's blocks, real)\n        K1 K2 K3 ... (mass of Ken's blocks, real)\n    \n        \"\"\"\n    \n        var0.var3 = []\n    \n        with open(var0.var1, \"rt\") as file:\n            var0.var2 = int(file.readline().strip())\n    \n        for var4 in xrange(var0.var2):\n            var5 = int(file.readline().strip())\n            var6 = [float(var7) for var7 in file.readline().split(' ')]\n            var8 = [float(var7) for var7 in file.readline().split(' ')]\n    \n            var9 = {'var5': var5, 'Naomi': var6, 'Ken': var8}\n    \n            var0.var3.append(var9)\n    \n        return True\n    \n    def playWar(var0, var6, var8):\n        \"\"\"\n        How many points does var6 get when playing standard War?\n        \"\"\"\n    \n        if (len(var6) <= 0):\n            return 0\n    \n        # Just choose the biggest?\n        var10 = max(var6)\n    \n        # Can var8 win?\n        var11 = max(var8)\n    \n        if var11 > var10:\n            # Ken uses the smallest one that will beat her\n            var12 = min([var7 for var7 in var8 if var7 > var10])\n        \n            #print \"Ken wins (%.3f > %.3f), max %.3f\" % (var12, var10, var11)\n        \n            var6.remove(var10)\n            var8.remove(var12)\n        \n            return 0 + var0.playWar(var6, var8)\n        else:\n            # Ken loses his smallest\n            var12 = min(var8)\n        \n            #print \"Ken loses (%.3f < %.3f), max %.3f\" % (var12, var10, var11)\n        \n            var6.remove(var10)\n            var8.remove(var12)\n        \n            return 1 + var0.playWar(var6, var8)\n    \n    def playDWar(var0, var6, var8):\n        \"\"\"\n        How many points does var6 get when playing decietful var16?\n        \"\"\"\n    \n        if (len(var6) <= 0):\n            return 0\n    \n        var13 = min(var6)\n        var14 = min(var8)\n        var11 = max(var8)\n    \n        if (var13 < var14):\n        # This is a guaranteed loser, take a big one down with it\n            var6.remove(var13)\n            var8.remove(var11)\n            return 0 + var0.playDWar(var6, var8)\n    \n        # Use our smallest one to beat his smallest one, by lying and\n        # saying ours is bigger than his biggest\n        var6.remove(var13)\n        var8.remove(var14)\n        return 1 + var0.playDWar(var6, var8)\n    \n    def executeTest(var0, var9):\n        \"\"\"\n        Run a var9 and return output.\n        \"\"\"\n    \n        var15 = var0.playDWar(list(var9['Naomi']), list(var9['Ken']))\n        var16 = var0.playWar(list(var9['Naomi']), list(var9['Ken']))\n        return \"%d %d\" % (var15, var16)\n \nwith War_2014_QD(sys.argv[1]) as problem:\n    problem.load()\n \nproblem.run()\n"}
{"author": "cheilman", "index": 56, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \ndef readfile(var0):\n\t\"\"\"\n\tThe first var6 of the input gives the number of var10 cases,\n\tvar3. var3 var10 cases follow. Each var10 case consists of a single var6\n\tcontaining the integers var8 and var9.\n\t\"\"\"\n \n\tvar1 = open(var0, \"rt\")\n \n\tvar2 = {}\n \n\tvar3 = int(var1.readline().strip())\n\tvar2['var3'] = var3\n \n\tvar4 = []\n \n\tfor var5 in xrange(var3):\n\t\tvar6 = var1.readline().strip()\n \n\t\tvar7 = var6.split(\" \")\n \n\t\tvar8 = int(var7[0])\n\t\tvar9 = int(var7[1])\n \n\t\tvar10 = {'var8' : var8, 'var9' : var9}\n \n\t\tvar4 = var4 + [var10, ]\n \n\tvar2['var4'] = var4\n \n\treturn var2\n \ndef isrecycled(var11, var12):\n\tif (len(var11) != len(var12)):\n\t\treturn False\n \n\tfor var5 in range(len(var11)):\n\t\tvar13 = var11[:var5]\n\t\tvar14 = var11[var5:]\n \n\t\tvar15 = var14 + var13\n \n\t\tif (var15 == var12):\n\t\t\treturn True\n \n\treturn False\n \ndef process(var10):\n\tvar16 = 0\n \n\tvar8 = var10['var8']\n\tvar9 = var10['var9']\n \n\tfor var11 in xrange(var8, var9):\n\t\tfor var12 in xrange(var11 + 1, var9):\n\t\t\tif (isrecycled(str(var11), str(var12))):\n\t\t\t\tvar16 = var16 + 1\n \n\treturn var16\n \ndef process2(var10):\n\tvar16 = 0\n \n\tvar8 = var10['var8']\n\tvar9 = var10['var9']\n \n\tfor var11 in xrange(var8, var9):\n\t\tvar17 = str(var11)\n \n\t\tvar18 = set()\n \n\t\tfor var5 in xrange(len(var17)):\n\t\t\tvar13 = var17[:var5]\n\t\t\tvar14 = var17[var5:]\n \n\t\t\tvar15 = var14 + var13\n\t\t\tvar19 = int(var15)\n \n\t\t\tif ((var19 > var11) and (var19 <= var9)):\n\t\t\t\tif (not var19 in var18):\n\t\t\t\t\tvar16 = var16 + 1\n\t\t\t\t\tvar18.add(var19)\n \n\treturn var16\n \nvar20 = readfile(\"C-small-attempt0.in\")\n \nfor var5 in xrange(var20['var3']):\n\tvar10 = var20['var4'][var5]\n \n\tvar21 = process2(var10)\n \n\tprint(\"Case #%d: %d\" % (var5 + 1, var21))\n"}
{"author": "elmoatasem", "index": 57, "filename": "2014_2974486_5644738749267968.py", "code": "'''\nCreated on Apr 11, 2014\n \n@author: mostasem\n'''\ndef solveWar(var0, var1):\n    var2 = 0\n    while(len(var0) != 0):\n        var3 = max(var0)\n        var4 = max(var1)\n        var5 = min(var1)\n        if(var3 > var4):\n            var2 += 1\n            var0.remove(var3)\n            var1.remove(var5)\n        else:\n            var0.remove(var3)\n            var1.remove(var4)\n    return var2\n \n \ndef getKeyWithMaxValue(var6):\n  \n    var7 = var6.var7()\n    var8 = 0.0\n    var9 = 10000000000000000\n    for var10 in range(len(var7)): \n        if(var9 > var6.get(var7[var10])):\n            var9 = var6.get(var7[var10])\n            var8 = var7[var10]\n        elif(var9 == var6.get(var7[var10])):\n            if(var8 > var7 [var10]):\n                var8 = var7[var10]\n             \n    return var8\n \n         \ndef updateWeights(var0, var1):  \n    var11 = {}     \n    for var10 in range(len(var0)):\n        if(var11.get(var0[var10]) == None):\n                var11[var0[var10]] = 0\n        for var12 in range(len(var1)):\n            if(var0[var10] > var1 [var12]):\n                    var11[var0[var10]] += 1\n    return var11\n \n \ndef checkIFAllBigger(var11,var1):\n    var13 = len(var1)\n    var14 = True\n    var15 = list(var11.var15());\n    for var10 in range(var13):\n        var16 = False\n        for var12 in range(len(var15)):\n            if(var15 [var12] >= var13 - var10):\n                #print var15\n                var15.remove(var15[var12])\n                var16 = True\n                break\n        if(not var16):\n            var14 = False\n            break\n    return var14\n \ndef solveDecitfulWar(var0, var1):\n    var2 = 0\n    var11 = updateWeights(var0, var1)\n    while(len(var0) != 0):\n        #print var11\n        #print \"var1\",len(var1)\n        if(checkIFAllBigger(var11,var1)):\n            var2 += len(var1)\n            break\n        var17 = getKeyWithMaxValue(var11)\n        print (var17)\n        var4 = max(var1)\n        var5 = min(var1)\n        if(var17 > var4):\n            var2 += 1\n            var0.remove(var17)\n            var11[var17] = 10000000000000000\n            var1.remove(var5)\n        else:\n            var0.remove(var17)\n            var11[var17] = 10000000000000000\n            var1.remove(var4)\n        var11 = updateWeights(var0, var1)\n         \n    return var2\n \n \n  \nvar18 = open('D.in',\"r\")\nvar19=int(var18.readline().strip()) \nvar20 = open(\"D.out\", \"w\")\nvar21 = \"\"\nfor var10 in range(var19):\n    var22 = int(var18.readline().strip()) \n    var0 = map(float,var18.readline().split())\n    var1 = map(float,var18.readline().split())\n     \n    var23 = list(var0)\n    var24 = list(var1)\n    #print var0 ,var1\n    var25 =  solveWar(var0, var1)\n    var26 =  solveDecitfulWar(var23, var24)\n    var21 = str(var26)+\" \"+str(var25)\n    #print var21\n    var27='Case #{itr}: {res}'.format(itr=(var10+1),res=var21)\n    var20.write(var27+'\n')\n     \nvar18.close()"}
{"author": "elmoatasem", "index": 57, "filename": "2012_1460488_1483488.py", "code": "'''\nCreated on Apr 14, 2012\n \n@author: moatasem\n'''\n \ndef getNumRecycle(var0,var1,var2,var3):\n        var4=0\n        var5=list(str(var0))\n        for var6 in xrange(1,len(var5)):\n            var7=\"\".join(var5[0:var6])\n            var8=\"\".join(var5[var6:len(var5)])\n            var9=int(var8+var7)\n            if((var9>=var1 and var9<=var2) and var9!=var0 and var3.get((var9,var0))==None and var3.get((var0,var9))==None):\n                #print \"(\",str(var0),\",\",str(var9),\")\"\n                var3[(var9,var0)]=0;\n                var4+=1\n        return var4\n     \n     \nvar10 = open(\"C-small-attempt0.in\", \"r\")\nvar0=int(var10.readline().strip())\nfor var11  in xrange(var0):\n    var12=var10.readline().strip()\n    var1,var2=[int(var6) for var6 in var12.split(\" \")]\n    var13=0\n    var3={}\n    for var14 in range(var1,var2+1):\n        var13+= getNumRecycle(var14,var1,var2,var3)\n    print ('Case #'+str((var11+1))+\": \"+str(var13))"}
{"author": "entropy", "index": 58, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n \ndef normal(var0, var1):\n    var2 = 0\n    var3 = var0[:]\n    for var4 in var1[::-1]:\n        if var4 > var0[-1]:\n            var3 = var3[1:]\n        else:\n            for var5 in range(len(var3)):\n                if var3[var5] > var4:\n                    del var3[var5]\n                    var2 += 1\n                    break\n    return var2\n \ndef deceit(var0, var1):\n    var3 = var0[:]\n    var6 = var1[:]\n    while(len(var6) > 0 and len(var6) > 0 and (var6[0] < var3[0] or var6[-1] < var3[-1])):\n            var6 = var6[1:]\n            var3 = var3[:-1]\n    return len(var6)\n    # var2 = 0\n    # for var4 in var3[::-1]:\n    #     if var6[-1] < var4:\n    #         var6 = var6[1:]\n    #     else:\n    #         for var5 in range(len(var6)):\n    #             if var6[var5] > var4:\n    #                 del var6[var5]\n    #                 var2 += 1\n    #                 break\n    # return var2\n \n \n     \n \n \n \ndef main():\n    # var7 = \"D-small-attempt0.in\"\n    var7 = \"D-small-attempt1.in\"\n    # var7 = \"D-large.in\"\n    # var7 = \"sample.in\"\n \n    var8 = open(var7, \"rU\")\n \n    var6 = int(var8.readline().strip())\n \n    for var9 in range(1, var6 + 1):\n        var10 = int(var8.readline().strip())\n        var1 = sorted(map(float, var8.readline().strip().split()))\n        var0 = sorted(map(float, var8.readline().strip().split()))\n \n        var11 = var10 - normal(var0, var1)\n        var12 = normal(var1, var0)\n \n        print(\"Case #{}: {} {}\".format(var9, var12, var11))\n        # print(var10)\n        # print(var1)\n        # print(var0)\n        # print(list(map((lambda x: x[0] > x[1]), zip(var1,var0))))\n        # print()\n \nmain()"}
{"author": "entropy", "index": 58, "filename": "2012_1460488_1483488.py", "code": "var0 = [ [int(var1) for var1 in var2.split(\" \")] for var2 in open(\"C-small-attempt0.in\",\"rU\").read()[:-1].split(\"\n\")]\n \ndef recycle(var3, var4, var5):\n\tvar6 = str(var3)\n\tvar7 = 0\n\tfor var2 in range(len(var6)):\n\t\tvar6 = var6[-1:] + var6[:-1]\n\t\tvar8 = int(var6)\n\t\tif (var3 == var8) or (var3 > var8):\n\t\t\tcontinue\n\t\tif ((var8 <= var5) and (var8 > var4)):\n\t\t\t#print((var3,var8))\n\t\t\tvar11.append((var3,var8))\n\t\t\tvar7 += 1\n\treturn var7\n# var10 = 0\n# for var2 in range(1111,2222):\n# \tvar10 += (recycle(var2,1111,2222))\n# \tprint((len(set(var11))))\n \n \n \nvar7 = 0\nfor var9 in var0[1:]:\n\tvar7 += 1\n\tvar10 = 0\n\tvar11 = []\n\tfor var1 in range(var9[0],(var9[1])):\n\t\tvar10 += recycle(var1,var9[0], var9[1])\n\tprint((\"Case #\"+str(var7)+\":\", len(set(var11))))"}
{"author": "nlse", "index": 59, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\nimport re\nimport math\nimport string\n \nvar0 = open(sys.argv[1],'r')\n \nvar1 = int(var0.readline())\n \nfor var2 in range(var1):\n    var0.readline()\n    var3 = [float(var4) for var4 in var0.readline().split()]\n    var5 = [float(var4) for var4 in var0.readline().split()]\n    var3.sort()\n    var5.sort()\n    var6 = 0\n    var7 = 0\n    for var4 in var5:\n        while var7 < len(var3) and var3[var7] <= var4:\n            var7 += 1\n        if var7 == len(var3):\n            break\n        var6 += 1\n        var7 += 1\n    var8 = 0\n    var7 = 0\n    var3.reverse()\n    var5.reverse()\n    for var4 in var3:\n        if var5[var7] > var4:\n            var7 += 1\n        else:\n            var8 += 1\n    print('Case #{}: {} {}'.format(var2+1, var6, var8))\n"}
{"author": "nlse", "index": 59, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \nimport sys\nimport re\nimport math\n \ndef permute(var0, var1):\n    var2 = []\n    for var3 in range(1,var1):\n        var4 = var0 / 10**var3\n        var5 = var0 % 10**var3\n        #print('var12', var3, var4, var5)\n        if var5 >= 10**(var3-1):\n            var2.append(var5 * 10**(var1-var3) + var4)\n    var2 = list(set(var2))\n    while var0 in var2:\n        var2.remove(var0)\n    return var2\n \nvar6 = open(sys.argv[1],'var5')\n \nvar7 = int(var6.readline())\n \nfor var3 in range(var7):\n    var8, var9 = [int(var0) for var0 in var6.readline().split()]\n    var1 = int(math.floor(math.log10(var8))) + 1\n    var10 = 0\n    for var11 in range(var8,var9+1):\n        var12 = permute(var11, var1)\n        #print(var11,var12)\n        var10 += sum([1 for var0 in var12 if var0 >= var8 and var0 <= var9])\n        #print(var10)\n    print('Case #{}:'.format(var3+1), var10/2)\n"}
{"author": "hannanaha", "index": 60, "filename": "2014_2974486_5644738749267968.py", "code": "import os\nimport time\nimport decimal\nimport functools\n \n#===============================================================================\n# Generic helpers\n#===============================================================================\n# TODO FOR 14 : rounding functions, graph manipulation, desert lion, AttrDict\n \n#var0 = os.linesep - using this causes weird \\var10\\var10\n problems\nvar0 = \"\n\"\n \n# ------------------------------------------------------------------------------\n \ndef is_equal_approx(var1, var2, var3=1e-6):\n    \"\"\"Returns True iff var2 is within relative or absolute 'var3' of var1.\n     \n    By default, 'var3' is 1e-6.\n    \"\"\"\n    # Check absolute precision.\n    if -var3 <= var1 - var2 <= var3:\n        return True\n \n    # Is var1 or var2 too close to zero?\n    if -var3 <= var1 <= var3 or -var3 <= var2 <= var3:\n        return False\n \n    # Check relative precision.\n    return (-var3 <= (var1 - var2) / var1 <= var3\n        or -var3 <= (var1 - var2) / var2 <= var3)\n   \ndef read_syms(var4):\n    \"\"\"Read a var16 of whitespace separated symbols.\"\"\"\n    return var4.readline().strip().split()\n \ndef read_ints(var4):\n    \"\"\"Read a var16 of whitespace separated integers.\"\"\"\n    return [int(var5) for var5 in read_syms(var4)]\n \ndef read_floats(var4):\n    \"\"\"Read a var16 of whitespace separated floats.\"\"\"\n    return [float(var5) for var5 in read_syms(var4)]\n \n# ------------------------------------------------------------------------------\n \nclass Mtrx(object):\n    \"\"\"A matrix object.\"\"\"\n     \n    def __init__(var6, var7, var8, var9):\n        assert len(var9) == var7 * var8\n        var6.var7 = var7\n        var6.var8 = var8\n        var6.var9 = var9\n         \n    def cell(var6, var10, var11):\n        return var6.var9[var10 * var6.var8 + var11]\n     \n    def getrow(var6, var12):\n        return [var6.cell(var12, var11) for var11 in xrange(var6.var8)]\n \n    def getcol(var6, var12):\n        return [var6.cell(var11, var12) for var11 in xrange(var6.var7)]\n     \n    @classmethod\n    def readfromfile(var13, var4, var14, var7=None, var8=None):\n        \"\"\"Read matrix from file, assuming first var16 at location is `R C`.\n         \n        Return a new Mtrx object. Reading values is performed by the `var14`.\n        Pre-determined size can be passed using `var7` and `var8`.\n        \"\"\"\n        var9 = []\n        if var7 is None:\n            assert var8 is None\n            var7, var8 = read_ints(var4)\n        else:\n            assert var8 is not None\n        for var15 in range(var7):\n            var16 = var14(var4)\n            assert len(var16) == var8\n            var9.extend(var16)\n        return Mtrx(var7, var8, var9)\n             \n    @classmethod\n    def read_int_matrix(var13, var4, var7=None, var8=None):\n        return var13.readfromfile(var4, read_ints, var7, var8)\n             \n    @classmethod\n    def read_sym_matrix(var13, var4, var7=None, var8=None):\n        return var13.readfromfile(var4, read_syms, var7, var8)\n             \n    def __str__(var6):\n        var17 = \"\"\n        for var12 in xrange(var6.var7):\n            var17 += str(var6.getrow(var12)) + var0\n        return var17\n     \n    def __repr__(var6):\n        return \"{}({}, {}, {})\".format(var6.__class__.__name__, var6.var7,\n                                        var6.var8, var6.var9)\n \n# ------------------------------------------------------------------------------\n \nvar18 = 0\nvar19 = 0\n \ndef statreset():\n    global var19, var18\n    var19 = 0\n    var18 = 0\n \nclass memoizeit(object):\n    \"\"\"Decorator. Caches a function's return var22 each time it is called.\n     \n    If called later with the same arguments, the cached var22 is returned \n    (not reevaluated).\n    \"\"\"\n     \n    def __init__(var6, var20):\n        var6.var20 = var20\n        var6.var21 = {}\n         \n    def __call__(var6, *var23):\n         \n        # update stats\n        global var18, var19\n        var18 += 1\n         \n        try:\n            return var6.var21[var23]\n        except KeyError:\n             \n            # update stats\n            var19 += 1\n             \n            var22 = var6.var20(*var23)\n            var6.var21[var23] = var22\n            return var22\n        except TypeError:\n \n            # update stats\n            var19 += 1\n \n            # uncachable -- for instance, passing a list as an argument.\n            # Better to not var21 than to blow up entirely.\n            return var6.var20(*var23)\n     \n    @property\n    def __name__(var6):\n        return var6.var20.__name__\n     \n    def __get__(var6, var24, var25):\n        \"\"\"Support instance methods.\"\"\"\n        return functools.partial(var6.__call__, var24)\n \n# ------------------------------------------------------------------------------\n \nclass timeit(object):\n    \"\"\"Decorator that times a function.\n     \n    When function ends, print name, runtime, return var22 and var21 stats.\n    \"\"\"\n     \n    def __init__(var6, var20):\n        var6.var20 = var20\n         \n    def __call__(var6, *var23):\n        var26 = time.time()\n        var22 = var6.var20(*var23)\n        var27 = time.time() - var26\n        var28 = (1 - var19/(var18 * 1.0)) if \\\n            var18 else 0\n        print (var6.var20.__name__, \"{:7.3f}s, (var17: {}, var21: {:.2%})\".format(\n            var27, var22, var28))\n        return var22\n     \n    def __get__(var6, var24, var25):\n        return functools.partial(var6.__call__, var24)\n \n#===============================================================================\n# Input/var33\n#===============================================================================\n \ndef read_input(var29):\n    var9 = []\n    with open(var29, \"var10\") as f:\n        var30 = read_ints(f)[0]\n        # =============================================\n        for var15 in xrange(var30):\n            var31 = {}\n            var31[\"N\"] = read_ints(f)\n            var31[\"Naomi\"] = sorted(read_floats(f))\n            var31[\"Ken\"] = sorted(read_floats(f))\n            var9.append(var31)\n        # =============================================\n    return var9\n \ndef make_output(var32, var33):\n    var34 = \"Case #%s: \"\n    var32 = var32 + time.strftime(\"%H%M%S\") + \".out\"\n    with open(var32, \"w\") as f:\n        var35 = []\n        print (\"Output content ===============\")\n        # =============================================\n        for var12, var36 in enumerate(var33):\n            var16 = var34 % (var12 + 1,) + str(var36) + var0\n            print (var16),\n            var35.append(var16)\n        # =============================================\n        print (\"=\" * 30)\n        f.writelines(var35)\n \n#===============================================================================\n# Actual solution\n#===============================================================================\n \n@timeit\ndef solveit(var31):\n    var37 = var31[\"Naomi\"]\n    var38 = var31[\"Ken\"]\n     \n    # calculate deceptive war\n    var39 = 0\n    var40 = 0\n     \n    var41 = 0\n    while var39 < len(var37):\n        if var37[var39] > var38[var40]:\n            var40 += 1\n            var41 += 1 \n        var39 += 1\n     \n    # calculate regular war\n    var42 = len(var37) - 1\n    var40 = 0\n     \n    var43 = 0\n    while len(var38) >= var40 + 1:\n        print (var37, var38, var42, var40)\n        if var37[var42] > var38[-1]:\n            var40 += 1\n            var43 += 1\n        else:\n            var44 = var40\n            for var12 in xrange(len(var38)-1, var40-1, -1):\n                if var38[var12] < var37[var42]:\n                    var44 = var12 + 1\n                    break\n            del var38[var44]\n        var42 -= 1\n     \n    return str(var41) + \" \" + str(var43) \n \n \n#===============================================================================\n# Main\n#===============================================================================\n \n@timeit\ndef main(var32):\n    var9 = read_input(var32)\n    var33 = []\n    for var31 in var9:\n        statreset() # reset var21 stats\n        # =============================================\n        var17 = solveit(var31)\n        var33.append(var17)\n        # =============================================\n    make_output(var32, var33)\n \n \nif __name__ == '__main__':\n#    main(\"sample.in\")\n    main(\"D-small-attempt0.in\")\n#    main(\"C-large.in\")\n#    main(\"B-small-attempt0.in\")\n#    main(\"A-large.in\")"}
{"author": "hannanaha", "index": 60, "filename": "2012_1460488_1483488.py", "code": "import time\n \nvar0 = \".out\"\nvar1 = \"Case #%s: \"\n \nvar2 = 2000000\n \n \n \ndef circlify(var3, var4=var2):\n    var5 = str(var3) + str(var3)\n    var6 = len(var5) / 2\n    var7 = [int(var5[var8:var8+var6]) for var8 in xrange(var6)]\n     \n    # only values larger than var3 (also filters leading zeroes) \n    # and smaller than var4\n    var7 = [var9 for var9 in var7 if var9 > var3 and var9 <= var4]\n     \n    #clean dupes\n    return len(set(var7))\n \ndef check(var10, var11):\n    var12 = 0\n    var13 = time.time()\n    for var14 in xrange(var10, var11):\n        var12 += circlify(var14, var11)\n    print(var12, time.time()-var13  )\n \n    return var12\n \ndef read_input(var15):\n    var16 = []\n    with open(var15, \"r\") as f:\n        var17 = int(f.readline())\n        for var18 in xrange(var17):\n            var19 = f.readline().strip().split()\n            var16.append((int(var19[0]), int(var19[1])))\n    return var16\n \ndef make_output(var20, var21):\n    var20 = var20 + var0\n    with open(var20, \"w\") as f:\n        var22 = []\n        for var8, var23 in enumerate(var21):\n            var22.append(var1 % (var8+1,) + str(var23) + \"\n\")\n        f.writelines(var22)\n     \ndef main(var20):\n    var16 = read_input(var20)\n    var21 = []\n    for var19 in var16:\n        var21.append(check(var19[0], var19[1]))\n    print(\"var21:\", var21)\n    make_output(var20, var21)\n \nmain(\"small.in\")"}
{"author": "pek", "index": 61, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nvar0 = open(sys.argv[1])\nvar1 = int(var0.readline())\n \nfor var2 in xrange(0, var1):\n    var3 = int(var0.readline())\n    var4 = sorted(map(float, var0.readline().split()))\n    var5 = sorted(map(float, var0.readline().split()))\n    assert len(var4) == var3 and len(var5) == var3\n \n    var6 = set(var4)\n    var7 = set(var5)\n    var8 = 0\n    while var6:\n        var9 = max(var6)\n        try:\n            var10 = min(var11 for var11 in var7 if var11 > var9)\n        except ValueError:\n            var10 = min(var7)\n            var8 += 1\n        var6.remove(var9)\n        var7.remove(var10)\n \n    var12 = 0\n    var6 = set(var4)\n    var7 = set(var5)\n    while var6:\n        var10 = min(var7)\n        try:\n            var9 = min(var11 for var11 in var6 if var11 > var10)\n            var12 += 1\n        except ValueError:\n            var9 = min(var6)\n        var6.remove(var9)\n        var7.remove(var10)\n \n    print(\"Case #%s: %s %s\" % (var2+1, var12, var8))\n"}
{"author": "pek", "index": 61, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\nimport math\n \nvar0 = [int(10**var1) for var1 in xrange(0,16)]\n \nvar2 = int(stdin.readline())\n \nfor var3 in xrange(1,var2+1):\n\tvar4,var5 = map(int, stdin.readline().split())\n\tvar6 = 0\n\tvar7 = len(str(var4))\n \n\tvar8 = int(10**var7)\n \n\tfor var9 in xrange(var4,var5):\n\t\tvar10 = []\n\t\tvar11 = 1\n\t\tvar12 = var8\n\t\tfor var13 in xrange(1,var7):\n\t\t\tvar11 *= 10\n\t\t\tvar12 /= 10\n\t\t\tvar14 = (var9 % var12) * var11 + (var9 /var12)\n\t\t\tif var9 < var14 and var14 <= var5 and not var14 in var10: \n\t\t\t\tvar10.append(var14)\n\t\t\t\tvar6 += 1\n \n \n\tprint(\"Case #%d: %d\" % (var3,var6))\n \n"}
{"author": "radkokotev", "index": 62, "filename": "2014_2974486_5644738749267968.py", "code": "var0 = raw_input(\"Name of file: \")\nvar1 = open(var0, \"r\")\nvar2 = open(var0 + \".out\", \"w\")\n \n \nvar3 = int(var1.readline()[:-1])\n## Code starts here\n \ndef playDecWars(var4, var5):\n    var6 = len(var4)\n    var7 = 0\n    while var6 > 0:\n        if var4[0] < var5[0]:\n            del(var4[0])\n            del(var5[-1])\n        else:\n            del(var4[0])\n            del(var5[0])\n            var7 += 1\n        var6 -= 1\n    return var7\n \ndef playWars(var4, var5):\n    var6 = len(var4)\n    var7 = 0\n    while var6 > 0:\n        if var4[0] > var5[-1]:\n            var7 += 1\n            del(var4[0])\n            del(var5[0])\n        else:\n            var8 = 0\n            for var9 in var5:\n                if var9 > var4[0]:\n                    break\n                var8 += 1\n            del(var4[0])\n            del(var5[var8])\n        var6 -= 1\n    return var7\n \nfor var10 in range(1, var3 + 1):\n    var6 = int(var1.readline()[:-1])\n    var4 = var1.readline()[:-1].split(\" \")\n    var5 = var1.readline()[:-1].split(\" \")\n    var4 = [float(var11) for var11 in var4]\n    var5 = [float(var11) for var11 in var5]\n \n    var4.sort()\n    var5.sort()\n \n    var12 = playDecWars(var4[:], var5[:])\n    var13 = playWars(var4[:], var5[:])\n     \n    var2.write(\"Case #%d: %d %d\n\" % (var10, var12, var13))\n     \n         \n     \n## code ends here\n \nvar2.close()\nvar1.close()\n"}
{"author": "radkokotev", "index": 62, "filename": "2012_1460488_1483488.py", "code": "from string import *\n \ndef compute(var0,var1):\n    var2 = var0\n \n    var3 = 0\n \n    while var2 < var1:\n        var4 = str(var2)+str(var2)[:len(str(var2))-1]\n        for var5 in range (len(str(var2))):\n            if int(var4[var5:len(str(var2))+var5]) > var2 and int(var4[var5:len(str(var2))+var5]) <= var1:\n                var3 += 1\n         \n        var2 += 1\n \n    return var3\n         \nvar6 = raw_input(\"File name: \")\nvar7 = open(var6,\"r\")\nvar8 = int(var7.readline()[:-1])\nvar5=0\nfor var9 in var7:\n \n    var10 = (var9[:-1]).split()\n    #var10.split()\n \n    var0 = int(var10[0])\n    var1 = int(var10[1])\n    print(\"Case #%d: %d\" %(var5+1,compute(var0,var1)))\n    var5+=1\n     \nvar7.close()\n"}
{"author": "intn", "index": 63, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\nimport sys\n \n \ndef process(var0, var1, var2):\n\tvar3 = var4 = 0\n\tvar5 = 0\n\tvar6 = var0\n\tfor var7 in range(var0):\n\t\tif var1[var7] > var2[var4]:\n\t\t\tvar5 += 1\n\t\t\tvar4 += 1\n\t\tif var2[var7] > var1[var3]:\n\t\t\tvar6 -= 1\n\t\t\tvar3 +=1\n\treturn str(var5) + ' ' + str(var6)\n \nvar8 = open(sys.argv[1], 'r')\nvar9 = int(var8.readline())\nfor var7 in range(var9):\n\tvar0 = int(var8.readline())\n\tvar1 = sorted(map(float, var8.readline().split()))\n\tvar2 = sorted(map(float, var8.readline().split()))\n\tprint('Case #%d:' % (var7 + 1), process(var0, var1, var2))\n"}
{"author": "intn", "index": 63, "filename": "2012_1460488_1483488.py", "code": "'''\nCreated on 2012-4-14\n \n@author: hemnd\n'''\ndef cal(var0, var1):\n    var2 = 0\n    var3 = []\n    for var4 in range(1, len(var0)):\n        var5 = var6 = 0\n        for var7 in range(int(var0[0:var4]), int(var1[0:var4]) + 1):\n            var8 = str(var7)\n            var9 = (var8 * (len(var0) - var4))[0:len(var0) - var4]\n            var5 = int(var9)\n            if int(var9 + var8) <= int(var8 + var9):\n                var5 += 1\n            if int(var1[-var4:]) >= var7:\n                var6 = int(var1[:(len(var0) - var4)])\n            else:\n                var6 = int(var1[:(len(var0) - var4)]) - 1\n            if var6 < var5:\n                continue\n            for var10 in range(var5, var6 + 1):\n                if (var8 + str(var10), str(var10) + var8) in var3:\n                    print((var8 + str(var10), str(var10) + var8), 'already there')\n                    continue\n                else:\n                    var3.append((var8 + str(var10), str(var10) + var8))\n                    var2 += 1\n \n#            var2 = var2 + var6 - var5 + 1\n    return var2\n \nvar11 = open('C-small-attempt2.in', 'r')\n#var11 = open('test.txt', 'r')\nvar12 = var11.readlines()\nvar11.close()\n \nvar13 = int(var12[0])\nvar14 = []\n \nfor var4 in range(1, var13 + 1):\n    var15 = var12[var4].strip().split(' ')\n    var14.append('Case #%d: %d\n' % (var4, cal(var15[0], var15[1])))\n    print(var14[var4 - 1],)\n \noutputFile = open('C-small.out', 'w')\noutputFile.writelines(var14)\noutputFile.close()\n"}
{"author": "addie9000", "index": 64, "filename": "2014_2974486_5644738749267968.py", "code": "# !/usr/bin/python\nimport sys, string\n \n#solve case function\ndef solve_case(var0, var1, var2):\n    var3 = var0[:]\n    var4 = var1[:]\n    var5 = 0\n    while len(var3) > 0:\n        var6 = var3.pop(0)\n        var7 = var4[0]\n        if var6 < var7:\n            var6 = var4[-1] - 0.000001\n        else:\n            # Naomi may call the same kg many times but Ken should not realize it ;)\n            # The important point is that she must call heavier than Ken's max.\n            var6 = var4[-1] + 0.000001\n \n        var8 = filter(lambda x: x > var6, var4)\n        if len(var8) > 0:\n            var9 = var4.pop(var4.index(var8.pop(0)))\n        else:\n            var9 = var4.pop(0)\n \n        if var6 > var9:\n            var5 += 1\n \n    var10 = 0\n    while len(var0) > 0:\n        var6 = var0.pop(0)\n        var8 = filter(lambda x: x > var6, var1)\n        if len(var8) > 0:\n            var9 = var1.pop(var1.index(var8.pop(0)))\n        else:\n            var9 = var1.pop(0)\n \n        if var6 > var9:\n            var10 += 1\n \n    print(\"Case #%d: %d %d\" % (var2, var5, var10))\n \n#main\nvar11 = sys.stdin\n \nif len(sys.argv) > 1:\n    var11 = open(sys.argv[1], 'r')\n \nvar12 = var11.readline()\nfor var2 in range(1, int(var12) + 1):\n    var11.readline()\n    var13 = map(float, var11.readline().split(' '))\n    var14 = map(float, var11.readline().split(' '))\n    solve_case(sorted(var13), sorted(var14), var2)\n \n"}
{"author": "addie9000", "index": 64, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\nimport sys, string, math\n \n#solve var11 function\ndef solve_case(var0, var1, var2):\n\tvar3 = 0\n \n\tfor var4 in range(var0, var1 + 1):\n\t\tvar5 = str(var4)\n\t\tvar6 = []\n\t\tfor var7 in range(1, len(var5)):\n\t\t\tvar8 = int(var5[var7:] + var5[:var7])\n\t\t\tif not var8 in var6:\n\t\t\t\tif var8 <= var1 and var4 < var8:\n\t\t\t\t\tvar3 = var3 + 1\n\t\t\t\tvar6.append(var8)\n \n\tprint(\"Case #%d: %d\" % (var2, var3))\n \n#main\nvar9 = sys.stdin\n \nif len(sys.argv) > 1:\n\tvar9 = open(sys.argv[1], 'var9')\n \nvar10 = var9.readline()\nfor var2 in range(1, int(var10) + 1):\n\tvar11 = map(int, var9.readline().rstrip().split(' '))\n\tsolve_case(var11[0], var11[1], var2)\n \n"}
