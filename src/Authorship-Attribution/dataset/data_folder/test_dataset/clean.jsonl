{"author": "greatlemer", "index": 0, "filename": "2012_1460488_1483488.py", "code": "from optparse import OptionParser\nimport math\n \n# The largest number B can be\nMAX_NUMBER = 2000000\n \n# COUNT_MAP will store the number of recycled pairs that can exist for a\n# list of cycles of length n (these are the triangular numbers).\n# Calculate this now so that we don't waste time with it later on.\nCOUNT_MAP = { 1: 0 }\nindex = 1\nwhile index < math.log10(MAX_NUMBER):\n    index += 1\n    COUNT_MAP[index] = index * (index - 1) / 2\n \ndef solve(minimum, maximum):\n    # Store the result\n    total_cycles = 0\n    # The numbers we need to check.  We'll remove numbers from this once we've\n    # used them in a cycle so that we don't attempt to reprocess them.\n    iter_range = range(minimum, maximum + 1)\n    # Keep looping untli we've gone through all the numbers.\n    while iter_range:\n        # Remove the first number\n        number = iter_range[0]\n        iter_range.remove(number)\n        # Add this to the list of numbers in a potential cycle.\n        cycle_numbers = [number,]\n        # Using strings for this feels icky but the modulo arithmetic seems\n        # equally icky :-(\n        # Double up the number in a string and we'll use slices to get the\n        # cycles.\n        string_rep = \"%s%s\" % (number, number)\n        digits = len(string_rep) / 2\n        start_index, end_index = 0, digits\n        while start_index < digits:\n            start_index += 1\n            end_index += 1\n            new_number = int(string_rep[start_index:end_index])\n            if new_number == number:\n                # If we're repeating then there's no need to take more slices\n                start_index = digits\n            elif new_number > number and new_number <= maximum:\n                # We should already have dealt with numbers lower than this,\n                # and we don't want anything above the maximum. Anything else\n                # add to the cycle options and remove from the list of numbers\n                # to check.\n                cycle_numbers.append(new_number)\n                iter_range.remove(new_number)\n        total_cycles += COUNT_MAP[len(cycle_numbers)]\n    return total_cycles\n \ndef parse_case(data_line):\n    bits = data_line.split()\n    minimum = int(bits[0])\n    maximum = int(bits[1])\n    return (minimum, maximum, )\n \ndef main():\n    parser = OptionParser()\n    parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                    help=\"read input from FILE\", metavar=\"FILE\")\n \n    (options, args) = parser.parse_args()\n    if not options.filename:\n        parser.error(\"Must provide a filename.\")\n    input_file = open(options.filename, \"r\")\n    total_cases = int(input_file.readline())\n    case_number = 0\n    while case_number < total_cases:\n    \tcase_number += 1\n    \tdata_args = parse_case(input_file.readline())\n    \tprint(\"Case #%d: %s\" % (case_number, solve(*data_args)))\n \nif __name__ == \"__main__\":\n    main()"}
{"author": "lookingfor", "index": 1, "filename": "2012_1460488_1483488.py", "code": "T = int(raw_input())\n \ndef isRecycle(x, y, d):\n    k = 10**(d-1)\n    for i in xrange(ndigits):\n        y = k*(y%10) + y/10\n        if x == y:\n            return True\n    return False\n \nfor z in xrange(1, T+1):\n    res = 0\n    A, B = map(int, raw_input().split())\n    ndigits = len(str(A))\n    for i in xrange(A, B):\n        for j in xrange(i+1, B+1):\n            if isRecycle(i, j, ndigits):\n                res += 1\n    print(\"Case #%d:\" % z, res)"}
{"author": "mth", "index": 2, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nFILE_NAME_BASE = 'C-small-attempt0'\nNUM_PROCESSES = 0\n \ndef parse(inp):\n\ta, b = (int(x) for x in inp.readline().split())\n\treturn a, b\n \ndef solve(a, b):\n\tcount = 0\n\tfor i in xrange(a, b):\n\t\ts = str(i)\n\t\trecycled = set()\n\t\tfor d in xrange(1, len(s)):\n\t\t\tr = s[d : ] + s[ : d]\n\t\t\tif i < int(r) <= b:\n\t\t\t\trecycled.add(r)\n\t\tcount += len(recycled)\n\treturn count\n \nif __name__ == '__main__':\n\tinp = open(FILE_NAME_BASE + '.in.txt', 'r')\n\tnumCases = int(inp.readline())\n\tif NUM_PROCESSES == 0:\n\t\tresults = [\n\t\t\tsolve(*parse(inp))\n\t\t\tfor _ in range(numCases)\n\t\t\t]\n\telse:\n\t\tfrom multiprocessing import Pool\n\t\tpool = Pool(NUM_PROCESSES)\n\t\tresults = [\n\t\t\tpool.apply_async(solve, parse(inp))\n\t\t\tfor _ in range(numCases)\n\t\t\t]\n\tinp.close()\n\tout = open(FILE_NAME_BASE + '.out.txt', 'w')\n\tfor case, result in enumerate(results):\n\t\tvalue = result if NUM_PROCESSES == 0 else result.get()\n\t\tout.write('Case #%d: %s\\n' % (case + 1, value))\n\t\tout.flush()\n\tout.close()\n"}
{"author": "binnie", "index": 3, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef recycle(num):\n    x = str(num)\n    recycles = []\n    for ii in range(1, len(x)):\n        recycles.append(x[ii:] + x[:ii])    \n    return recycles\n \nf = open(sys.argv[1])\nT = int(f.readline())\nfor t in range(T):\n    A, B = map(int, f.readline().split())\n    total = 0\n    debugs = []\n    for ii in range(A,B):\n        recycles_ii = recycle(ii)\n        recycles_ii = (filter(lambda x: int(x) > ii and int(x) <= B, recycles_ii))\n        total += len(recycles_ii)\n        for elem in recycles_ii:\n            debugs.append((ii, int(elem)))   \n    print(\"Case #%d:\" % (t + 1), len(set(debugs)))\n"}
{"author": "pawko", "index": 4, "filename": "2012_1460488_1483488.py", "code": "# python 3\nimport string\nimport itertools\nimport sys\n \ndef gen_rotations(num):\n    digits = [ch for ch in str(num)]\n    for i in range(1, len(digits)):\n        if digits[i] != '0':\n            result = 0\n            for d in digits[i:]:\n                result = 10*result + ord(d) - ord('0')\n            for d in digits[:i]:\n                result = 10*result + ord(d) - ord('0')\n            if result == num:\n                return\n            yield result\n     \ndef process_case(a,b):\n    result = 0\n    for n in range(a,b+1):\n        for m in gen_rotations(n):\n            if (n < m <= b):\n                result += 1\n    return result\n \ndef result_gen(lines):\n    ncases = int(next(lines))\n    for ci in range(1,ncases+1):\n        a,b = line_of_numbers(next(lines))\n        result = process_case(a,b)\n        yield 'Case #{0}: {1}\\n'.format(ci, result)\n     \ndef line_of_numbers(s):\n    return [int(sub) for sub in s.split()]\n \ndef input_gen(f_in):\n    for line in f_in:\n        if line.endswith('\\n'):\n            line = line[:-1]\n        yield line\n \ndef start(basename):\n    infile = basename + '.in'\n    outfile = basename + '.out'\n    f_in = open(infile, 'r')\n    f_out = open(outfile, 'w')\n    f_out.writelines(result_gen(input_gen(f_in)))\n    f_in.close()\n    f_out.close()\n \n##start('C-test')\nstart('C-small-attempt0')\n##start('C-large')\n"}
{"author": "chevaliermalfet", "index": 5, "filename": "2012_1460488_1483488.py", "code": "inputFile = open(\"C-small-attempt0.in\", 'r')\noutputFile = open(\"recycleOut.txt\", 'w')\nnumTests = int(inputFile.readline())\n \ndef countRecycle(a,b):\n    count = 0\n    for n in range(a,b):\n        for m in range(n+1,b+1):\n            nStr = str(n)\n            canRecycle = False\n            for k in range(len(nStr)):\n                if nStr[k:] + nStr[0:k] == str(m):\n                    canRecycle = True\n                    break\n            if canRecycle:\n                count += 1\n    return count\n \nfor i in range(numTests):\n    line = inputFile.readline().split()\n    a = int(line[0])\n    b = int(line[1])\n    outputFile.write('Case #' + str(i+1) + ': ' + str(countRecycle(a,b)) + '\\n')\n \ninputFile.close()\noutputFile.close()\n"}
{"author": "yoba", "index": 6, "filename": "2012_1460488_1483488.py", "code": "for case in range(int(input())):\n    a, b = tuple(map(int, input().split()))\n    result = 0\n    ast, bst = str(a), str(b)\n    for x in range(a, b + 1):\n        xst = str(x)\n        added = list()\n        for j in range(len(xst)):\n            xstr = xst[j:] + xst[:j]\n            if xstr < ast or xstr > bst:\n                continue\n            elif xst < xstr and xstr not in added:\n                added.append(xstr)\n                result += 1\n    print(\"Case #{}: {}\".format(case + 1, result))\n"}
{"author": "nwin", "index": 7, "filename": "2012_1460488_1483488.py", "code": "def solve(a, b):\n    n = len(str(a))\n    N = 10 ** n\n    cnt = 0\n    for x in xrange(a, b):\n        y = x\n        S = set([y])\n        for j in xrange(n-1):\n            y = y * 10\n            y += y / N\n            y %= N\n            if a <= x < y <= b and y not in S:\n                cnt += 1\n                S.add(y)\n    return cnt\n \nT = int(raw_input())\nfor t in xrange(T):\n    a, b = map(int, raw_input().split())\n    print(\"Case #%d: %d\" % (t + 1, solve(a, b)))\n"}
{"author": "rainmayecho", "index": 8, "filename": "2012_1460488_1483488.py", "code": "import math\n \nf = open('csmall.in','r')\nout = open('out3.txt','w')\ninp = [[int(n) for n in s.split()] for s in f.readlines()]\ncount = 1\n \nfor e in inp[1:len(inp)]:\n    interval = xrange(e[0],e[1]+1)\n    exp = xrange(1, int(math.log(interval[-1],10))+1)\n    skip = []\n    pairs = []\n    for i in interval:\n        if str(i)[::-1] == str(i):\n            continue\n        for j in exp:\n            val = int(str(i%10**j)+str(i/10**j))\n            if val in skip:\n                continue\n            elif val >= interval[0] and val <= interval[-1] and not val == i:\n                skip.append(i)\n    out.write('Case #'+str(count)+': '+str(len(skip))+'\n')\n    count += 1\n \nf.close()\nout.close()\n"}
{"author": "fizu", "index": 9, "filename": "2012_1460488_1483488.py", "code": "from codejam import *\n \nfor case in xrange(readint()):\n    A, B = readintarray()\n    res = 0\n    for i in xrange(A, B + 1):\n        for j in xrange(i + 1, B + 1):\n            ist = str(i)\n            jst = str(j)\n            if len(ist) != len(jst):\n                continue\n \n            if ist in (jst + jst):\n                res += 1\n \n    print(\"Case #%d: %d\" % (case + 1, res))\n"}
{"author": "oonishi", "index": 10, "filename": "2012_1460488_1483488.py", "code": "# coding: shift-jis\n \nimport sys\n#f = file(\"test.in\")\n#w = sys.stdout\nf = file(\"C-small-attempt0.in\")\nw = file(\"answer.txt\", \"w\")\ncnt = int(f.readline()[:-1])\nfrom math import log\nfor no in range(cnt):\n\tA, B = map(int, f.readline()[:-1].split())\n \t\n\tcount = 0\n\tfor n in range(A, B):\n\t\td = int(log(n, 10))+1\n\t\ts = set()\n\t\tfor e in range(1, d):\n\t\t\tc = 10**e\n\t\t\tr = (n % c)*10**(d-e)\n\t\t\tb = n / c\n\t\t\tif r+b>n and r+b<=B and (n, r+b) not in s:\n\t\t\t\ts.add((n, r+b))\n\t\t\t\tcount += 1\n \t\t\t\t\n\tprint>>w, \"Case #%d:\"%(no+1), count\n \n \n"}
{"author": "hannanaha", "index": 11, "filename": "2012_1460488_1483488.py", "code": "import time\n \nOEXT = \".out\"\nCASE_PRFX = \"Case #%s: \"\n \nMAXB = 2000000\n \n \n \ndef circlify(num, cutoff=MAXB):\n    numstr = str(num) + str(num)\n    max_opt = len(numstr) / 2\n    opts = [int(numstr[i:i+max_opt]) for i in xrange(max_opt)]\n     \n    # only values larger than num (also filters leading zeroes) \n    # and smaller than cutoff\n    opts = [o for o in opts if o > num and o <= cutoff]\n     \n    #clean dupes\n    return len(set(opts))\n \ndef check(A, B):\n    res2 = 0\n    start = time.time()\n    for t in xrange(A, B):\n        res2 += circlify(t, B)\n    print(res2, time.time()-start  )\n \n    return res2\n \ndef read_input(filename):\n    data = []\n    with open(filename, \"r\") as f:\n        cases = int(f.readline())\n        for _ in xrange(cases):\n            case = f.readline().strip().split()\n            data.append((int(case[0]), int(case[1])))\n    return data\n \ndef make_output(fname, output):\n    fname = fname + OEXT\n    with open(fname, \"w\") as f:\n        restext = []\n        for i, v in enumerate(output):\n            restext.append(CASE_PRFX % (i+1,) + str(v) + \"\\n\")\n        f.writelines(restext)\n     \ndef main(fname):\n    data = read_input(fname)\n    output = []\n    for case in data:\n        output.append(check(case[0], case[1]))\n    print(\"output:\", output)\n    make_output(fname, output)\n \nmain(\"small.in\")"}
{"author": "cathco", "index": 12, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef isRecycledPair(n, m):\n    m = str(m)\n    for i in range(len(m)):\n        m = m[-1] + m[:-1]\n        if n == int(m):\n            return True\n    return False\n \nT = int(sys.stdin.readline())\nfor i in range(T):\n    [A, B] = map(int, sys.stdin.readline().strip().split(' '))\n    count = 0\n    for n in range(A, B+1):\n        for m in range(n, B+1):\n            if n != m and isRecycledPair(n, m):\n                count += 1\n    print('Case #%s: %s' % (i + 1, count))\n"}
{"author": "taichino", "index": 13, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n \nimport sys\n \ndef recycled_numbers(num):\n    result = []\n    num_text = str(num)\n    for i in range(1, len(num_text)):\n        rotated = int(num_text[i:] + num_text[:i])\n        if num != rotated:\n            result.append(rotated)\n    return result\n \nfor T, line in enumerate(sys.stdin):\n    if T == 0:\n        continue\n \n    results = []\n    params = [int(n) for n in line.split(' ')]\n    (A, B) = params\n    for i in range(A, B):\n        candidates = recycled_numbers(i)\n        for c in candidates:\n            pair = (i, c)\n            if pair not in results and A <= c and c <= B and i < c:\n                results.append(pair)\n    # print(results)\n    ans = len(results)\n    print('Case #%(T)s: %(ans)s' % locals())\n"}
{"author": "caethan", "index": 14, "filename": "2012_1460488_1483488.py", "code": "#Code copyright Brett Olsen, 2012\n \n#Standard imports\nimport numpy as N\n \n#Some switching behavior to set standard input/output files\n#Set these three variables to adjust behavior\ncase = 1\nproblem = \"C\"\npractice = False\n \nif practice:\n    practice = \"-practice\"\nelse:\n    practice = \"-attempt0\"\nif case == 0:\n    infile = open(\"%s-%s%s.in\" % (problem, \"sample\", practice), 'r')\n    outfile = open(\"%s-%s%s.out\" % (problem, \"sample\", practice), 'w')        \nelif case == 1:\n    infile = open(\"%s-%s%s.in\" % (problem, \"small\", practice), 'r')\n    outfile = open(\"%s-%s%s.out\" % (problem, \"small\", practice), 'w')    \nelif case == 2:\n    infile = open(\"%s-%s%s.in\" % (problem, \"large\", practice), 'r')\n    outfile = open(\"%s-%s%s.out\" % (problem, \"large\", practice), 'w')   \nelse:\n    raise (ValueError, 'Invalid case')\n     \ndef permute(num, maxval):\n    assert type(num) == int\n    output = []\n    digits = int(N.ceil(N.log10(num)))\n    current = num\n    for i in range(digits-1):\n        current = current / 10 + 10**(digits-1) * (current % 10)\n        if current <= num: #We only want permutations greater than num (for uniqueness)\n            continue\n        if current > maxval: #only permutations less than the maximum value\n            continue\n        if current not in output:\n            output.append(current)\n#    return output\n    return len(output)\n     \ndef count_recycled(A, B):\n    count = 0\n    for num in xrange(A, B+1):\n        count += permute(num, B)\n    return count\n     \n#Read in the number of cases (the first input line) we need to iterate through\ncases = int(infile.readline().strip('\\n'))\nfor i in range(cases):\n##################NEW CODE GOES HERE###########################################    \n    #Read in all relevant data for each case\n    A, B = infile.readline().split()\n    A = int(A)\n    B = int(B)\n     \n    #Do calculations to generate the output\n    output = '%i' % count_recycled(A, B)\n     \n##################NEW CODE GOES HERE###########################################    \n    #Write out the results for this case\n    outfile.write('Case #%i: %s\\n' % (i+1, output))\n     \n#Close files\ninfile.close()\noutfile.close()"}
{"author": "maxbublis", "index": 15, "filename": "2012_1460488_1483488.py", "code": "\"\"\"\nGoogle Code Jam 2012 Problem C\nUsage:\n    python problem_c.py < input.txt > output.txt\n\"\"\"\nimport itertools\nimport sys\n \n \ndef is_recycled(n, m, _cache={}, _cache_sorted={}, _cache_length={}):\n    if not n in _cache:\n        _cache[n] = str(n)\n \n    if not m in _cache:\n        _cache[m] = str(m)\n \n    str_n = _cache[n]\n    str_m = _cache[m]\n \n    if not n in _cache_sorted:\n        _cache_sorted[n] = sorted(str_n)\n \n    if not m in _cache_sorted:\n        _cache_sorted[m] = sorted(str_m)\n \n    if _cache_sorted[n] != _cache_sorted[m]:\n        return False\n \n    if not n in _cache_length:\n        _cache_length[n] = len(str_n)\n \n    for i in xrange(_cache_length[n] + 1):\n        if str_m == str_n[i:] + str_n[:i]:\n            return True\n \n    return False\n \n \ndef solve_problem():\n    number_of_cases = int(sys.stdin.readline())\n \n    for i in xrange(1, number_of_cases + 1):\n        case = sys.stdin.readline().strip()\n        A, B = map(int, case.split())\n        result = sum(itertools.imap(lambda (n, m): is_recycled(n, m),\n                                    itertools.combinations(xrange(A, B + 1), 2)))\n \n        sys.stdout.write('Case #{0}: {1}\\n'.format(i, result))\n \nif __name__ == '__main__':\n    solve_problem()\n"}
{"author": "anavaleije", "index": 16, "filename": "2012_1460488_1483488.py", "code": "def find_recycled(n, b):\n\tns = str(n)\n\treclist = []\n\tfor i in xrange(1, len(ns), 1):\n\t\tnrec = ns[i:len(ns)] + ns[0:i]\n\t\tif nrec[0] != \"0\":\n\t\t\tnrec = eval(nrec)\n\t\t\tif nrec <= b and nrec > n and (n, nrec) not in reclist:\n\t\t\t\treclist.append((n,nrec))\n\treturn len(reclist)\n \ninp = file(\"input.in\")\nT = eval(inp.readline())\nout = file(\"output.txt\", \"w\")\n \nfor i in xrange(T):\n\ta, b = inp.readline().strip().split()\n\ta = eval(a)\n\tb = eval(b)\n\tnrec = 0\n\treclist = []\n\tfor n in xrange(a, b):\n\t\tif n > 11:\n\t\t\tnrec += find_recycled(n, b)\n\tout.write(\"Case #%d: %d\\n\" %(i + 1, nrec))\n \t\t\t\n"}
{"author": "ziyan", "index": 17, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef find_recycled_pairs(A, B):\n    count = 0\n    l = len(str(A))\n    for i in range(A, B + 1):\n        variants = []\n        for d in range(1, l):\n            fixed = str(i)[:d]\n            moving = str(i)[-(l - d):]\n            j = int(moving + fixed)\n            if j != i and len(str(i)) == len(str(j)) and j in range(A, B + 1) and j not in variants:\n                variants.append(j)\n                #print('%s -> %s' % (fixed + moving, moving + fixed))\n                count = count + 1\n    return count / 2\n \n \ndef find_recycled_pairs_efficient(A, B):\n    count = 0\n    sa = str(A)\n    sb = str(B)\n    l = len(sa)\n    for fixed in range(1, l):\n        moving = l - fixed\n        x = int(sa[:fixed])\n        y = int(sb[:fixed])\n        m = int(sa[-fixed:])\n        n = int(sb[-fixed:])\n        j = int(sa[:moving])\n        k = int(sb[:moving])\n        print('%i fixed: x = %i, m = %i, n = %i, y = %i, j = %i, k = %i' % (fixed, x, m, n, y, j, k))\n \n        if int(str(y) + str(k)) >= B:\n            k1 = int(sb[-moving:])\n            print('k1 - j = %i - %i' % (k1, j))\n            if k1 > j:\n                count = count + (k1 - j)\n        if int(str(x) + str(j)) <= A:\n            j1 = int(sa[-moving:])\n            print('k - j1 = %i - %i' % (k, j1))\n            if k > j1:\n                count = count + (k - j1)\n \n        if len(str(k)) >= len(str(x)):\n            count = count + (y - x) * (k - j)\n        else:\n            count = count + (y - x - 1) * (k - j + 1)\n \n        if x < m:\n            count = count - (m - x - 1)\n        if y > n:\n            count = count - (y - n - 1)\n \n    return count / 2\n \ndef main():\n \n    case_count = int(sys.stdin.readline())\n \n    for case_index in range(1, case_count + 1):\n        (A, B) = sys.stdin.readline().strip().split(' ')\n        A = int(A)\n        B = int(B)\n        assert len(str(A)) == len(str(B))\n        print('Case #%i: %s' % (case_index, find_recycled_pairs(A, B)))\n \nif __name__ == '__main__':\n    main()"}
{"author": "joegunrok", "index": 18, "filename": "2012_1460488_1483488.py", "code": "       \n\"\"\"\nGCJ framework (gcj.fw.framework)\n- Command Line and Package interface\n- output redirection\n- parsing case input\n- executing problem code against cases\n- testing framework\n\"\"\"\nimport sys\nimport unittest\nimport StringIO\n \nclass Framework(object):\n    class Case(object):\n        def __init__(self, caseNumber, caseData=None):\n            self.number = caseNumber\n            self.data = caseData\n            self.result = None\n     \n        @classmethod\n        def parser(cls, f_in):\n            pass\n     \n        def run(self):\n            pass\n     \n        def execute(self, f_in=None):\n            if self.data is None:\n                self.data = self.parser(f_in)\n            self.result = self.run(**self.data)\n     \n        def __str__(self):\n            return \"Case #%d: %s\" % (self.number, self.result)\n     \n     \n    class Result(object):\n        def __init__(self, resultData):\n            self.data = resultData\n     \n        def __str__(self):\n            return str(self.ata)\n \n    def __init__(self, f_in, f_out):\n        sys.stdout = f_out\n        self.f_in = f_in if f_in is not None else sys.stdin\n \n    def run(self):\n        nCases = int(self.f_in.readline().strip())\n        for num in xrange(nCases):\n            case = type(self).Case(num+1)\n            case.execute( f_in=self.f_in)\n            print(case)\n \n \n    @classmethod\n    def __main__(cls):\n        f_in = sys.stdin\n        if len(sys.argv) > 1:\n            if sys.argv[1] == \"-t\":\n                unittest.main()\n                sys.exit()\n            f_in = open(sys.argv[1])\n        framework = cls(f_in, sys.stdout)\n        framework.run()\n     \nclass Test(unittest.TestCase):\n    cases = []\n    case = None\n    c=[]\n     \n    def setUp(self):\n        self.c = []\n        self.defineCases()\n        counter = 1\n        self.cases = []\n        for c in self.c:\n            case = self.case(counter)\n            case.data = case.parser(StringIO.StringIO(c[0]))\n            self.cases.append( [case, c[1]])\n     \n    def defineCases(self):\n        pass\n     \n    def tearDown(self):\n        pass \n \n    def test_Name(self):\n        self.setUp()\n        for case in self.cases:\n            print(case[0].data, case[1])\n            case[0].execute()\n            self.assertEqual(case[0].result, case[1])\n'''\nCreated on Apr 8, 2012\n \n@author: Joe\n'''\n \nfrom math import log\nclass C(Framework):\n    class Case(Framework.Case):\n        def parser(self, fh):\n            args = map(int, fh.readline().strip().split(\" \"))\n            A,B = args[:2]\n            return {\"A\":A,\"B\":B}\n         \n        def run(self,A=None,B=None):\n            ret = 0\n            found = set()\n            for i in range(A,B+1):\n                if i in found: continue\n                n = int(log(i,10))\n                nums = set([i])\n                tmp = i\n                for j in range(n):\n                    tmp = tmp / 10 + (tmp%10)*10**(n)\n                    if tmp <= B and tmp>= A:\n                        nums.add(tmp)\n                        found.add(tmp)\n                ret += len(nums)*(len(nums)-1)/2\n            return str(ret)\n             \nclass Test(Test):\n    def defineCases(self):\n        self.case = C.Case\n        self.c = [\n                [\"1 9\", \"0\"],\n                [\"10 40\", \"3\",                   ],\n                [\"10 99\", \"36\"],\n                [\"100 500\", \"156\"],\n                [\"1111 2222\", \"287\"],\n                [\"1000000 2000000\", \"2000000\"]\n                ]\n \nif __name__ == \"__main__\":\n    C.__main__()\n     \n"}
{"author": "kmod", "index": 19, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n \n    t = int(f.readline())\n    for _t in xrange(t):\n        a, b = map(int, f.readline().split())\n \n        total = 0\n        for i in xrange(a, b):\n            # print(i)\n            s = set()\n            cs = str(i)\n            for j in xrange(1, len(cs)):\n                k = int(cs[j:] + cs[:j])\n                if i < k <= b:\n                    s.add(k)\n            # print(s)\n            # print(total += len(s))\n \n        print(\"Case #%d: %d\" % (_t + 1, total))\n"}
{"author": "j4b", "index": 20, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \nimport sys\nimport functools\nimport operator\n \n \ndef solve(a,b):\n    num_recycled = 0\n    for n in range(a, b+1):\n        s = str(n)\n        pairs = []\n        for i in range(1,len(s)):\n            m = int(s[i:] + s[:i])\n            #print(\"checking \" + str(m))\n            if n < m and m <= b and m not in pairs:\n                num_recycled += 1\n                pairs.append(m)\n    return num_recycled\n         \n \ndef main():\n    N = int(sys.stdin.readline()) # number of testcases\n    for i in range(N):\n        [a, b] = [int(x) for x in sys.stdin.readline().split()]\n        result = solve(a,b)\n        print((\"Case #%s: %s\" % (i+1, result)))\n \n \nif __name__ == '__main__':\n    main()\n"}
{"author": "ralfkistner", "index": 21, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\nimport sys\nfin = sys.stdin\nT = int(fin.readline())\nfor case in range(1,T+1):\n    A, B = map(int, fin.readline().split())\n \n    total = 0\n \n    for i in range(A, B+1):\n        n = str(i)\n        pairs = set()\n        for shift in range(1, len(n)):\n            m = n[shift:] + n[:shift]\n            j = int(m)\n            if j > i and j <= B:\n                pairs.add(m)\n        total += len(pairs)\n \n \n    print(\"Case #%d: %s\" % (case, total))\n \n"}
{"author": "gizzywump", "index": 22, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nimport pdb\nimport re\nimport sys\n \nINPUT = \"tiny\"\n \nINPUT = \"C-small-attempt0.in.txt\"\n \ndef debug(*args):\n    pass #print(str(args))\n \nif 0:\n    def debug(*args):\n        sys.stderr(''.join(str(s) for s in args) + \"\\n\")\n \ndef recycleables(N, A, B):\n    t = set()\n    s = str(N)\n    for i in range(len(s)):\n        s1 = int(s[i:] + s[:i])\n        if A <= s1 <= B:\n            t.add(s1)\n    return t\n \ndef do_trial(A, B):\n    total = 0\n    seen = set()\n    for i in xrange(A, B+1):\n        if i not in seen:\n            t = recycleables(i, A, B)\n            z = len(t)\n            total += z * (z-1) / 2\n            seen.update(t)\n    return total\n \nf = file(INPUT)\nT = int(f.readline()[:-1])\nfor i in range(T):\n    A, B = [int(x) for x in f.readline()[:-1].split()]\n    v = do_trial(A, B)\n    print(\"Case #%d: %s\" % (i+1, v))\n"}
{"author": "idahojacket", "index": 23, "filename": "2012_1460488_1483488.py", "code": "import time\n \ndef get_num_recycled( number_s, limit ):\n    num_digits = len(number_s)\n    num_s = number_s + number_s\n    num = int(number_s)\n    r_nums = []\n    for i in range( 1, num_digits ):\n        r_num_s = num_s[i:num_digits+i]\n        r_num = int(r_num_s)\n        if ( r_num > num and r_num <= limit ):\n            r_nums.append( r_num )\n    \n    return len(set(r_nums))\n \n \nnum_cases = input()\nfor i in range( 1, num_cases + 1 ):\n    start, limit = raw_input().split()\nnum_recycled = 0\n#start_t = time.clock()\nfor num in range( int(start), int(limit) + 1 ):\n    num_recycled += get_num_recycled( str(num), int(limit) )\n#end_t = time.clock()\n#print start_t, end_t, end_t - start_t\nprint ('Case #' + str(i) + ': ' + str( num_recycled ))\n"}
{"author": "ronnodas", "index": 24, "filename": "2012_1460488_1483488.py", "code": "T=int(input())\nfor t in range(T):\n    a,b = [int(x) for x in input().split()]\n    count = 0\n    l = [0 for i in range(a,b+1)]\n    for n in range(a,b):\n        if l[n-a]:\n            continue\n        l[n-a]=1\n        ms = set()\n        s = str(n)\n        for i in range(len(s)):\n            m = int(s[i:]+s[:i])\n            if n<m<=b:\n                l[m-a]=1\n                ms.add(m)\n        case = len(ms)\n        count+= (case*(case+1))//2\n    print('Case #',t+1,': ',count,sep = '')\n"}
{"author": "michael", "index": 25, "filename": "2012_1460488_1483488.py", "code": "def read_line():\n    return raw_input().strip()\n \ndef read_words():\n    return read_line().split()\n \ndef read_integer():\n    return int( read_line() )\n \ndef read_integers():\n    return [ int( x ) for x in read_words() ]\n \nT = read_integer()\nfor t in range( T ):\n    print('Case #%i:' % ( t + 1 ),)\n    A, B = read_integers()\n    length = len( str( A ) )\n    pairs = set()\n    for n in range( A, B ):\n        digits = str( n )\n        for start in range( 1, length ):\n            m = int( digits[ start : ] + digits[ : start ] )\n            if n < m <= B:\n                pairs.add( ( n, m ) )\n    print(len( pairs ))\n"}
{"author": "rajabaz", "index": 26, "filename": "2012_1460488_1483488.py", "code": "def num_rotations(n, A, B):\n    # I'm sure there's a better way to do this\n    # but this works fast enough so who cares\n    s = str(n)\n    a = set()\n    for i in range(len(s)):\n        rotated = s[i:] + s[:i]\n        r = int(rotated)\n        if rotated[0] != '0' and A <= r <= B:\n            a.add(rotated)\n    return len(a) -1\n \ndef solve(A,B):\n    t  = 0\n    for i in range(A, B+1):\n        t += num_rotations(i, A, B)\n    if t % 2 != 0:\n        print(\"WTF\", A, B, t)\n    return t//2\n \nif __name__ == \"__main__\":\n    T = int(raw_input())\n    for i in range(1, T+1):\n        A,B = map(int, raw_input().strip().split())\n        print(\"Case #%d: %d\" % (i, solve(A,B)))\n"}
{"author": "eko", "index": 27, "filename": "2012_1460488_1483488.py", "code": "import sys, os\nimport re\n \ntCase = int(sys.stdin.readline())\n \ndef alien(numbers):\n\tresul = 0\n\tA = int(numbers[0])\n\tB = int(numbers[1])\n \n\tfor n in range(A,B-1):\n\t\tfor m in range(n+1,B+1):\n\t\t\t#print(n,m)\n\t\t\tif (len(str(n)) == len(str(m))):\n\t\t\t\tresul += isRecycled(str(n),str(m))\n \t\n \n \n\treturn resul\n \t\ndef isRecycled(n,m):\n\tif len(n) < 2:\n\t\treturn 0\n \t\t\n\tfor c in m:\n\t\tif c not in n:\n\t\t\treturn 0\n \n\tfor i in range (1, len(n)):\n\t\tmi = m[i:] + m[-len(m):-(len(m)-i)]\n\t\tif n == mi:\n\t\t\treturn 1\n \t\n\treturn 0\n \n \nlines = []\nfor i in xrange(tCase):\n\tline = sys.stdin.readline().split()\n\tlines.append((line[0],line[1]))\n \t\n \nfor i in xrange(tCase):\t\n\t#case.append(frase)\n\tprint(\"Case #%d: %s\" % (i+1, alien(lines[i])))\n \t\n \t\n \n"}
{"author": "xoxie", "index": 28, "filename": "2012_1460488_1483488.py", "code": "import sys\nfrom collections import deque\n \nif __name__ == \"__main__\":\n    f = open( \"C-small-attempt0.in.txt\" )\n    g = open( \"output_small.txt\", \"w\" )\n \n    numcases = int(f.readline())\n \n    caseI = 1\n    line = f.readline()\n    while line != \"\":\n        A,B = [int(x) for x in line.split()]\n \n        matched = [0]*(B+1)\n        pairs = deque()\n \n        for x in range(A,B+1):\n            if matched[x]:\n                continue\n            a = str(x)\n            allcycle = deque()\n            allcycle.append(x)\n            for i in range(1,len(a)):\n                yL,yR = a[:i],a[i:]\n                y = int( yR+yL )\n                if y >= A and y <= B:\n                    allcycle.append(y)\n            allcycle = list(set(allcycle))\n            allcycle.sort()\n            for y in allcycle:\n                matched[y] = 1\n            for i in range(len(allcycle)):\n                for j in range(i+1,len(allcycle)):\n                    pairs.append( (allcycle[i],allcycle[j]) )\n        g.write( \"Case #%s: %s\\n\"%(caseI,len(pairs)) )\n        line = f.readline()\n        caseI += 1\n    f.close()\n    g.close()\n"}
{"author": "radkokotev", "index": 29, "filename": "2012_1460488_1483488.py", "code": "from string import *\n \ndef compute(A,B):\n    start = A\n \n    count = 0\n \n    while start < B:\n        temp = str(start)+str(start)[:len(str(start))-1]\n        for i in range (len(str(start))):\n            if int(temp[i:len(str(start))+i]) > start and int(temp[i:len(str(start))+i]) <= B:\n                count += 1\n         \n        start += 1\n \n    return count\n         \nfileName = raw_input(\"File name: \")\nf = open(fileName,\"r\")\nn = int(f.readline()[:-1])\ni=0\nfor line in f:\n \n    items = (line[:-1]).split()\n    #items.split()\n \n    A = int(items[0])\n    B = int(items[1])\n    print(\"Case #%d: %d\" %(i+1,compute(A,B)))\n    i+=1\n     \nf.close()\n"}
{"author": "addie9000", "index": 30, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\nimport sys, string, math\n \n#solve case function\ndef solve_case(min, max, case_number):\n\tans = 0\n \n\tfor candidate in range(min, max + 1):\n\t\tcandidate_str = str(candidate)\n\t\tignore = []\n\t\tfor rot in range(1, len(candidate_str)):\n\t\t\trot_candidate = int(candidate_str[rot:] + candidate_str[:rot])\n\t\t\tif not rot_candidate in ignore:\n\t\t\t\tif rot_candidate <= max and candidate < rot_candidate:\n\t\t\t\t\tans = ans + 1\n\t\t\t\tignore.append(rot_candidate)\n \n\tprint(\"Case #%d: %d\" % (case_number, ans))\n \n#main\nr = sys.stdin\n \nif len(sys.argv) > 1:\n\tr = open(sys.argv[1], 'r')\n \ntotal_cases = r.readline()\nfor case_number in range(1, int(total_cases) + 1):\n\tcase = map(int, r.readline().rstrip().split(' '))\n\tsolve_case(case[0], case[1], case_number)\n \n"}
{"author": "amv", "index": 31, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\nimport sys\nimport numpy as np\n \ninfile=open(sys.argv[1],'r')\n \nNumCases=int(infile.readline())\n \nfor iCase in xrange(NumCases):\n \n    a,b=[int(i) for i in infile.readline().split()]\n \n \n#for iCase in xrange(1):\n#    a,b=[int(i) for i in sys.argv[1:]]\n    a_digits=[int(i) for i in str(a) ]\n    b_digits=[int(i) for i in str(b) ]\n \n    ld=len(a_digits)\n \n#    print(a_digits,b_digits)\n \n    result=0\n#    lowers={}\n \n    for iNum in xrange(a,b+1):\n        mystr=str(iNum)\n        myset=set()\n        for i in xrange(1,ld):\n            mystr=mystr[1:]+mystr[0]\n            iii=int(mystr)\n            if iii>iNum and iii<=b and iii not in myset:\n                result+=1\n                #print(iNum,iii)\n                #if lowers.has_key(iii):\n                #    lowers[iii].append(iNum)\n                #else: lowers[iii]=[iNum]\n \n            myset.add(iii)\n             \n         \n \n \n#    for k,v in lowers.iteritems(): print(k,':',v)\n    print('Case #'+str(iCase+1)+':',result)\n \n"}
{"author": "imakaramegane", "index": 32, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef testcases():\n    with open(sys.argv[1], \"r\") as f:\n        f.readline()  # skip number of testcases\n        for X, T in enumerate(f, 1):\n            yield X, [int(t) for t in T.split()]\n \ndef main():\n    for X, T in testcases():\n        A = T[0]\n        B = T[1]\n        y = 0\n        strA = str(A)\n        for n in range(B, A - 1, - 1):\n            b = str(n)\n            chk = set()\n            for i in range(1, len(b)):\n                a = b[i:] + b[:i]\n                if a not in chk and strA <= a < b:\n                    chk.add(a)\n                    y += 1\n \n        print(\"Case #{:d}: {:d}\".format(X, y))\n \nif __name__==\"__main__\":\n    main()\n"}
{"author": "bigonion", "index": 33, "filename": "2012_1460488_1483488.py", "code": "directory = 'C:/users/hai/my projects/google code jam/2012/qualification/C/'\n \n \ndef solve (f_in, f_out):\n    pre_calc = prepare()\n    T = int(f_in.readline())\n    for i in range(1,T+1):\n        A,B = [int(x) for x in f_in.readline().split()]\n        c = 0\n        for m in range(A,B+1):\n            c += len ([n for n in pre_calc[m] if n >=A])\n        f_out.write('Case #' + str(i) + ': ' + str(c) + '\\n')\n \n \n \n \n \n \ndef prepare ():\n    l = [None]* 2000001\n    for n in range(1,2000001):\n        recycled = []\n        s = str(n)\n        for c in range(1, len(s)):\n            s2 = s[c:] + s[:c]\n            if s2[0] != '0':\n                n2 = int(s2)\n                if n2 < n and n2 not in recycled:\n                    recycled.append(n2)\n        #recycled.sort()\n        l [n] = recycled\n    return l\n \n \ndef main_run():\n    import os\n    import time\n    filenames = [x for x in os.listdir (directory)]\n    filenames = [x for x in filenames if x.endswith('.in')]\n    l1 = [(os.stat(directory+x).st_ctime, x) for x in filenames]\n    chosen_filename =  sorted(l1)[-1][1][:-3]\n \n    print(('Directory : ', directory))\n    print(('Chosen Filename : ',chosen_filename))\n    print()\n    print(('Start : ', time.ctime()))\n    print()\n     \n    f_in = open(directory+chosen_filename+'.in')\n    f_out = open(directory+chosen_filename+'.out', 'w')\n    solve(f_in,f_out)\n    f_in.close()\n    f_out.close()\n \n    print(())\n    print(('End : ', time.ctime()))\n \n \nmain_run()\n"}
{"author": "rmmh", "index": 34, "filename": "2012_1460488_1483488.py", "code": "n_cases = input()\n \nfor case in xrange(1, n_cases + 1):\n    a, b = map(int, raw_input().split())\n \n    out = 0\n    e = 10 ** (len(str(a)) - 1)\n    for n in xrange(a, b):\n        s = str(n)\n        m = n\n        while True:\n            m = (m / 10) + (m % 10 * e)\n            if n < m <= b:\n                out += 1\n            if m == n:\n                break\n \n    print(\"Case #%d: %s\" % (case, out))\n"}
{"author": "nlse", "index": 35, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \nimport sys\nimport re\nimport math\n \ndef permute(x, d):\n    perm = []\n    for i in range(1,d):\n        n = x / 10**i\n        r = x % 10**i\n        #print('p', i, n, r)\n        if r >= 10**(i-1):\n            perm.append(r * 10**(d-i) + n)\n    perm = list(set(perm))\n    while x in perm:\n        perm.remove(x)\n    return perm\n \nf = open(sys.argv[1],'r')\n \nnum = int(f.readline())\n \nfor i in range(num):\n    n1, n2 = [int(x) for x in f.readline().split()]\n    d = int(math.floor(math.log10(n1))) + 1\n    rec = 0\n    for j in range(n1,n2+1):\n        p = permute(j, d)\n        #print(j,p)\n        rec += sum([1 for x in p if x >= n1 and x <= n2])\n        #print(rec)\n    print('Case #{}:'.format(i+1), rec/2)\n"}
{"author": "pek", "index": 36, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\nimport math\n \npots = [int(10**k) for k in xrange(0,16)]\n \nT = int(stdin.readline())\n \nfor i in xrange(1,T+1):\n\ta,b = map(int, stdin.readline().split())\n\tt = 0\n\tm = len(str(a))\n \n\tpp = int(10**m)\n \n\tfor n in xrange(a,b):\n\t\tss = []\n\t\tq = 1\n\t\tp = pp\n\t\tfor j in xrange(1,m):\n\t\t\tq *= 10\n\t\t\tp /= 10\n\t\t\tr = (n % p) * q + (n /p)\n\t\t\tif n < r and r <= b and not r in ss: \n\t\t\t\tss.append(r)\n\t\t\t\tt += 1\n \n \n\tprint(\"Case #%d: %d\" % (i,t))\n \n"}
{"author": "nooodles", "index": 37, "filename": "2012_1460488_1483488.py", "code": "T = int(raw_input());\nfor case in range(T):\n    [A,B] = map(int, raw_input().split());\n \n    Big = 10**(len(str(A))-1);\n    Ans = 0;\n \n    for i in range(A,B+1):\n        j = (i/10)+Big*(i%10);\n        while (j != i):\n            if i < j <= B:\n                Ans += 1;\n            j = (j/10)+Big*(j%10);\n \n    print (\"Case #%d:\" % (case+1),);\n    print (Ans);\n    \n \n"}
{"author": "fractal", "index": 38, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \nimport fileinput\n \ndef checkIndex(index,num,numB):\n\tn=int(str(num)[index:]+str(num)[:index])\n\tif n > num and n <= numB:\n\t\t#print(\"pair\",num, n)\n\t\treturn n\n\telse: return False\n \n \nfor line in fileinput.input():\n\tif fileinput.isfirstline():\n\t\tT=int(line) # no. of test cases\n\t\tcontinue\n\tnumStrs=line.split()\n\tnumSize=len(numStrs[0])\n\tnumA=int(numStrs[0])\n\tnumB=int(numStrs[1])\n\tcount=0\n\tfor num in xrange(numA, numB+1):\n\t\tpairs=set()\n\t\tfor i in range(numSize):\n\t\t\tn=checkIndex(i,num, numB)\n\t\t\tif n:\n\t\t\t\tpairs.add(n)\n\t\tcount +=len(pairs)\n \t\t\t\t\n\tprint(\"Case #%(k)i: %(count)i\" % {\"k\":fileinput.lineno()-1,\"count\":count})\n \t"}
{"author": "royf", "index": 39, "filename": "2012_1460488_1483488.py", "code": "\nimport sys\nimport os\nimport itertools\nimport math\nimport numpy\n \n__file__ = sys.argv[0]\n__path__ = os.path.dirname(__file__)\n__prob__ = os.path.basename(__path__)\n \ndef pout(s, back=0):\n    f = sys._getframe(back+1)\n    d = 0\n    if 'depth' in f.f_locals:\n        d = f.f_locals['depth']\n    print(' '*d + s + ' = ' + repr(eval(s, f.f_globals, f.f_locals)))\n \ndef perr(s, back=0):\n    f = sys._getframe(back+1)\n    d = 0\n    if 'depth' in f.f_locals:\n        d = f.f_locals['depth']\n    ERR_FILE.write(' '*d + '%s = %s\\n'%(s, repr(eval(s, f.f_globals, f.f_locals))))\n \ndef argmin(f, s=None):\n    a = f\n    if s is None:\n        s = range(len(a))\n        f = lambda i: a[i]\n    res = None\n    for x in s:\n        y = f(x)\n        if res is None or best > y:\n            best = y\n            res = x\n    return res\n \ndef argmax(f, s=None):\n    a = f\n    if s is None:\n        s = range(len(a))\n        f = lambda i: a[i]\n    res = None\n    for x in s:\n        y = f(x)\n        if res is None or best < y:\n            best = y\n            res = x\n    return res\n \ndef read_word(f):\n    return next(f).strip()\n \ndef read_int(f, b=10):\n    return int(read_word(f), b)\n \ndef read_words(f, d=' '):\\n    return read_word(f).split(d)\\n \\ndef read_ints(f, b=10, d=' '):\\n    return [int(x, b) for x in read_words(f, d)]\\n \\ndef read_word_arr(f, R):\\n    res = []\\n    for i in range(R):\\n        res.append(read_word(f))\\n    return res\\n \\ndef read_ints_arr(f, R, dtype=int, *args, **kwargs):\\n    res = []\\n    for i in range(R):\\n        res.append(read_ints(f, *args, **kwargs))\\n    return numpy.array(res, dtype)\\n \\ndef solve(solver, fn, start_case=0, end_case=None, out_fn=None):\\n    global ERR_FILE\\n    in_fn = fn + '.in'\n    if out_fn is None:\n        out_fn = fn + '.out'\n    err_fn = fn + '.err'\n    if start_case == 0:\n        append = True\n        if os.path.exists(out_fn):\n            with open(out_fn, 'r') as f:\n                for l in f:\n                    if l[:6] == 'Case #':\n                        start_case = int(l[6:l.index(':')])+1\n    else:\n        append = False\n    with open(in_fn, 'r') as fi:\n        with open(out_fn, 'a' if append else 'w') as fo:\n            with open(err_fn, 'w') as ERR_FILE:\n                T = read_int(fi)\n                for i in range(T):\n                    case = read_case(fi)\n                    if i+1 < start_case:\n                        continue\n                    print('Case #%d of %d'%(i+1, T))\n                    ERR_FILE.write('Case #%d of %d\\n'%(i+1, T))\n                    perr('case')\n                    res = solver(case)\n                    perr('res')\n                    write_case(fo, i, res)\n                    fo.flush()\n                    if end_case is not None and i+1 == end_case:\n                        break\n \ndef test(start_case=1, end_case=None):\n    fn = os.path.join(__path__, 'test')\n    solve(solve_small, fn, start_case, end_case)\n \ndef small(start_case=1, end_case=None):\n    fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)\n    solve(solve_small, fn, start_case, end_case)\n \ndef small2(start_case=1, end_case=None):\n    fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)\n    solve(solve_large, fn, start_case, end_case, fn + '2.out')\n \ndef large(start_case=0, end_case=None):\n    fn = os.path.join(__path__, '%s-large-attempt0'%__prob__)\n    solve(solve_large, fn, start_case, end_case)\n \n################################################################################\n \ndef read_case(f):\n    (A, B) = read_ints(f)\n    return (A, B)\n \ndef write_case(f, i, res):\n    f.write('Case #%d: '%(i+1))\n    f.write('%s'%res)\n    f.write('\\n')\n \nFAIL = 'NO SOLUTION'\n \ndef aux(n, a, b):\n    res = 0\n    s = set()\n    for i in range(1, len(n)):\n        m = n[i:]+n[:i]\n        if m > n and m >= a and m <= b and m not in s:\n            res += 1\n            s.add(m)\n    return res\n \ndef solve_small(case):\n    (A, B) = case\n    a = str(A)\n    b = str(B)\n    res = 0\n    for n in range(A, B+1):\n        res += aux(str(n), a, b)\n    return res\n \nsolve_large = solve_small\n \n##perr = pout\n##pout = lambda s: None\npout = perr\n"}
{"author": "argaen", "index": 40, "filename": "2012_1460488_1483488.py", "code": "t = int(raw_input())\n \ndef mover(n, i):\n\ts = str(n)\n\treturn int(s[i:] + s[:i])\n \nfor i in range(t):\n\ts = raw_input().split(' ')\n\ta = int(s[0])\n\tb = int(s[1])\n\ttotal = 0\n\tfor n in range(a, b):\n\t\tms = []\n\t\tfor k in range(len(s[0])):\n\t\t\tm = mover(n, k+1)\n\t\t\tif m <= b and m > n and not m in ms:\n\t\t\t#\tprint(n, mover(n, k+1), k+1)\n\t\t\t\tms.append(m)\n\t\t\t\ttotal +=1\n \n \n\tprint('Case #'+str(i+1)+':', total)"}
{"author": "pavlovic", "index": 41, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nn = int(sys.stdin.readline())\nfor i in range(n):\n\tinputline = sys.stdin.readline().strip()\n\tinputparams = inputline.split()\n \n\ta = int(inputparams[0])\n\tb = int(inputparams[1])\n \n\tk = a\n\tndigits = 0\n\twhile k > 0:\n\t\tk /= 10\n\t\tndigits += 1\n \n\tcnt = 0\n \n\tdic = {}\n \n\tfor n1digits in range(1, ndigits / 2 + 1):\n\t\tn2digits = ndigits - n1digits\n \n\t\tfor n1 in range(a / (10 ** n2digits), b / (10 ** n2digits) + 1):\n\t\t\tfor n2 in range(a / (10 ** n1digits), b / (10 ** n1digits) + 1):\n \n\t\t\t\tk1 = n1 * 10 ** n2digits + n2\n\t\t\t\tk2 = n2 * 10 ** n1digits + n1\n \n\t\t\t\tif (n1digits == n2digits) and (n1 >= n2):\n\t\t\t\t\tcontinue\n \n\t\t\t\tif (k1 != k2) and (k1 >=a) and (k2 >= a) and (k1 <= b) and (k2 <= b):\n \n\t\t\t\t\tif min(k1, k2) not in dic:\n\t\t\t\t\t\tdic[min(k1, k2)] = set()\n \n\t\t\t\t\tif max(k1, k2) not in dic[min(k1, k2)]:\n\t\t\t\t\t\tdic[min(k1, k2)].add(max(k1, k2))\n\t\t\t\t\t\tcnt += 1\n \n\tprint(\"Case #%d: %d\" % (i + 1, cnt)\t)\n \n"}
{"author": "anb", "index": 42, "filename": "2012_1460488_1483488.py", "code": "from sys import stdin\n \ndef program():\n\tT = int(stdin.readline())\n\tfor Ti in xrange(T):\n\t\tA, B =  map(int, stdin.readline().rstrip().split(' '))\n \t\t\n\t\tss = set()\n\t\tfor n in xrange(A, B + 1):\n\t\t\tsn = str(n)\n\t\t\tfor i in xrange(1, len(sn)):\n\t\t\t\tsm = sn[i:] + sn[:i]\n\t\t\t\tif sm[0] != '0':\n\t\t\t\t\tm = int(sm)\n\t\t\t\t\tif m > n and m <= B:\n\t\t\t\t\t\tss.add((n, m))\n \t\t\n\t\tprint('Case #%d: %d' % (Ti + 1, len(ss))\t)\n \t\nif __name__ == '__main__':\n\tprogram()"}
{"author": "coconutbig", "index": 43, "filename": "2012_1460488_1483488.py", "code": "def count_between(a, b):\n\tcount = 0\n\tfor item in range(a, b + 1):\n\t\trotate = len(str(item)) - 1\n\t\twatch_list = [item,]\n\t\trotate_count = 0\n\t\titem_len = len(str(item))\n\t\twhile rotate_count < rotate:\n\t\t\tr_item = str(item)\n\t\t\tr_item = r_item[rotate_count + 1:] + r_item[:rotate_count + 1]\n\t\t\tr_item_len = len(r_item)\n\t\t\tr_item = int(r_item)\n\t\t\tif r_item not in watch_list and r_item > item and r_item <= b and r_item >= a and item_len == r_item_len:\n\t\t\t\twatch_list.append(r_item)\n\t\t\t\tcount +=1\n\t\t\trotate_count += 1\n\treturn count\n \npre_computed = [0, 36, 801, 12060, 161982, 2023578, 299997,]\n \nt = int(raw_input().strip())\nt_count = 1\nwhile t_count <= t:\n\ta, b = [int(x) for x in raw_input().strip().split()]\n\t#len_a = len(str(a))\n\t#len_b = len(str(b))\n\t#result = reduce(lambda x, y: x + y, pre_computed[len_a - 1:len_b -1], 0)\n\t#print(result)\n\t#result -= count_between(pow(10, len_a - 1), a)\n\t#print(result)\n\t#result += count_between(pow(10, len_b - 1), b)\n\t#print(result)\n\t#print('Case #%d: %d' % (t_count, result,))\n\tprint('Case #%d: %d' % (t_count, count_between(a, b),))\n\tt_count += 1\n \n"}
{"author": "cheilman", "index": 44, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python\n \ndef readfile(filename):\n\t\"\"\"\n\tThe first line of the input gives the number of test cases,\n\tT. T test cases follow. Each test case consists of a single line\n\tcontaining the integers A and B.\n\t\"\"\"\n \n\tfile = open(filename, \"rt\")\n \n\tretval = {}\n \n\tT = int(file.readline().strip())\n\tretval['T'] = T\n \n\ttests = []\n \n\tfor i in xrange(T):\n\t\tline = file.readline().strip()\n \n\t\tparts = line.split(\" \")\n \n\t\tA = int(parts[0])\n\t\tB = int(parts[1])\n \n\t\ttest = {'A' : A, 'B' : B}\n \n\t\ttests = tests + [test, ]\n \n\tretval['tests'] = tests\n \n\treturn retval\n \ndef isrecycled(n, m):\n\tif (len(n) != len(m)):\n\t\treturn False\n \n\tfor i in range(len(n)):\n\t\tleft = n[:i]\n\t\tright = n[i:]\n \n\t\tflip = right + left\n \n\t\tif (flip == m):\n\t\t\treturn True\n \n\treturn False\n \ndef process(test):\n\tcount = 0\n \n\tA = test['A']\n\tB = test['B']\n \n\tfor n in xrange(A, B):\n\t\tfor m in xrange(n + 1, B):\n\t\t\tif (isrecycled(str(n), str(m))):\n\t\t\t\tcount = count + 1\n \n\treturn count\n \ndef process2(test):\n\tcount = 0\n \n\tA = test['A']\n\tB = test['B']\n \n\tfor n in xrange(A, B):\n\t\tv = str(n)\n \n\t\tfound = set()\n \n\t\tfor i in xrange(len(v)):\n\t\t\tleft = v[:i]\n\t\t\tright = v[i:]\n \n\t\t\tflip = right + left\n\t\t\tiflip = int(flip)\n \n\t\t\tif ((iflip > n) and (iflip <= B)):\n\t\t\t\tif (not iflip in found):\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\tfound.add(iflip)\n \n\treturn count\n \ndata = readfile(\"C-small-attempt0.in\")\n \nfor i in xrange(data['T']):\n\ttest = data['tests'][i]\n \n\tresult = process2(test)\n \n\tprint(\"Case #%d: %d\" % (i + 1, result))\n"}
{"author": "kawasaki", "index": 45, "filename": "2012_1460488_1483488.py", "code": "# -*- coding: utf-8 -*-\n \n \ndef rotate(x, w):\n    x = str(x)\n    return int(x[-w:] + x[:-w])\n \n \nT = int(raw_input())\nfor case in xrange(1, T + 1):\n    A, B = map(int, raw_input().split())\n \n    l = len(str(A))\n    assert l == len(str(B))\n \n    s = []\n    for n in xrange(A, B + 1):\n        for w in xrange(1, len(str(n))):\n            m = int(rotate(n, w))\n            if n < m <= B:\n                s.append((n, m))\n \n    print('Case #%d: %d' % (case, len(set(s))))\n \n"}
{"author": "j3ffreysmith", "index": 46, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \ndef partCa(infile=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/C-small-attempt0.in\",\\\n            outfile=\"C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/C/output.txt\"):\n     \n    #if not init:\n        #build_dict()\n     \n    #Reading input\n    linesA = []\n    for line in open(infile, 'r'):\n        linesA.append(line.strip())\n \n    outA = []\n         \n    #Parsing Input\n    T = int(linesA[0])\n    for i in range(1, 1 + T):\n        caseA = linesA[i].split()\n        A = int(caseA[0])\n        B = int(caseA[1])\n         \n         \n        outA.append(0)\n        #Calculating answer\n        for i in range(A,B):\n            for j in range(i + 1, B + 1):\n                #testing pair (i, j)\n                outA[-1] += int(isRecycled(i, j))\n     \n    #Writing Output\n    out = open(outfile, 'w')\n    print(\"\\nOUTPUT\")\n    for i in range(1, 1 + T):\n        if i != 1:\n            out.write(\"\\n\")\n        print(\"Case #\" + str(i) + \": \" +str(outA[i-1]))\n        out.write(\"Case #\" + str(i) + \": \" +str(outA[i-1]))\n    out.close()\n     \ndef isRecycled(n,m):\n    '''\n    Takes 2 integers and tells you if they are recycled\n    '''\n    a = str(n)\n    b = str(m)\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if (a[i:] + a[:i]) == b:\n                return True\n         \n    return False\n     \nif __name__ == \"__main__\":\n    partCa()\n"}
{"author": "idolivneh", "index": 47, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef cycle_shift(in_str):\n\treturn \"%s%s\" % (in_str[-1], in_str[:-1])\n \ndef get_cyclic_shifts(num):\n\tresults = []\n\tstr_num = str(num)\n\tfor _ in xrange(len(str_num) - 1):\n\t\tstr_num = cycle_shift(str_num)\n\t\tif str_num[0] == '0':\n\t\t\tcontinue\n\t\tnumber = int(str_num)\n\t\tif not number in results:\n\t\t\tresults.append(number)\n\treturn results\n \t\ndef get_rec_pairs(A, B):\n\trec_pairs = []\n\tfor i in xrange(A, B + 1):\n\t\tshifts = get_cyclic_shifts(i)\n\t\tfor shift in shifts:\n\t\t\tif (shift > i and\n\t\t\t\tshift <= B):\n\t\t\t\trec_pairs.append((i, shift))\n\treturn rec_pairs\n \t\ndef main(filepath):\n\twith file('numbers_output.txt', 'wb') as f_out:\n\t\twith file(filepath, 'rb') as f_in:\n\t\t\tfor line_index, line in enumerate(f_in):\n\t\t\t\tif line_index == 0: #T\n\t\t\t\t\tcontinue\n\t\t\t\tinput_list = line.strip().split(' ')\n\t\t\t\tA = int(input_list[0])\n\t\t\t\tB = int(input_list[1])\n \t\t\t\t\n\t\t\t\trec_pairs = get_rec_pairs(A, B)\n\t\t\t\tresult = len(rec_pairs)\n \t\t\t\t\t\t\t\n\t\t\t\tprint\n\t\t\t\tprint (line.strip())\n\t\t\t\tprint (result)\n \t\t\t\t\n\t\t\t\tf_out.write(\"Case #%d: %d\\n\" % (line_index, result))\n \t\t\t\t\nif __name__ == '__main__':\n\tmain(sys.argv[1])"}
{"author": "serialk", "index": 48, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python2.7\n \nT = int(raw_input())\nfor i in xrange(T):\n    values = map(int, raw_input().split())\n    [N,s,p] = values[0:3]\n    t = values[3:]\n    answer = 0\n    for note in t:\n        if note < 2:\n            if note >= p:\n                answer += 1\n        elif note % 3 == 1 and (note-1) / 3 + 1 >= p:\n            answer += 1\n        elif note % 3 == 0:\n            n = note / 3\n            if n >= p:\n                answer += 1\n            elif s > 0 and n + 1 >= p:\n                answer += 1\n                s -= 1\n        elif note % 3 == 2:\n            n = (note - 2) / 3\n            if n + 1 >= p:\n                answer += 1\n            elif s > 0 and n + 2 >= p:\n                answer += 1\n                s -= 1\n    print('Case #{0}: {1}'.format(i+1, answer))\n"}
{"author": "alexamici", "index": 49, "filename": "2012_1460488_1483488.py", "code": "\"\"\"Usage:\n    X.py < X.in > X.out\n\"\"\"\n \nimport sys\n \n \nclass Solver(object):\n    cache = {}\n \n    def __init__(self, infile, testcase):\n        self.testcase = testcase\n        #self.N = N = int(infile.next())\n        #self.P = P = map(int, infile.next().split())\n        self.I = I = map(int, infile.next().split())\n        #self.T = T = infile.next().split()\n        #self.S = S = [infile.next().strip() for i in range(N)]\n \n        #self.init_cache()\n \n    def init_cache(self):\n        if 'main' in self.cache:\n            return\n        #self.cache['main'] = res\n \n    def solve(self):\n        #import collections as co\n        #import functools as ft\n        #import itertools as it\n        #import operator as op\n        #import math as ma\n        #import re\n        #import numpy as np\n        #import scipy as sp\n \n        #N = self.N\n        #N, M = self.P\n        I = self.I\n        #T = self.T\n        #S = self.S\n        l = len(str(I[0]))\n \n        r = 0\n        for i in xrange(I[0], I[1]):\n            ii = str(i)\n            rr = set()\n            for j in xrange(1, l):\n                if  i < int(ii[j:]+ii[:j]) <= I[1]:\n                    rr.add(ii[j:]+ii[:j])\n            r += len(rr)\n \n        return r\n \n \ndef main():\n    T = int(sys.stdin.next())\n    for t in xrange(T):\n        sys.stdout.write('Case #%s: %s\\n' % (t + 1, Solver(sys.stdin, t).solve()))\n \n \nif __name__ == '__main__':\n    main()\n"}
{"author": "bastiandantilus", "index": 50, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef digits(number, base = 10):\n    while number:\n        yield number % base\n        number //= base\n \nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n \n    t = int(f.readline())    \n    for _t in range(t):\n        s = f.readline()\n        s = s.split()\n        A = int(s[0])\n        B = int(s[1])\n        score = 0\n        #print (A, B, [x for x in range(A, B)][-1])\n        for i in range(A, B):\n            #print (A, B, [x for x in range(i+1, B+1)][-1])\n            for j in range(i+1, B+1):\n                id = [d for d in digits(i)]\n                jd = [d for d in digits(j)]\n                if  sorted(id) == sorted(jd):\n                    checklist = [jd[n:] + jd[:n] for n in range(len(id))]\n                    if id in checklist:\n                        score +=1\n                    #print(checklist)\n        print (\"Case #\" + str(_t+1) + \": \" + str(score))\n     \n \n"}
{"author": "netsuso", "index": 51, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/python3\n \nimport sys\n \ndef findrecycled(num, A, B):\n\tstrnum = str(num)\n\tresults = {}\n\tfor i in range(1, len(strnum)):\n\t\tstrrecycled = strnum[i:] + strnum[0:i]\n\t\trecycled = int(strrecycled)\n\t\tif recycled > num and recycled >= A and recycled <= B:\n\t\t\tresults[\"%d_%d\" % (num, recycled)] = 1\n\treturn len(results)\n \n# Ignore the number of cases\nsys.stdin.readline()\n \ncasenum = 0\nfor line in sys.stdin:\n\tcasenum += 1\n \n\tdata = line.strip().split(' ')\n\tA = int(data[0])\n\tB = int(data[1])\n \n\tcount = 0\n\tfor num in range(A, B):\n\t\tcount += findrecycled(num, A, B)\n \n\tprint(\"Case #%d: %d\" % (casenum, count))\n"}
{"author": "intn", "index": 52, "filename": "2012_1460488_1483488.py", "code": "'''\nCreated on 2012-4-14\n \n@author: hemnd\n'''\ndef cal(A, B):\n    rslt = 0\n    tmp = []\n    for i in range(1, len(A)):\n        min = max = 0\n        for j in range(int(A[0:i]), int(B[0:i]) + 1):\n            sJ = str(j)\n            sMin = (sJ * (len(A) - i))[0:len(A) - i]\n            min = int(sMin)\n            if int(sMin + sJ) <= int(sJ + sMin):\n                min += 1\n            if int(B[-i:]) >= j:\n                max = int(B[:(len(A) - i)])\n            else:\n                max = int(B[:(len(A) - i)]) - 1\n            if max < min:\n                continue\n            for k in range(min, max + 1):\n                if (sJ + str(k), str(k) + sJ) in tmp:\n                    print((sJ + str(k), str(k) + sJ), 'already there')\n                    continue\n                else:\n                    tmp.append((sJ + str(k), str(k) + sJ))\n                    rslt += 1\n \n#            rslt = rslt + max - min + 1\n    return rslt\n \ninputFile = open('C-small-attempt2.in', 'r')\n#inputFile = open('test.txt', 'r')\ninputLines = inputFile.readlines()\ninputFile.close()\n \nT = int(inputLines[0])\noutputLines = []\n \nfor i in range(1, T + 1):\n    args = inputLines[i].strip().split(' ')\n    outputLines.append('Case #%d: %d\\n' % (i, cal(args[0], args[1])))\n    print(outputLines[i - 1],)\n \noutputFile = open('C-small.out', 'w')\noutputFile.writelines(outputLines)\noutputFile.close()\n"}
{"author": "shishkander", "index": 53, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\nimport cPickle, time\nF = {}\n# to compute F:\ndef f(x, _x, _min, _max):\n    if x < 10: \n        #raise StopIteration\n        return set()\n    l = len(str(x)) -1\n    k = 10**l\n    res = set()\n    res.add(_x)\n    for i in xrange(l):\n        x = (x % 10) * k + x/10\n        if _min <= x <= _max and _x < x:\n            res.add(x)\n    res.remove(_x)\n    if res:\n        #print(_x, \"=>\", res)\n        F[_x] = sorted(res)\n    return res\n \ndef compute_F(B):\n    for i in xrange(0, B+1):\n        f(i,i, 0, B+1)\n    with open(\"picle\",'wb') as _file:\n        cPickle.dump( F, _file)\n \n#print(\"start\", time.time())\n#compute_F(2000000)\n#print(\"end  \", time.time())\n \n \nt_start = time.time()\nprint(\"loading...\")\nwith open(\"picle\",'rb') as _file:\n    F = cPickle.load(_file)\nprint(\"done in %.2fs\" % (time.time() - t_start))\nprint(\"loaded F with %i keys\" % len(F))\n \ndef case(A, B):\n    print(\"XXXXXXXXX \", A, B)\n    res = 0\n    res2 = 0\n    for i in xrange(A, B):\n        l = F.get(i, [])\n        #l = sorted(f(i,i,A,B))\n        #res += len(l)\n        #l1 = sorted(F.get(i,[]))\n        #if l != l1:\n        #    print(i, l, l1)\n \n        for x in l:\n            if x <= B:\n                res += 1\n    return res\n \ndef solve(fin, fout):\n    T = int(fin.readline())\n    for t in xrange(T):\n        A, B = map(int, fin.readline().strip().split(\" \"))\n        assert A <= B\n        fout.write(\"Case #%i: %i\\n\" % (t+1, case(A,B)) )\n    return True\n \nif __name__ == \"__main__\":\n    import sys\n    with open(sys.argv[1],'r') as fin:\n        with open(sys.argv[2], 'w') as fout:\n            solve(fin, fout)\n"}
{"author": "graygrass", "index": 54, "filename": "2012_1460488_1483488.py", "code": "#! /usr/bin/env python\n#coding=utf-8\n \ndef solve(icase, case_input):\n    case_output = 'Case #%i: '%icase\n     \n    result = 0\n    raw = case_input[0].split()\n    n = len(raw[0])\n    a = int(raw[0])\n    b = int(raw[1])\n     \n    for i in xrange(a, b):\n        rslt = set()\n        for t in xrange(1, n):\n            tt = 10**t\n            tn = 10**(n-t)\n            ia, ib = divmod(i, tt)\n            ii = ib*tn + ia\n            if ii > i and ii <= b:\n                rslt.add(ii)\n        result += len(rslt)\n         \n \n    case_output += '%d'%result\n     \n    return case_output\n \n \ndef main():\n    global use_test_data\n    global test_data\n    global input_file\n    global output_file\n     \n    if use_test_data:\n        data = [x.strip() for x in test_data.split('\\n')]\n    else:\n        data = [x.strip() for x in input_file.readlines()]\n     \n    T = int(data[0])\n    iLine = 1\n    caseLineNum = 1\n    for icase in range(1, T + 1):\n        input = []\n        for i in range(caseLineNum):\n            input.append(data[iLine])\n            iLine += 1\n        rslt = solve(icase, input)\n        print (rslt)\n        if not use_test_data:\n            print >> output_file, rslt\n     \n    if not use_test_data:\n        input_file.close()\n        output_file.close()\n     \n     \nif __name__ == '__main__':\n    test_data = \"\"\"5\n1 9\n10 40\n100 500\n1111 2222\n1000000 2000000\n\"\"\"\n    use_test_data = False\n     \n    test_file = 'C-small-attempt0.in'\n    if not use_test_data and '' != test_file:\n        input_file = open(test_file)\n        output_file = open(test_file + '.out', 'w')\n     \n    main()"}
{"author": "yordan", "index": 55, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n \n \ndef rotate(i, ndigits):\n    s = str(i)\n    s = s[-ndigits:] + s[:-ndigits]\n    return int(s)\n \ndef pairs(A, B):\n    for n in range(A, B + 1):\n        for i in range(1, len(str(n))):\n            m = rotate(n, i)\n            if n >= m or m > B: continue\n            yield n, m\n \ndef main():\n    import sys\n    with open(sys.argv[1], 'r') as f:\n        f.readline()\n        n = 0\n        for line in f:\n            n += 1\n \n            A, B = [int(x) for x in line.split(' ')]\n            unique = set()\n            for pair in pairs(A, B):\n                unique.add(pair)\n            print('Case #%d: %d' % (n, len(unique)))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "enterr", "index": 56, "filename": "2012_1460488_1483488.py", "code": "#\n# Google Code Jam 2012\n# Round 0: C. Recycled Numbers\n# submission by EnTerr\n#\n \n'''\nLimits: 1 <= T <= 50. A and B have the same number of digits.\nSmall dataset: 1 <= A <= B <= 1000.\nLarge dataset: 1 <= A <= B <= 2000000\n \nInput \n4\n1 9\n10 40\n100 500\n1111 2222\n  \t\nOutput \nCase #1: 0\nCase #2: 3\nCase #3: 156\nCase #4: 287\n \n'''\n \nimport psyco\npsyco.full()\n \nimport sys\nfrom time import clock\n \ninf = open(sys.argv[1])\ndef input(): return inf.readline().strip()\n \ndef numRecycled(A,B):\n    ln = len(str(A))\n    rot = 10**(ln-1)\n    cnt = 0\n    for i in range(A,B+1):\n        res = set()\n        j = i\n        for _ in range(ln-1):\n            a,b = divmod(j, 10)\n            j = rot*b + a\n            if i < j <= B:\n                res.add(j)\n        cnt += len(res)\n    return cnt\n \nfor caseNo in range(1, int(input())+1):\n    #print(>>sys.stderr, caseNo)\n    #tm = clock()\n    print('Case #%d:' % caseNo,)\n    A,B = map(int, input().split())\n    print(numRecycled(A,B))\n    #print(A, B, clock() - tm)\n \n"}
{"author": "entropy", "index": 57, "filename": "2012_1460488_1483488.py", "code": "data = [ [int(a) for a in i.split(\" \")] for i in open(\"C-small-attempt0.in\",\"rU\").read()[:-1].split(\"\\n\")]\n \ndef recycle(number, mini, maxi):\n\tnumber2 = str(number)\n\tcount = 0\n\tfor i in range(len(number2)):\n\t\tnumber2 = number2[-1:] + number2[:-1]\n\t\tnumtemp = int(number2)\n\t\tif (number == numtemp) or (number > numtemp):\n\t\t\tcontinue\n\t\tif ((numtemp <= maxi) and (numtemp > mini)):\n\t\t\t#print((number,numtemp))\n\t\t\tnumlist.append((number,numtemp))\n\t\t\tcount += 1\n\treturn count\n# total = 0\n# for i in range(1111,2222):\n# \ttotal += (recycle(i,1111,2222))\n# \tprint((len(set(numlist))))\n \n \n \ncount = 0\nfor line in data[1:]:\n\tcount += 1\n\ttotal = 0\n\tnumlist = []\n\tfor a in range(line[0],(line[1])):\n\t\ttotal += recycle(a,line[0], line[1])\n\tprint((\"Case #\"+str(count)+\":\", len(set(numlist))))"}
{"author": "sickmath", "index": 58, "filename": "2012_1460488_1483488.py", "code": "fin = open('C-small-attempt0.in', 'r')\nfout = open('C-output.txt', 'w')\n \ncases = int(fin.readline()[:-1])\n \nfor case in range(cases) :\n    A, B = map(int, fin.readline()[:-1].split(' '))\n    digits = len(str(A))\n    couples = set()\n    for n in range(A,B+1) :\n        for t in range(1,digits) :\n            m = [str(n)[(i+t)%digits] for i in range(digits)]\n            m = int(''.join(m))\n            if A <= n < m <= B :\n                couples.add(str([n,m]))\n    res = len(couples)\n    print('Case #' + str(case+1) + ': ' + str(res))\n    fout.write('Case #' + str(case+1) + ': ' + str(res) + '\\n')\n     \nfin.close()\nfout.close()\n"}
{"author": "jakab922", "index": 59, "filename": "2012_1460488_1483488.py", "code": "from sys import argv\nfrom math import floor, log10\n \ndef grab2(x):\n\tif x < 2:\n\t\treturn 0\n\treturn x * (x - 1) / 2\n \ndef solve(low, high):\n\twas = [0 for i in range(low, high + 1)]\n\ttotal = 0\n \n\tfor i in xrange(low, high + 1):\n\t\tif was[i - low] == 0:\n\t\t\twas[i - low] = 1\n\t\t\tvariations = set([i])\n \t\t\t\n\t\t\tif global_variations[i] != []:\n\t\t\t\tfor j in global_variations[i]:\n\t\t\t\t\tif j >= low and j <= high:\n\t\t\t\t\t\twas[j - low] = 1\n\t\t\t\t\t\tvariations.add(j)\n\t\t\telse:\n\t\t\t\tcurr = i\n\t\t\t\tclen = int(floor(log10(i)))\n\t\t\t\tpow10 = pow(10, clen)\n\t\t\t\tcgvariations = set(list(variations))\n\t\t\t\tfor i in range(clen):\n\t\t\t\t\tpre = curr % 10\n\t\t\t\t\tcurr = pow10 * pre + (curr - (curr % 10)) / 10\n\t\t\t\t\tif pre != 0 and curr not in variations and curr >= low and curr <= high:\n\t\t\t\t\t\tvariations.add(curr)\n\t\t\t\t\t\twas[curr - low] = 1\n\t\t\t\t\tif pre != 0 and curr < ma and curr not in cgvariations:\n\t\t\t\t\t\tcgvariations.add(curr)\n \n\t\t\t\tfor cg in cgvariations:\n\t\t\t\t\tglobal_variations[cg] = list(cgvariations)\n \n\t\t\ttotal += grab2(len(variations))\n \n \n\treturn total\n \nf = open(argv[1], 'r')\nT = int(f.readline().strip('\\n'))\nmi = 2000000\nma = 1\nab = []\nfor i in range(T):\n\tab.append(map(int, f.readline().strip('\\n').split(' ')))\n\tif ab[-1][1] > ma:\n\t\tma = ab[-1][1]\n \nglobal_variations = [[] for i in range(ma + 2)]\n \ni = 1\nfor x in ab:\n\tprint(\"Case #%s: %s\" % (i, solve(x[0],x[1])))\n\ti += 1"}
{"author": "pyronimous", "index": 60, "filename": "2012_1460488_1483488.py", "code": "input_file = 'C-small-attempt4.in'\n#input_file = 'c_sample.in'\noutput_file = 'c.out'\n \n \ndef solvecase(inp):\n\tA, B = [int(n) for n in inp.split()]\n \t\n\tdef shift(s):\n\t\treturn s[-1] + s[:-1]\n \t\n\tret = 0\n\tfor n in range(A, B + 1):\n\t\tsn = str(n)\n\t\tsm = sn\n\t\trep = []\n\t\tfor i in range(len(sn) - 1):\n\t\t\tsm = shift(sm)\n\t\t\tif not (sm in rep) and (B >= int(sm) > n):\n\t\t\t\tret += 1\n\t\t\t\trep.append(sm)\n\treturn ret\n \n \nlines = open(input_file, 'r').readlines()\nout = open(output_file, 'w')\n \nfor i, l in enumerate(lines[1:]):\n\tsout = 'Case #%i: %i' % (i + 1, solvecase(l))\n\tprint(sout)\n\tout.write(sout + '\\n')\n \nout.close()\n"}
{"author": "elmoatasem", "index": 61, "filename": "2012_1460488_1483488.py", "code": "'''\nCreated on Apr 14, 2012\n \n@author: moatasem\n'''\n \ndef getNumRecycle(n,A,B,h):\n        c=0\n        x=list(str(n))\n        for i in xrange(1,len(x)):\n            t1=\"\".join(x[0:i])\n            t2=\"\".join(x[i:len(x)])\n            num=int(t2+t1)\n            if((num>=A and num<=B) and num!=n and h.get((num,n))==None and h.get((n,num))==None):\n                #print \"(\",str(n),\",\",str(num),\")\"\n                h[(num,n)]=0;\n                c+=1\n        return c\n     \n     \nf = open(\"C-small-attempt0.in\", \"r\")\nn=int(f.readline().strip())\nfor k  in xrange(n):\n    d=f.readline().strip()\n    A,B=[int(i) for i in d.split(\" \")]\n    count=0\n    h={}\n    for j in range(A,B+1):\n        count+= getNumRecycle(j,A,B,h)\n    print ('Case #'+str((k+1))+\": \"+str(count))"}
{"author": "tamaeguchi", "index": 62, "filename": "2012_1460488_1483488.py", "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# Problem C. Recycled Numbers\n# http://code.google.com/codejam/contest/1460488/dashboard#s=p2\n#\n \nimport sys\nimport string\n \n \ndef solve(A, B):\n\t# Given integers A and B with the same number of digits\n\t# なのでAとBは同じケタ数のはず\n\ttop = str(B)[0]\n \n\tcount = 0\n\tfor n in xrange(A, B):\t\t# n=B のケースは検証不要(n < m <= B になりえない)\n\t\tdigit = str(n)\n\t\tfound = set()\n\t\tfor index in range(1, len(digit)):\n\t\t\tif digit[index] < digit[0]:\n\t\t\t\t# m の先頭が n の先頭より小さい → n < m にならない\n\t\t\t\tcontinue\n\t\t\tif digit[index] > top:\n\t\t\t\t# m の先頭が B の先頭より大きい → m <= B にならない\n\t\t\t\tcontinue\n \n\t\t\tm = int(digit[index:] + digit[:index])\n\t\t\tif n < m and m <= B and m not in found:\n\t\t\t\tfound.add(m)\t\t# distinct 判定(見つけたものは除外)\n\t\t\t\tcount += 1\n\t\t\t\t#print(n, m)\n\treturn count\n \n \ndef main(IN, OUT):\n\tN = int(IN.readline())\n\tfor index in range(N):\n\t\tA, B = map(int, IN.readline().strip().split())\n\t\tOUT.write('Case #%d: %d\\n' % (index + 1, solve(A, B)))\n \n \ndef makesample(ABmax=2000000, T=50):\n\timport random\n\tprint(T)\n\tfor index in range(T):\n\t\tA = random.randint(1, ABmax)\n\t\tB = random.randint(A, ABmax)\n\t\tprint(A, B)\n \n \nif __name__ == '__main__':\n\tif '-makesample' in sys.argv[1:]:\n\t\tmakesample()\n\telse:\n\t\tmain(sys.stdin, sys.stdout)\n \n"}
{"author": "gepa", "index": 63, "filename": "2012_1460488_1483488.py", "code": "import sys\n \nMAX_LIMIT = 2000000\n \n \ndef get_min_mapped(n):\n    n_min = n\n    x = str(n)\n    for i in xrange(1, len(x)):\n        x = x[1:] + x[0]\n        if x[0] == '0':\n            continue\n        n_min = min(n_min, int(x))\n    return n_min\n \n \nif __name__ == \"__main__\":\n    T = int(sys.stdin.readline().strip())\n    min_mapped = [0] * (MAX_LIMIT + 1)\n    for i in xrange(1, MAX_LIMIT + 1):\n        min_mapped[i] = get_min_mapped(i)\n \n    for r in xrange(T):\n        values = map(int, sys.stdin.readline().strip().split(' '))\n        A, B = values\n        cnt_mapped = [0] * (B + 1)\n        for i in xrange(A, B + 1):\n            cnt_mapped[min_mapped[i]] += 1\n        total = 0\n        for i in xrange(B + 1):\n            if cnt_mapped[i] > 1:\n                total += (cnt_mapped[i] * (cnt_mapped[i] - 1)) / 2\n        print(\"Case #%d: %s\" % (r + 1, total))\n"}
{"author": "jgaten", "index": 64, "filename": "2012_1460488_1483488.py", "code": "import sys\n \ndef solve(a, b):\n    count = 0\n    for n in xrange(a, b):\n        s = str(n)\n        for i in xrange(len(s)):\n            m = int(s[i:] + s[:i])\n            if n < m <= b:\n                count += 1\n    return count\n \nif __name__ == '__main__':\n    with open(sys.argv[1], 'rU') as fin, open(sys.argv[2], 'w') as fout:\n        T = int(fin.readline())\n        for case in xrange(1, T+1):\n            a, b = map(int, fin.readline().split())\n            print >> fout, \"Case #{0}: {1}\".format(case, solve(a, b))\n"}
